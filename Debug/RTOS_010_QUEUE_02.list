
RTOS_010_QUEUE_02.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d14  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e8  08004ea4  08004ea4  00014ea4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800508c  0800508c  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800508c  0800508c  0001508c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005094  08005094  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005094  08005094  00015094  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005098  08005098  00015098  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800509c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000408c  20000074  08005110  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004100  08005110  00024100  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014ea5  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b68  00000000  00000000  00034f49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f98  00000000  00000000  00037ab8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e90  00000000  00000000  00038a50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022af0  00000000  00000000  000398e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012502  00000000  00000000  0005c3d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d3822  00000000  00000000  0006e8d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001420f4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004454  00000000  00000000  00142148  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004e8c 	.word	0x08004e8c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08004e8c 	.word	0x08004e8c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000578:	b480      	push	{r7}
 800057a:	b085      	sub	sp, #20
 800057c:	af00      	add	r7, sp, #0
 800057e:	60f8      	str	r0, [r7, #12]
 8000580:	60b9      	str	r1, [r7, #8]
 8000582:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000584:	68fb      	ldr	r3, [r7, #12]
 8000586:	4a07      	ldr	r2, [pc, #28]	; (80005a4 <vApplicationGetIdleTaskMemory+0x2c>)
 8000588:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800058a:	68bb      	ldr	r3, [r7, #8]
 800058c:	4a06      	ldr	r2, [pc, #24]	; (80005a8 <vApplicationGetIdleTaskMemory+0x30>)
 800058e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	2280      	movs	r2, #128	; 0x80
 8000594:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000596:	bf00      	nop
 8000598:	3714      	adds	r7, #20
 800059a:	46bd      	mov	sp, r7
 800059c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop
 80005a4:	20000090 	.word	0x20000090
 80005a8:	200000e4 	.word	0x200000e4

080005ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b084      	sub	sp, #16
 80005b0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b2:	f000 fbb5 	bl	8000d20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b6:	f000 f869 	bl	800068c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ba:	f000 f8fb 	bl	80007b4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005be:	f000 f8cf 	bl	8000760 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* ************************** CREATE QUEUE ************************* */
  SimpleQueue = xQueueCreate(2,sizeof(myStruct));
 80005c2:	2200      	movs	r2, #0
 80005c4:	210c      	movs	r1, #12
 80005c6:	2002      	movs	r0, #2
 80005c8:	f002 f9f0 	bl	80029ac <xQueueGenericCreate>
 80005cc:	4603      	mov	r3, r0
 80005ce:	4a22      	ldr	r2, [pc, #136]	; (8000658 <main+0xac>)
 80005d0:	6013      	str	r3, [r2, #0]

  if(SimpleQueue != NULL)
 80005d2:	4b21      	ldr	r3, [pc, #132]	; (8000658 <main+0xac>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d00c      	beq.n	80005f4 <main+0x48>
  {
	  char *str = "Structure Queue Created Successfully\n\n";
 80005da:	4b20      	ldr	r3, [pc, #128]	; (800065c <main+0xb0>)
 80005dc:	607b      	str	r3, [r7, #4]
	  HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), HAL_MAX_DELAY);
 80005de:	6878      	ldr	r0, [r7, #4]
 80005e0:	f7ff fdf6 	bl	80001d0 <strlen>
 80005e4:	4603      	mov	r3, r0
 80005e6:	b29a      	uxth	r2, r3
 80005e8:	f04f 33ff 	mov.w	r3, #4294967295
 80005ec:	6879      	ldr	r1, [r7, #4]
 80005ee:	481c      	ldr	r0, [pc, #112]	; (8000660 <main+0xb4>)
 80005f0:	f001 fdf7 	bl	80021e2 <HAL_UART_Transmit>
  }
  if(SimpleQueue == NULL)
 80005f4:	4b18      	ldr	r3, [pc, #96]	; (8000658 <main+0xac>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d10c      	bne.n	8000616 <main+0x6a>
  {
	  char *str = "Unable to create Structure Queue\n\n";
 80005fc:	4b19      	ldr	r3, [pc, #100]	; (8000664 <main+0xb8>)
 80005fe:	603b      	str	r3, [r7, #0]
	  HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), HAL_MAX_DELAY);
 8000600:	6838      	ldr	r0, [r7, #0]
 8000602:	f7ff fde5 	bl	80001d0 <strlen>
 8000606:	4603      	mov	r3, r0
 8000608:	b29a      	uxth	r2, r3
 800060a:	f04f 33ff 	mov.w	r3, #4294967295
 800060e:	6839      	ldr	r1, [r7, #0]
 8000610:	4813      	ldr	r0, [pc, #76]	; (8000660 <main+0xb4>)
 8000612:	f001 fde6 	bl	80021e2 <HAL_UART_Transmit>

  }

  /* ********************* CREATE TASK ****************************** */
  xTaskCreate(TASK1_CONTROL, "Task1", configMINIMAL_STACK_SIZE, NULL, 2, &Task1Handle);
 8000616:	4b14      	ldr	r3, [pc, #80]	; (8000668 <main+0xbc>)
 8000618:	9301      	str	r3, [sp, #4]
 800061a:	2302      	movs	r3, #2
 800061c:	9300      	str	r3, [sp, #0]
 800061e:	2300      	movs	r3, #0
 8000620:	2280      	movs	r2, #128	; 0x80
 8000622:	4912      	ldr	r1, [pc, #72]	; (800066c <main+0xc0>)
 8000624:	4812      	ldr	r0, [pc, #72]	; (8000670 <main+0xc4>)
 8000626:	f002 fd66 	bl	80030f6 <xTaskCreate>
  xTaskCreate(TASK2_CONTROL, "Task2", configMINIMAL_STACK_SIZE, NULL, 2, &Task2Handle);
 800062a:	4b12      	ldr	r3, [pc, #72]	; (8000674 <main+0xc8>)
 800062c:	9301      	str	r3, [sp, #4]
 800062e:	2302      	movs	r3, #2
 8000630:	9300      	str	r3, [sp, #0]
 8000632:	2300      	movs	r3, #0
 8000634:	2280      	movs	r2, #128	; 0x80
 8000636:	4910      	ldr	r1, [pc, #64]	; (8000678 <main+0xcc>)
 8000638:	4810      	ldr	r0, [pc, #64]	; (800067c <main+0xd0>)
 800063a:	f002 fd5c 	bl	80030f6 <xTaskCreate>
  xTaskCreate(RECEIVER_TASK, "Task3", configMINIMAL_STACK_SIZE, NULL, 1, &ReceiverTask);
 800063e:	4b10      	ldr	r3, [pc, #64]	; (8000680 <main+0xd4>)
 8000640:	9301      	str	r3, [sp, #4]
 8000642:	2301      	movs	r3, #1
 8000644:	9300      	str	r3, [sp, #0]
 8000646:	2300      	movs	r3, #0
 8000648:	2280      	movs	r2, #128	; 0x80
 800064a:	490e      	ldr	r1, [pc, #56]	; (8000684 <main+0xd8>)
 800064c:	480e      	ldr	r0, [pc, #56]	; (8000688 <main+0xdc>)
 800064e:	f002 fd52 	bl	80030f6 <xTaskCreate>

  /* ********************* SCHEDULER ******************************* */
  vTaskStartScheduler();
 8000652:	f002 febb 	bl	80033cc <vTaskStartScheduler>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000656:	e7fe      	b.n	8000656 <main+0xaa>
 8000658:	2000404c 	.word	0x2000404c
 800065c:	08004ea4 	.word	0x08004ea4
 8000660:	20004060 	.word	0x20004060
 8000664:	08004ecc 	.word	0x08004ecc
 8000668:	20004054 	.word	0x20004054
 800066c:	08004ef0 	.word	0x08004ef0
 8000670:	08000805 	.word	0x08000805
 8000674:	2000405c 	.word	0x2000405c
 8000678:	08004ef8 	.word	0x08004ef8
 800067c:	080008c9 	.word	0x080008c9
 8000680:	20004048 	.word	0x20004048
 8000684:	08004f00 	.word	0x08004f00
 8000688:	08000991 	.word	0x08000991

0800068c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b094      	sub	sp, #80	; 0x50
 8000690:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000692:	f107 0320 	add.w	r3, r7, #32
 8000696:	2230      	movs	r2, #48	; 0x30
 8000698:	2100      	movs	r1, #0
 800069a:	4618      	mov	r0, r3
 800069c:	f003 ffce 	bl	800463c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a0:	f107 030c 	add.w	r3, r7, #12
 80006a4:	2200      	movs	r2, #0
 80006a6:	601a      	str	r2, [r3, #0]
 80006a8:	605a      	str	r2, [r3, #4]
 80006aa:	609a      	str	r2, [r3, #8]
 80006ac:	60da      	str	r2, [r3, #12]
 80006ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006b0:	2300      	movs	r3, #0
 80006b2:	60bb      	str	r3, [r7, #8]
 80006b4:	4b28      	ldr	r3, [pc, #160]	; (8000758 <SystemClock_Config+0xcc>)
 80006b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b8:	4a27      	ldr	r2, [pc, #156]	; (8000758 <SystemClock_Config+0xcc>)
 80006ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006be:	6413      	str	r3, [r2, #64]	; 0x40
 80006c0:	4b25      	ldr	r3, [pc, #148]	; (8000758 <SystemClock_Config+0xcc>)
 80006c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006c8:	60bb      	str	r3, [r7, #8]
 80006ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006cc:	2300      	movs	r3, #0
 80006ce:	607b      	str	r3, [r7, #4]
 80006d0:	4b22      	ldr	r3, [pc, #136]	; (800075c <SystemClock_Config+0xd0>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4a21      	ldr	r2, [pc, #132]	; (800075c <SystemClock_Config+0xd0>)
 80006d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006da:	6013      	str	r3, [r2, #0]
 80006dc:	4b1f      	ldr	r3, [pc, #124]	; (800075c <SystemClock_Config+0xd0>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006e4:	607b      	str	r3, [r7, #4]
 80006e6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006e8:	2301      	movs	r3, #1
 80006ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006f0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006f2:	2302      	movs	r3, #2
 80006f4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006f6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006fc:	2304      	movs	r3, #4
 80006fe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000700:	23a8      	movs	r3, #168	; 0xa8
 8000702:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000704:	2302      	movs	r3, #2
 8000706:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000708:	2304      	movs	r3, #4
 800070a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800070c:	f107 0320 	add.w	r3, r7, #32
 8000710:	4618      	mov	r0, r3
 8000712:	f000 fdc5 	bl	80012a0 <HAL_RCC_OscConfig>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800071c:	f000 f99a 	bl	8000a54 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000720:	230f      	movs	r3, #15
 8000722:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000724:	2302      	movs	r3, #2
 8000726:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000728:	2300      	movs	r3, #0
 800072a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800072c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000730:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000732:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000736:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000738:	f107 030c 	add.w	r3, r7, #12
 800073c:	2105      	movs	r1, #5
 800073e:	4618      	mov	r0, r3
 8000740:	f001 f826 	bl	8001790 <HAL_RCC_ClockConfig>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800074a:	f000 f983 	bl	8000a54 <Error_Handler>
  }
}
 800074e:	bf00      	nop
 8000750:	3750      	adds	r7, #80	; 0x50
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	40023800 	.word	0x40023800
 800075c:	40007000 	.word	0x40007000

08000760 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000764:	4b11      	ldr	r3, [pc, #68]	; (80007ac <MX_USART2_UART_Init+0x4c>)
 8000766:	4a12      	ldr	r2, [pc, #72]	; (80007b0 <MX_USART2_UART_Init+0x50>)
 8000768:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800076a:	4b10      	ldr	r3, [pc, #64]	; (80007ac <MX_USART2_UART_Init+0x4c>)
 800076c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000770:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000772:	4b0e      	ldr	r3, [pc, #56]	; (80007ac <MX_USART2_UART_Init+0x4c>)
 8000774:	2200      	movs	r2, #0
 8000776:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000778:	4b0c      	ldr	r3, [pc, #48]	; (80007ac <MX_USART2_UART_Init+0x4c>)
 800077a:	2200      	movs	r2, #0
 800077c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800077e:	4b0b      	ldr	r3, [pc, #44]	; (80007ac <MX_USART2_UART_Init+0x4c>)
 8000780:	2200      	movs	r2, #0
 8000782:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000784:	4b09      	ldr	r3, [pc, #36]	; (80007ac <MX_USART2_UART_Init+0x4c>)
 8000786:	220c      	movs	r2, #12
 8000788:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800078a:	4b08      	ldr	r3, [pc, #32]	; (80007ac <MX_USART2_UART_Init+0x4c>)
 800078c:	2200      	movs	r2, #0
 800078e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000790:	4b06      	ldr	r3, [pc, #24]	; (80007ac <MX_USART2_UART_Init+0x4c>)
 8000792:	2200      	movs	r2, #0
 8000794:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000796:	4805      	ldr	r0, [pc, #20]	; (80007ac <MX_USART2_UART_Init+0x4c>)
 8000798:	f001 fcd6 	bl	8002148 <HAL_UART_Init>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007a2:	f000 f957 	bl	8000a54 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007a6:	bf00      	nop
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	20004060 	.word	0x20004060
 80007b0:	40004400 	.word	0x40004400

080007b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	b083      	sub	sp, #12
 80007b8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007ba:	2300      	movs	r3, #0
 80007bc:	607b      	str	r3, [r7, #4]
 80007be:	4b10      	ldr	r3, [pc, #64]	; (8000800 <MX_GPIO_Init+0x4c>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	4a0f      	ldr	r2, [pc, #60]	; (8000800 <MX_GPIO_Init+0x4c>)
 80007c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007c8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ca:	4b0d      	ldr	r3, [pc, #52]	; (8000800 <MX_GPIO_Init+0x4c>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007d2:	607b      	str	r3, [r7, #4]
 80007d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d6:	2300      	movs	r3, #0
 80007d8:	603b      	str	r3, [r7, #0]
 80007da:	4b09      	ldr	r3, [pc, #36]	; (8000800 <MX_GPIO_Init+0x4c>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	4a08      	ldr	r2, [pc, #32]	; (8000800 <MX_GPIO_Init+0x4c>)
 80007e0:	f043 0301 	orr.w	r3, r3, #1
 80007e4:	6313      	str	r3, [r2, #48]	; 0x30
 80007e6:	4b06      	ldr	r3, [pc, #24]	; (8000800 <MX_GPIO_Init+0x4c>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	f003 0301 	and.w	r3, r3, #1
 80007ee:	603b      	str	r3, [r7, #0]
 80007f0:	683b      	ldr	r3, [r7, #0]

}
 80007f2:	bf00      	nop
 80007f4:	370c      	adds	r7, #12
 80007f6:	46bd      	mov	sp, r7
 80007f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fc:	4770      	bx	lr
 80007fe:	bf00      	nop
 8000800:	40023800 	.word	0x40023800

08000804 <TASK1_CONTROL>:

/* USER CODE BEGIN 4 */
void TASK1_CONTROL(void *params)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b086      	sub	sp, #24
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
	myStruct *ptrtostruct;
	uint32_t tickDelay = pdMS_TO_TICKS(2000);
 800080c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000810:	617b      	str	r3, [r7, #20]
	for(;;)
	{
		char *str = "Entered TASK1- about send data to queue\n\n";
 8000812:	4b27      	ldr	r3, [pc, #156]	; (80008b0 <TASK1_CONTROL+0xac>)
 8000814:	613b      	str	r3, [r7, #16]
		HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), HAL_MAX_DELAY);
 8000816:	6938      	ldr	r0, [r7, #16]
 8000818:	f7ff fcda 	bl	80001d0 <strlen>
 800081c:	4603      	mov	r3, r0
 800081e:	b29a      	uxth	r2, r3
 8000820:	f04f 33ff 	mov.w	r3, #4294967295
 8000824:	6939      	ldr	r1, [r7, #16]
 8000826:	4823      	ldr	r0, [pc, #140]	; (80008b4 <TASK1_CONTROL+0xb0>)
 8000828:	f001 fcdb 	bl	80021e2 <HAL_UART_Transmit>

		/* ******************* ALLOCATE MEMORY TO THE PTR *********************** */
		ptrtostruct = pvPortMalloc(sizeof(myStruct));
 800082c:	200c      	movs	r0, #12
 800082e:	f003 fce3 	bl	80041f8 <pvPortMalloc>
 8000832:	4603      	mov	r3, r0
 8000834:	60bb      	str	r3, [r7, #8]

		/* ******************* LOAD DATA TO STRUCTURE ************************** */
		ptrtostruct->counter = 1 + index1;
 8000836:	4b20      	ldr	r3, [pc, #128]	; (80008b8 <TASK1_CONTROL+0xb4>)
 8000838:	681a      	ldr	r2, [r3, #0]
 800083a:	68bb      	ldr	r3, [r7, #8]
 800083c:	3201      	adds	r2, #1
 800083e:	605a      	str	r2, [r3, #4]
		ptrtostruct->largeValue = 1000 + index1 *100;
 8000840:	4b1d      	ldr	r3, [pc, #116]	; (80008b8 <TASK1_CONTROL+0xb4>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	b29b      	uxth	r3, r3
 8000846:	461a      	mov	r2, r3
 8000848:	0092      	lsls	r2, r2, #2
 800084a:	4413      	add	r3, r2
 800084c:	461a      	mov	r2, r3
 800084e:	0091      	lsls	r1, r2, #2
 8000850:	461a      	mov	r2, r3
 8000852:	460b      	mov	r3, r1
 8000854:	4413      	add	r3, r2
 8000856:	009b      	lsls	r3, r3, #2
 8000858:	b29a      	uxth	r2, r3
 800085a:	68bb      	ldr	r3, [r7, #8]
 800085c:	f502 727a 	add.w	r2, r2, #1000	; 0x3e8
 8000860:	b292      	uxth	r2, r2
 8000862:	811a      	strh	r2, [r3, #8]
		ptrtostruct->str = "Hello From Task1\n";
 8000864:	68bb      	ldr	r3, [r7, #8]
 8000866:	4a15      	ldr	r2, [pc, #84]	; (80008bc <TASK1_CONTROL+0xb8>)
 8000868:	601a      	str	r2, [r3, #0]

		/* ******************* SEND DATA TO QUEUE ***************************** */

		if (xQueueSend(SimpleQueue,&ptrtostruct,portMAX_DELAY) == pdPASS)
 800086a:	4b15      	ldr	r3, [pc, #84]	; (80008c0 <TASK1_CONTROL+0xbc>)
 800086c:	6818      	ldr	r0, [r3, #0]
 800086e:	f107 0108 	add.w	r1, r7, #8
 8000872:	2300      	movs	r3, #0
 8000874:	f04f 32ff 	mov.w	r2, #4294967295
 8000878:	f002 f8f2 	bl	8002a60 <xQueueGenericSend>
 800087c:	4603      	mov	r3, r0
 800087e:	2b01      	cmp	r3, #1
 8000880:	d10c      	bne.n	800089c <TASK1_CONTROL+0x98>
		{
			char *str2 = "Successfully sent data to the queue\nLeaving Task1\n\n";
 8000882:	4b10      	ldr	r3, [pc, #64]	; (80008c4 <TASK1_CONTROL+0xc0>)
 8000884:	60fb      	str	r3, [r7, #12]
			HAL_UART_Transmit(&huart2, (uint8_t *)str2, strlen(str2), HAL_MAX_DELAY);
 8000886:	68f8      	ldr	r0, [r7, #12]
 8000888:	f7ff fca2 	bl	80001d0 <strlen>
 800088c:	4603      	mov	r3, r0
 800088e:	b29a      	uxth	r2, r3
 8000890:	f04f 33ff 	mov.w	r3, #4294967295
 8000894:	68f9      	ldr	r1, [r7, #12]
 8000896:	4807      	ldr	r0, [pc, #28]	; (80008b4 <TASK1_CONTROL+0xb0>)
 8000898:	f001 fca3 	bl	80021e2 <HAL_UART_Transmit>
		}
		index1 = index1 + 1;
 800089c:	4b06      	ldr	r3, [pc, #24]	; (80008b8 <TASK1_CONTROL+0xb4>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	3301      	adds	r3, #1
 80008a2:	4a05      	ldr	r2, [pc, #20]	; (80008b8 <TASK1_CONTROL+0xb4>)
 80008a4:	6013      	str	r3, [r2, #0]

		vTaskDelay(tickDelay);
 80008a6:	6978      	ldr	r0, [r7, #20]
 80008a8:	f002 fd5c 	bl	8003364 <vTaskDelay>
	{
 80008ac:	e7b1      	b.n	8000812 <TASK1_CONTROL+0xe>
 80008ae:	bf00      	nop
 80008b0:	08004f08 	.word	0x08004f08
 80008b4:	20004060 	.word	0x20004060
 80008b8:	20004050 	.word	0x20004050
 80008bc:	08004f34 	.word	0x08004f34
 80008c0:	2000404c 	.word	0x2000404c
 80008c4:	08004f48 	.word	0x08004f48

080008c8 <TASK2_CONTROL>:
	}
}

void TASK2_CONTROL(void *params)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b086      	sub	sp, #24
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
	myStruct *ptrtostruct;
	uint32_t tickDelay = pdMS_TO_TICKS(2000);
 80008d0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80008d4:	617b      	str	r3, [r7, #20]
	for(;;)
	{
		char *str = "Entered TASK2- about send data to queue\n\n";
 80008d6:	4b27      	ldr	r3, [pc, #156]	; (8000974 <TASK2_CONTROL+0xac>)
 80008d8:	613b      	str	r3, [r7, #16]
		HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), HAL_MAX_DELAY);
 80008da:	6938      	ldr	r0, [r7, #16]
 80008dc:	f7ff fc78 	bl	80001d0 <strlen>
 80008e0:	4603      	mov	r3, r0
 80008e2:	b29a      	uxth	r2, r3
 80008e4:	f04f 33ff 	mov.w	r3, #4294967295
 80008e8:	6939      	ldr	r1, [r7, #16]
 80008ea:	4823      	ldr	r0, [pc, #140]	; (8000978 <TASK2_CONTROL+0xb0>)
 80008ec:	f001 fc79 	bl	80021e2 <HAL_UART_Transmit>

		/* ******************* ALLOCATE MEMORY TO THE PTR *********************** */
		ptrtostruct = pvPortMalloc(sizeof(myStruct));
 80008f0:	200c      	movs	r0, #12
 80008f2:	f003 fc81 	bl	80041f8 <pvPortMalloc>
 80008f6:	4603      	mov	r3, r0
 80008f8:	60bb      	str	r3, [r7, #8]

		/* ******************* LOAD DATA TO STRUCTURE ************************** */
		ptrtostruct->counter = 1 + index2;
 80008fa:	4b20      	ldr	r3, [pc, #128]	; (800097c <TASK2_CONTROL+0xb4>)
 80008fc:	681a      	ldr	r2, [r3, #0]
 80008fe:	68bb      	ldr	r3, [r7, #8]
 8000900:	3201      	adds	r2, #1
 8000902:	605a      	str	r2, [r3, #4]
		ptrtostruct->largeValue = 2000 + index1 *200;
 8000904:	4b1e      	ldr	r3, [pc, #120]	; (8000980 <TASK2_CONTROL+0xb8>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	b29b      	uxth	r3, r3
 800090a:	461a      	mov	r2, r3
 800090c:	0092      	lsls	r2, r2, #2
 800090e:	4413      	add	r3, r2
 8000910:	461a      	mov	r2, r3
 8000912:	0091      	lsls	r1, r2, #2
 8000914:	461a      	mov	r2, r3
 8000916:	460b      	mov	r3, r1
 8000918:	4413      	add	r3, r2
 800091a:	00db      	lsls	r3, r3, #3
 800091c:	b29a      	uxth	r2, r3
 800091e:	68bb      	ldr	r3, [r7, #8]
 8000920:	f502 62fa 	add.w	r2, r2, #2000	; 0x7d0
 8000924:	b292      	uxth	r2, r2
 8000926:	811a      	strh	r2, [r3, #8]
		ptrtostruct->str = "Hello From Task2\n";
 8000928:	68bb      	ldr	r3, [r7, #8]
 800092a:	4a16      	ldr	r2, [pc, #88]	; (8000984 <TASK2_CONTROL+0xbc>)
 800092c:	601a      	str	r2, [r3, #0]

		/* ******************* SEND DATA TO QUEUE ***************************** */

		if (xQueueSend(SimpleQueue,&ptrtostruct,portMAX_DELAY) == pdPASS)
 800092e:	4b16      	ldr	r3, [pc, #88]	; (8000988 <TASK2_CONTROL+0xc0>)
 8000930:	6818      	ldr	r0, [r3, #0]
 8000932:	f107 0108 	add.w	r1, r7, #8
 8000936:	2300      	movs	r3, #0
 8000938:	f04f 32ff 	mov.w	r2, #4294967295
 800093c:	f002 f890 	bl	8002a60 <xQueueGenericSend>
 8000940:	4603      	mov	r3, r0
 8000942:	2b01      	cmp	r3, #1
 8000944:	d10c      	bne.n	8000960 <TASK2_CONTROL+0x98>
		{
			char *str2 = "Successfully sent data to the queue\nLeaving Task1\n\n";
 8000946:	4b11      	ldr	r3, [pc, #68]	; (800098c <TASK2_CONTROL+0xc4>)
 8000948:	60fb      	str	r3, [r7, #12]
			HAL_UART_Transmit(&huart2, (uint8_t *)str2, strlen(str2), HAL_MAX_DELAY);
 800094a:	68f8      	ldr	r0, [r7, #12]
 800094c:	f7ff fc40 	bl	80001d0 <strlen>
 8000950:	4603      	mov	r3, r0
 8000952:	b29a      	uxth	r2, r3
 8000954:	f04f 33ff 	mov.w	r3, #4294967295
 8000958:	68f9      	ldr	r1, [r7, #12]
 800095a:	4807      	ldr	r0, [pc, #28]	; (8000978 <TASK2_CONTROL+0xb0>)
 800095c:	f001 fc41 	bl	80021e2 <HAL_UART_Transmit>
		}
		index2 = index2 + 1;
 8000960:	4b06      	ldr	r3, [pc, #24]	; (800097c <TASK2_CONTROL+0xb4>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	3301      	adds	r3, #1
 8000966:	4a05      	ldr	r2, [pc, #20]	; (800097c <TASK2_CONTROL+0xb4>)
 8000968:	6013      	str	r3, [r2, #0]

		vTaskDelay(tickDelay);
 800096a:	6978      	ldr	r0, [r7, #20]
 800096c:	f002 fcfa 	bl	8003364 <vTaskDelay>
	{
 8000970:	e7b1      	b.n	80008d6 <TASK2_CONTROL+0xe>
 8000972:	bf00      	nop
 8000974:	08004f7c 	.word	0x08004f7c
 8000978:	20004060 	.word	0x20004060
 800097c:	20004058 	.word	0x20004058
 8000980:	20004050 	.word	0x20004050
 8000984:	08004fa8 	.word	0x08004fa8
 8000988:	2000404c 	.word	0x2000404c
 800098c:	08004f48 	.word	0x08004f48

08000990 <RECEIVER_TASK>:
	}
}
void RECEIVER_TASK(void *params)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b088      	sub	sp, #32
 8000994:	af02      	add	r7, sp, #8
 8000996:	6078      	str	r0, [r7, #4]
	myStruct *Rptrtostruct;
	uint32_t tickDelay = pdMS_TO_TICKS(3000);
 8000998:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800099c:	617b      	str	r3, [r7, #20]
	char *ptr;
	for(;;)
	{
		char *chr = "Entered RECEIVER TASK - about receive data from queue";
 800099e:	4b20      	ldr	r3, [pc, #128]	; (8000a20 <RECEIVER_TASK+0x90>)
 80009a0:	613b      	str	r3, [r7, #16]
		HAL_UART_Transmit(&huart2, (uint8_t *)chr, strlen(chr), HAL_MAX_DELAY);
 80009a2:	6938      	ldr	r0, [r7, #16]
 80009a4:	f7ff fc14 	bl	80001d0 <strlen>
 80009a8:	4603      	mov	r3, r0
 80009aa:	b29a      	uxth	r2, r3
 80009ac:	f04f 33ff 	mov.w	r3, #4294967295
 80009b0:	6939      	ldr	r1, [r7, #16]
 80009b2:	481c      	ldr	r0, [pc, #112]	; (8000a24 <RECEIVER_TASK+0x94>)
 80009b4:	f001 fc15 	bl	80021e2 <HAL_UART_Transmit>

		/* ********************* RECEIVE FROM QUEUE ************************ */
		if(xQueueReceive(SimpleQueue, &Rptrtostruct, portMAX_DELAY) == pdPASS)
 80009b8:	4b1b      	ldr	r3, [pc, #108]	; (8000a28 <RECEIVER_TASK+0x98>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	f107 0108 	add.w	r1, r7, #8
 80009c0:	f04f 32ff 	mov.w	r2, #4294967295
 80009c4:	4618      	mov	r0, r3
 80009c6:	f002 f949 	bl	8002c5c <xQueueReceive>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b01      	cmp	r3, #1
 80009ce:	d11e      	bne.n	8000a0e <RECEIVER_TASK+0x7e>
		{
			ptr = pvPortMalloc(100 * sizeof(char)); /* allocate memory for string */
 80009d0:	2064      	movs	r0, #100	; 0x64
 80009d2:	f003 fc11 	bl	80041f8 <pvPortMalloc>
 80009d6:	60f8      	str	r0, [r7, #12]

			sprintf(ptr,"Received from Queue\nCounter = %d\nLarge Value = %u\nString = %s\n\n\n",Rptrtostruct->counter,
 80009d8:	68bb      	ldr	r3, [r7, #8]
 80009da:	685a      	ldr	r2, [r3, #4]
					Rptrtostruct->largeValue,Rptrtostruct->str);
 80009dc:	68bb      	ldr	r3, [r7, #8]
 80009de:	891b      	ldrh	r3, [r3, #8]
			sprintf(ptr,"Received from Queue\nCounter = %d\nLarge Value = %u\nString = %s\n\n\n",Rptrtostruct->counter,
 80009e0:	4619      	mov	r1, r3
					Rptrtostruct->largeValue,Rptrtostruct->str);
 80009e2:	68bb      	ldr	r3, [r7, #8]
			sprintf(ptr,"Received from Queue\nCounter = %d\nLarge Value = %u\nString = %s\n\n\n",Rptrtostruct->counter,
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	9300      	str	r3, [sp, #0]
 80009e8:	460b      	mov	r3, r1
 80009ea:	4910      	ldr	r1, [pc, #64]	; (8000a2c <RECEIVER_TASK+0x9c>)
 80009ec:	68f8      	ldr	r0, [r7, #12]
 80009ee:	f003 fe2d 	bl	800464c <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t *)ptr, strlen(ptr), HAL_MAX_DELAY);
 80009f2:	68f8      	ldr	r0, [r7, #12]
 80009f4:	f7ff fbec 	bl	80001d0 <strlen>
 80009f8:	4603      	mov	r3, r0
 80009fa:	b29a      	uxth	r2, r3
 80009fc:	f04f 33ff 	mov.w	r3, #4294967295
 8000a00:	68f9      	ldr	r1, [r7, #12]
 8000a02:	4808      	ldr	r0, [pc, #32]	; (8000a24 <RECEIVER_TASK+0x94>)
 8000a04:	f001 fbed 	bl	80021e2 <HAL_UART_Transmit>

			vPortFree(ptr); /* String Memory */
 8000a08:	68f8      	ldr	r0, [r7, #12]
 8000a0a:	f003 fcc1 	bl	8004390 <vPortFree>
		}
		vPortFree(Rptrtostruct); /* free the structure memory */
 8000a0e:	68bb      	ldr	r3, [r7, #8]
 8000a10:	4618      	mov	r0, r3
 8000a12:	f003 fcbd 	bl	8004390 <vPortFree>
		vTaskDelay(tickDelay);
 8000a16:	6978      	ldr	r0, [r7, #20]
 8000a18:	f002 fca4 	bl	8003364 <vTaskDelay>
	{
 8000a1c:	e7bf      	b.n	800099e <RECEIVER_TASK+0xe>
 8000a1e:	bf00      	nop
 8000a20:	08004fbc 	.word	0x08004fbc
 8000a24:	20004060 	.word	0x20004060
 8000a28:	2000404c 	.word	0x2000404c
 8000a2c:	08004ff4 	.word	0x08004ff4

08000a30 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	4a04      	ldr	r2, [pc, #16]	; (8000a50 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a3e:	4293      	cmp	r3, r2
 8000a40:	d101      	bne.n	8000a46 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a42:	f000 f98f 	bl	8000d64 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a46:	bf00      	nop
 8000a48:	3708      	adds	r7, #8
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	40001000 	.word	0x40001000

08000a54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a58:	b672      	cpsid	i
}
 8000a5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a5c:	e7fe      	b.n	8000a5c <Error_Handler+0x8>
	...

08000a60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b082      	sub	sp, #8
 8000a64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a66:	2300      	movs	r3, #0
 8000a68:	607b      	str	r3, [r7, #4]
 8000a6a:	4b12      	ldr	r3, [pc, #72]	; (8000ab4 <HAL_MspInit+0x54>)
 8000a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a6e:	4a11      	ldr	r2, [pc, #68]	; (8000ab4 <HAL_MspInit+0x54>)
 8000a70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a74:	6453      	str	r3, [r2, #68]	; 0x44
 8000a76:	4b0f      	ldr	r3, [pc, #60]	; (8000ab4 <HAL_MspInit+0x54>)
 8000a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a7e:	607b      	str	r3, [r7, #4]
 8000a80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a82:	2300      	movs	r3, #0
 8000a84:	603b      	str	r3, [r7, #0]
 8000a86:	4b0b      	ldr	r3, [pc, #44]	; (8000ab4 <HAL_MspInit+0x54>)
 8000a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a8a:	4a0a      	ldr	r2, [pc, #40]	; (8000ab4 <HAL_MspInit+0x54>)
 8000a8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a90:	6413      	str	r3, [r2, #64]	; 0x40
 8000a92:	4b08      	ldr	r3, [pc, #32]	; (8000ab4 <HAL_MspInit+0x54>)
 8000a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a9a:	603b      	str	r3, [r7, #0]
 8000a9c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	210f      	movs	r1, #15
 8000aa2:	f06f 0001 	mvn.w	r0, #1
 8000aa6:	f000 fa35 	bl	8000f14 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aaa:	bf00      	nop
 8000aac:	3708      	adds	r7, #8
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	40023800 	.word	0x40023800

08000ab8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b08a      	sub	sp, #40	; 0x28
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac0:	f107 0314 	add.w	r3, r7, #20
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	601a      	str	r2, [r3, #0]
 8000ac8:	605a      	str	r2, [r3, #4]
 8000aca:	609a      	str	r2, [r3, #8]
 8000acc:	60da      	str	r2, [r3, #12]
 8000ace:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	4a19      	ldr	r2, [pc, #100]	; (8000b3c <HAL_UART_MspInit+0x84>)
 8000ad6:	4293      	cmp	r3, r2
 8000ad8:	d12b      	bne.n	8000b32 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ada:	2300      	movs	r3, #0
 8000adc:	613b      	str	r3, [r7, #16]
 8000ade:	4b18      	ldr	r3, [pc, #96]	; (8000b40 <HAL_UART_MspInit+0x88>)
 8000ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae2:	4a17      	ldr	r2, [pc, #92]	; (8000b40 <HAL_UART_MspInit+0x88>)
 8000ae4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ae8:	6413      	str	r3, [r2, #64]	; 0x40
 8000aea:	4b15      	ldr	r3, [pc, #84]	; (8000b40 <HAL_UART_MspInit+0x88>)
 8000aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000af2:	613b      	str	r3, [r7, #16]
 8000af4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000af6:	2300      	movs	r3, #0
 8000af8:	60fb      	str	r3, [r7, #12]
 8000afa:	4b11      	ldr	r3, [pc, #68]	; (8000b40 <HAL_UART_MspInit+0x88>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afe:	4a10      	ldr	r2, [pc, #64]	; (8000b40 <HAL_UART_MspInit+0x88>)
 8000b00:	f043 0301 	orr.w	r3, r3, #1
 8000b04:	6313      	str	r3, [r2, #48]	; 0x30
 8000b06:	4b0e      	ldr	r3, [pc, #56]	; (8000b40 <HAL_UART_MspInit+0x88>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0a:	f003 0301 	and.w	r3, r3, #1
 8000b0e:	60fb      	str	r3, [r7, #12]
 8000b10:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b12:	230c      	movs	r3, #12
 8000b14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b16:	2302      	movs	r3, #2
 8000b18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b1e:	2303      	movs	r3, #3
 8000b20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b22:	2307      	movs	r3, #7
 8000b24:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b26:	f107 0314 	add.w	r3, r7, #20
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	4805      	ldr	r0, [pc, #20]	; (8000b44 <HAL_UART_MspInit+0x8c>)
 8000b2e:	f000 fa1b 	bl	8000f68 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b32:	bf00      	nop
 8000b34:	3728      	adds	r7, #40	; 0x28
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	40004400 	.word	0x40004400
 8000b40:	40023800 	.word	0x40023800
 8000b44:	40020000 	.word	0x40020000

08000b48 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b08c      	sub	sp, #48	; 0x30
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000b50:	2300      	movs	r3, #0
 8000b52:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000b54:	2300      	movs	r3, #0
 8000b56:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000b58:	2200      	movs	r2, #0
 8000b5a:	6879      	ldr	r1, [r7, #4]
 8000b5c:	2036      	movs	r0, #54	; 0x36
 8000b5e:	f000 f9d9 	bl	8000f14 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000b62:	2036      	movs	r0, #54	; 0x36
 8000b64:	f000 f9f2 	bl	8000f4c <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000b68:	2300      	movs	r3, #0
 8000b6a:	60fb      	str	r3, [r7, #12]
 8000b6c:	4b1f      	ldr	r3, [pc, #124]	; (8000bec <HAL_InitTick+0xa4>)
 8000b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b70:	4a1e      	ldr	r2, [pc, #120]	; (8000bec <HAL_InitTick+0xa4>)
 8000b72:	f043 0310 	orr.w	r3, r3, #16
 8000b76:	6413      	str	r3, [r2, #64]	; 0x40
 8000b78:	4b1c      	ldr	r3, [pc, #112]	; (8000bec <HAL_InitTick+0xa4>)
 8000b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b7c:	f003 0310 	and.w	r3, r3, #16
 8000b80:	60fb      	str	r3, [r7, #12]
 8000b82:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b84:	f107 0210 	add.w	r2, r7, #16
 8000b88:	f107 0314 	add.w	r3, r7, #20
 8000b8c:	4611      	mov	r1, r2
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f000 fffa 	bl	8001b88 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000b94:	f000 ffd0 	bl	8001b38 <HAL_RCC_GetPCLK1Freq>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	005b      	lsls	r3, r3, #1
 8000b9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ba0:	4a13      	ldr	r2, [pc, #76]	; (8000bf0 <HAL_InitTick+0xa8>)
 8000ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8000ba6:	0c9b      	lsrs	r3, r3, #18
 8000ba8:	3b01      	subs	r3, #1
 8000baa:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000bac:	4b11      	ldr	r3, [pc, #68]	; (8000bf4 <HAL_InitTick+0xac>)
 8000bae:	4a12      	ldr	r2, [pc, #72]	; (8000bf8 <HAL_InitTick+0xb0>)
 8000bb0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000bb2:	4b10      	ldr	r3, [pc, #64]	; (8000bf4 <HAL_InitTick+0xac>)
 8000bb4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000bb8:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000bba:	4a0e      	ldr	r2, [pc, #56]	; (8000bf4 <HAL_InitTick+0xac>)
 8000bbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bbe:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000bc0:	4b0c      	ldr	r3, [pc, #48]	; (8000bf4 <HAL_InitTick+0xac>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bc6:	4b0b      	ldr	r3, [pc, #44]	; (8000bf4 <HAL_InitTick+0xac>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000bcc:	4809      	ldr	r0, [pc, #36]	; (8000bf4 <HAL_InitTick+0xac>)
 8000bce:	f001 f80d 	bl	8001bec <HAL_TIM_Base_Init>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d104      	bne.n	8000be2 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000bd8:	4806      	ldr	r0, [pc, #24]	; (8000bf4 <HAL_InitTick+0xac>)
 8000bda:	f001 f861 	bl	8001ca0 <HAL_TIM_Base_Start_IT>
 8000bde:	4603      	mov	r3, r0
 8000be0:	e000      	b.n	8000be4 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000be2:	2301      	movs	r3, #1
}
 8000be4:	4618      	mov	r0, r3
 8000be6:	3730      	adds	r7, #48	; 0x30
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	40023800 	.word	0x40023800
 8000bf0:	431bde83 	.word	0x431bde83
 8000bf4:	200040a4 	.word	0x200040a4
 8000bf8:	40001000 	.word	0x40001000

08000bfc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c00:	e7fe      	b.n	8000c00 <NMI_Handler+0x4>

08000c02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c02:	b480      	push	{r7}
 8000c04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c06:	e7fe      	b.n	8000c06 <HardFault_Handler+0x4>

08000c08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c0c:	e7fe      	b.n	8000c0c <MemManage_Handler+0x4>

08000c0e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c0e:	b480      	push	{r7}
 8000c10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c12:	e7fe      	b.n	8000c12 <BusFault_Handler+0x4>

08000c14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c18:	e7fe      	b.n	8000c18 <UsageFault_Handler+0x4>

08000c1a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c1a:	b480      	push	{r7}
 8000c1c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c1e:	bf00      	nop
 8000c20:	46bd      	mov	sp, r7
 8000c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c26:	4770      	bx	lr

08000c28 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000c2c:	4802      	ldr	r0, [pc, #8]	; (8000c38 <TIM6_DAC_IRQHandler+0x10>)
 8000c2e:	f001 f8a7 	bl	8001d80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000c32:	bf00      	nop
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	200040a4 	.word	0x200040a4

08000c3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b086      	sub	sp, #24
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c44:	4a14      	ldr	r2, [pc, #80]	; (8000c98 <_sbrk+0x5c>)
 8000c46:	4b15      	ldr	r3, [pc, #84]	; (8000c9c <_sbrk+0x60>)
 8000c48:	1ad3      	subs	r3, r2, r3
 8000c4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c4c:	697b      	ldr	r3, [r7, #20]
 8000c4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c50:	4b13      	ldr	r3, [pc, #76]	; (8000ca0 <_sbrk+0x64>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d102      	bne.n	8000c5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c58:	4b11      	ldr	r3, [pc, #68]	; (8000ca0 <_sbrk+0x64>)
 8000c5a:	4a12      	ldr	r2, [pc, #72]	; (8000ca4 <_sbrk+0x68>)
 8000c5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c5e:	4b10      	ldr	r3, [pc, #64]	; (8000ca0 <_sbrk+0x64>)
 8000c60:	681a      	ldr	r2, [r3, #0]
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	4413      	add	r3, r2
 8000c66:	693a      	ldr	r2, [r7, #16]
 8000c68:	429a      	cmp	r2, r3
 8000c6a:	d207      	bcs.n	8000c7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c6c:	f003 fcae 	bl	80045cc <__errno>
 8000c70:	4603      	mov	r3, r0
 8000c72:	220c      	movs	r2, #12
 8000c74:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c76:	f04f 33ff 	mov.w	r3, #4294967295
 8000c7a:	e009      	b.n	8000c90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c7c:	4b08      	ldr	r3, [pc, #32]	; (8000ca0 <_sbrk+0x64>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c82:	4b07      	ldr	r3, [pc, #28]	; (8000ca0 <_sbrk+0x64>)
 8000c84:	681a      	ldr	r2, [r3, #0]
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	4413      	add	r3, r2
 8000c8a:	4a05      	ldr	r2, [pc, #20]	; (8000ca0 <_sbrk+0x64>)
 8000c8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c8e:	68fb      	ldr	r3, [r7, #12]
}
 8000c90:	4618      	mov	r0, r3
 8000c92:	3718      	adds	r7, #24
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	20020000 	.word	0x20020000
 8000c9c:	00000400 	.word	0x00000400
 8000ca0:	200002e4 	.word	0x200002e4
 8000ca4:	20004100 	.word	0x20004100

08000ca8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cac:	4b06      	ldr	r3, [pc, #24]	; (8000cc8 <SystemInit+0x20>)
 8000cae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cb2:	4a05      	ldr	r2, [pc, #20]	; (8000cc8 <SystemInit+0x20>)
 8000cb4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cb8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cbc:	bf00      	nop
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop
 8000cc8:	e000ed00 	.word	0xe000ed00

08000ccc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000ccc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d04 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cd0:	480d      	ldr	r0, [pc, #52]	; (8000d08 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000cd2:	490e      	ldr	r1, [pc, #56]	; (8000d0c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000cd4:	4a0e      	ldr	r2, [pc, #56]	; (8000d10 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000cd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cd8:	e002      	b.n	8000ce0 <LoopCopyDataInit>

08000cda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cdc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cde:	3304      	adds	r3, #4

08000ce0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ce0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ce2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ce4:	d3f9      	bcc.n	8000cda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ce6:	4a0b      	ldr	r2, [pc, #44]	; (8000d14 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ce8:	4c0b      	ldr	r4, [pc, #44]	; (8000d18 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000cea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cec:	e001      	b.n	8000cf2 <LoopFillZerobss>

08000cee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cf0:	3204      	adds	r2, #4

08000cf2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cf2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cf4:	d3fb      	bcc.n	8000cee <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000cf6:	f7ff ffd7 	bl	8000ca8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cfa:	f003 fc6d 	bl	80045d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cfe:	f7ff fc55 	bl	80005ac <main>
  bx  lr    
 8000d02:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000d04:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d0c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000d10:	0800509c 	.word	0x0800509c
  ldr r2, =_sbss
 8000d14:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000d18:	20004100 	.word	0x20004100

08000d1c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d1c:	e7fe      	b.n	8000d1c <ADC_IRQHandler>
	...

08000d20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d24:	4b0e      	ldr	r3, [pc, #56]	; (8000d60 <HAL_Init+0x40>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	4a0d      	ldr	r2, [pc, #52]	; (8000d60 <HAL_Init+0x40>)
 8000d2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d2e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d30:	4b0b      	ldr	r3, [pc, #44]	; (8000d60 <HAL_Init+0x40>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4a0a      	ldr	r2, [pc, #40]	; (8000d60 <HAL_Init+0x40>)
 8000d36:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d3a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d3c:	4b08      	ldr	r3, [pc, #32]	; (8000d60 <HAL_Init+0x40>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a07      	ldr	r2, [pc, #28]	; (8000d60 <HAL_Init+0x40>)
 8000d42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d46:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d48:	2003      	movs	r0, #3
 8000d4a:	f000 f8d8 	bl	8000efe <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d4e:	2000      	movs	r0, #0
 8000d50:	f7ff fefa 	bl	8000b48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d54:	f7ff fe84 	bl	8000a60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d58:	2300      	movs	r3, #0
}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	40023c00 	.word	0x40023c00

08000d64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d68:	4b06      	ldr	r3, [pc, #24]	; (8000d84 <HAL_IncTick+0x20>)
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	461a      	mov	r2, r3
 8000d6e:	4b06      	ldr	r3, [pc, #24]	; (8000d88 <HAL_IncTick+0x24>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	4413      	add	r3, r2
 8000d74:	4a04      	ldr	r2, [pc, #16]	; (8000d88 <HAL_IncTick+0x24>)
 8000d76:	6013      	str	r3, [r2, #0]
}
 8000d78:	bf00      	nop
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop
 8000d84:	20000008 	.word	0x20000008
 8000d88:	200040ec 	.word	0x200040ec

08000d8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d90:	4b03      	ldr	r3, [pc, #12]	; (8000da0 <HAL_GetTick+0x14>)
 8000d92:	681b      	ldr	r3, [r3, #0]
}
 8000d94:	4618      	mov	r0, r3
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop
 8000da0:	200040ec 	.word	0x200040ec

08000da4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b085      	sub	sp, #20
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	f003 0307 	and.w	r3, r3, #7
 8000db2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000db4:	4b0c      	ldr	r3, [pc, #48]	; (8000de8 <__NVIC_SetPriorityGrouping+0x44>)
 8000db6:	68db      	ldr	r3, [r3, #12]
 8000db8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dba:	68ba      	ldr	r2, [r7, #8]
 8000dbc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000dc0:	4013      	ands	r3, r2
 8000dc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dc8:	68bb      	ldr	r3, [r7, #8]
 8000dca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dcc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000dd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dd6:	4a04      	ldr	r2, [pc, #16]	; (8000de8 <__NVIC_SetPriorityGrouping+0x44>)
 8000dd8:	68bb      	ldr	r3, [r7, #8]
 8000dda:	60d3      	str	r3, [r2, #12]
}
 8000ddc:	bf00      	nop
 8000dde:	3714      	adds	r7, #20
 8000de0:	46bd      	mov	sp, r7
 8000de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de6:	4770      	bx	lr
 8000de8:	e000ed00 	.word	0xe000ed00

08000dec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000df0:	4b04      	ldr	r3, [pc, #16]	; (8000e04 <__NVIC_GetPriorityGrouping+0x18>)
 8000df2:	68db      	ldr	r3, [r3, #12]
 8000df4:	0a1b      	lsrs	r3, r3, #8
 8000df6:	f003 0307 	and.w	r3, r3, #7
}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr
 8000e04:	e000ed00 	.word	0xe000ed00

08000e08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b083      	sub	sp, #12
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	4603      	mov	r3, r0
 8000e10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	db0b      	blt.n	8000e32 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e1a:	79fb      	ldrb	r3, [r7, #7]
 8000e1c:	f003 021f 	and.w	r2, r3, #31
 8000e20:	4907      	ldr	r1, [pc, #28]	; (8000e40 <__NVIC_EnableIRQ+0x38>)
 8000e22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e26:	095b      	lsrs	r3, r3, #5
 8000e28:	2001      	movs	r0, #1
 8000e2a:	fa00 f202 	lsl.w	r2, r0, r2
 8000e2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e32:	bf00      	nop
 8000e34:	370c      	adds	r7, #12
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop
 8000e40:	e000e100 	.word	0xe000e100

08000e44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b083      	sub	sp, #12
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	6039      	str	r1, [r7, #0]
 8000e4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	db0a      	blt.n	8000e6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	b2da      	uxtb	r2, r3
 8000e5c:	490c      	ldr	r1, [pc, #48]	; (8000e90 <__NVIC_SetPriority+0x4c>)
 8000e5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e62:	0112      	lsls	r2, r2, #4
 8000e64:	b2d2      	uxtb	r2, r2
 8000e66:	440b      	add	r3, r1
 8000e68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e6c:	e00a      	b.n	8000e84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	b2da      	uxtb	r2, r3
 8000e72:	4908      	ldr	r1, [pc, #32]	; (8000e94 <__NVIC_SetPriority+0x50>)
 8000e74:	79fb      	ldrb	r3, [r7, #7]
 8000e76:	f003 030f 	and.w	r3, r3, #15
 8000e7a:	3b04      	subs	r3, #4
 8000e7c:	0112      	lsls	r2, r2, #4
 8000e7e:	b2d2      	uxtb	r2, r2
 8000e80:	440b      	add	r3, r1
 8000e82:	761a      	strb	r2, [r3, #24]
}
 8000e84:	bf00      	nop
 8000e86:	370c      	adds	r7, #12
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8e:	4770      	bx	lr
 8000e90:	e000e100 	.word	0xe000e100
 8000e94:	e000ed00 	.word	0xe000ed00

08000e98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b089      	sub	sp, #36	; 0x24
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	60f8      	str	r0, [r7, #12]
 8000ea0:	60b9      	str	r1, [r7, #8]
 8000ea2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	f003 0307 	and.w	r3, r3, #7
 8000eaa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000eac:	69fb      	ldr	r3, [r7, #28]
 8000eae:	f1c3 0307 	rsb	r3, r3, #7
 8000eb2:	2b04      	cmp	r3, #4
 8000eb4:	bf28      	it	cs
 8000eb6:	2304      	movcs	r3, #4
 8000eb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eba:	69fb      	ldr	r3, [r7, #28]
 8000ebc:	3304      	adds	r3, #4
 8000ebe:	2b06      	cmp	r3, #6
 8000ec0:	d902      	bls.n	8000ec8 <NVIC_EncodePriority+0x30>
 8000ec2:	69fb      	ldr	r3, [r7, #28]
 8000ec4:	3b03      	subs	r3, #3
 8000ec6:	e000      	b.n	8000eca <NVIC_EncodePriority+0x32>
 8000ec8:	2300      	movs	r3, #0
 8000eca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ecc:	f04f 32ff 	mov.w	r2, #4294967295
 8000ed0:	69bb      	ldr	r3, [r7, #24]
 8000ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed6:	43da      	mvns	r2, r3
 8000ed8:	68bb      	ldr	r3, [r7, #8]
 8000eda:	401a      	ands	r2, r3
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ee0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	fa01 f303 	lsl.w	r3, r1, r3
 8000eea:	43d9      	mvns	r1, r3
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ef0:	4313      	orrs	r3, r2
         );
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	3724      	adds	r7, #36	; 0x24
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr

08000efe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000efe:	b580      	push	{r7, lr}
 8000f00:	b082      	sub	sp, #8
 8000f02:	af00      	add	r7, sp, #0
 8000f04:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f06:	6878      	ldr	r0, [r7, #4]
 8000f08:	f7ff ff4c 	bl	8000da4 <__NVIC_SetPriorityGrouping>
}
 8000f0c:	bf00      	nop
 8000f0e:	3708      	adds	r7, #8
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}

08000f14 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b086      	sub	sp, #24
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	60b9      	str	r1, [r7, #8]
 8000f1e:	607a      	str	r2, [r7, #4]
 8000f20:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f22:	2300      	movs	r3, #0
 8000f24:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f26:	f7ff ff61 	bl	8000dec <__NVIC_GetPriorityGrouping>
 8000f2a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f2c:	687a      	ldr	r2, [r7, #4]
 8000f2e:	68b9      	ldr	r1, [r7, #8]
 8000f30:	6978      	ldr	r0, [r7, #20]
 8000f32:	f7ff ffb1 	bl	8000e98 <NVIC_EncodePriority>
 8000f36:	4602      	mov	r2, r0
 8000f38:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f3c:	4611      	mov	r1, r2
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f7ff ff80 	bl	8000e44 <__NVIC_SetPriority>
}
 8000f44:	bf00      	nop
 8000f46:	3718      	adds	r7, #24
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}

08000f4c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	4603      	mov	r3, r0
 8000f54:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f7ff ff54 	bl	8000e08 <__NVIC_EnableIRQ>
}
 8000f60:	bf00      	nop
 8000f62:	3708      	adds	r7, #8
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}

08000f68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b089      	sub	sp, #36	; 0x24
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
 8000f70:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f72:	2300      	movs	r3, #0
 8000f74:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f76:	2300      	movs	r3, #0
 8000f78:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f7e:	2300      	movs	r3, #0
 8000f80:	61fb      	str	r3, [r7, #28]
 8000f82:	e16b      	b.n	800125c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f84:	2201      	movs	r2, #1
 8000f86:	69fb      	ldr	r3, [r7, #28]
 8000f88:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	697a      	ldr	r2, [r7, #20]
 8000f94:	4013      	ands	r3, r2
 8000f96:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f98:	693a      	ldr	r2, [r7, #16]
 8000f9a:	697b      	ldr	r3, [r7, #20]
 8000f9c:	429a      	cmp	r2, r3
 8000f9e:	f040 815a 	bne.w	8001256 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	685b      	ldr	r3, [r3, #4]
 8000fa6:	f003 0303 	and.w	r3, r3, #3
 8000faa:	2b01      	cmp	r3, #1
 8000fac:	d005      	beq.n	8000fba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	685b      	ldr	r3, [r3, #4]
 8000fb2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fb6:	2b02      	cmp	r3, #2
 8000fb8:	d130      	bne.n	800101c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	689b      	ldr	r3, [r3, #8]
 8000fbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000fc0:	69fb      	ldr	r3, [r7, #28]
 8000fc2:	005b      	lsls	r3, r3, #1
 8000fc4:	2203      	movs	r2, #3
 8000fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fca:	43db      	mvns	r3, r3
 8000fcc:	69ba      	ldr	r2, [r7, #24]
 8000fce:	4013      	ands	r3, r2
 8000fd0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	68da      	ldr	r2, [r3, #12]
 8000fd6:	69fb      	ldr	r3, [r7, #28]
 8000fd8:	005b      	lsls	r3, r3, #1
 8000fda:	fa02 f303 	lsl.w	r3, r2, r3
 8000fde:	69ba      	ldr	r2, [r7, #24]
 8000fe0:	4313      	orrs	r3, r2
 8000fe2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	69ba      	ldr	r2, [r7, #24]
 8000fe8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	69fb      	ldr	r3, [r7, #28]
 8000ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff8:	43db      	mvns	r3, r3
 8000ffa:	69ba      	ldr	r2, [r7, #24]
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	091b      	lsrs	r3, r3, #4
 8001006:	f003 0201 	and.w	r2, r3, #1
 800100a:	69fb      	ldr	r3, [r7, #28]
 800100c:	fa02 f303 	lsl.w	r3, r2, r3
 8001010:	69ba      	ldr	r2, [r7, #24]
 8001012:	4313      	orrs	r3, r2
 8001014:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	69ba      	ldr	r2, [r7, #24]
 800101a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	f003 0303 	and.w	r3, r3, #3
 8001024:	2b03      	cmp	r3, #3
 8001026:	d017      	beq.n	8001058 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	68db      	ldr	r3, [r3, #12]
 800102c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800102e:	69fb      	ldr	r3, [r7, #28]
 8001030:	005b      	lsls	r3, r3, #1
 8001032:	2203      	movs	r2, #3
 8001034:	fa02 f303 	lsl.w	r3, r2, r3
 8001038:	43db      	mvns	r3, r3
 800103a:	69ba      	ldr	r2, [r7, #24]
 800103c:	4013      	ands	r3, r2
 800103e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	689a      	ldr	r2, [r3, #8]
 8001044:	69fb      	ldr	r3, [r7, #28]
 8001046:	005b      	lsls	r3, r3, #1
 8001048:	fa02 f303 	lsl.w	r3, r2, r3
 800104c:	69ba      	ldr	r2, [r7, #24]
 800104e:	4313      	orrs	r3, r2
 8001050:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	69ba      	ldr	r2, [r7, #24]
 8001056:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	f003 0303 	and.w	r3, r3, #3
 8001060:	2b02      	cmp	r3, #2
 8001062:	d123      	bne.n	80010ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001064:	69fb      	ldr	r3, [r7, #28]
 8001066:	08da      	lsrs	r2, r3, #3
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	3208      	adds	r2, #8
 800106c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001070:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001072:	69fb      	ldr	r3, [r7, #28]
 8001074:	f003 0307 	and.w	r3, r3, #7
 8001078:	009b      	lsls	r3, r3, #2
 800107a:	220f      	movs	r2, #15
 800107c:	fa02 f303 	lsl.w	r3, r2, r3
 8001080:	43db      	mvns	r3, r3
 8001082:	69ba      	ldr	r2, [r7, #24]
 8001084:	4013      	ands	r3, r2
 8001086:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	691a      	ldr	r2, [r3, #16]
 800108c:	69fb      	ldr	r3, [r7, #28]
 800108e:	f003 0307 	and.w	r3, r3, #7
 8001092:	009b      	lsls	r3, r3, #2
 8001094:	fa02 f303 	lsl.w	r3, r2, r3
 8001098:	69ba      	ldr	r2, [r7, #24]
 800109a:	4313      	orrs	r3, r2
 800109c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	08da      	lsrs	r2, r3, #3
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	3208      	adds	r2, #8
 80010a6:	69b9      	ldr	r1, [r7, #24]
 80010a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010b2:	69fb      	ldr	r3, [r7, #28]
 80010b4:	005b      	lsls	r3, r3, #1
 80010b6:	2203      	movs	r2, #3
 80010b8:	fa02 f303 	lsl.w	r3, r2, r3
 80010bc:	43db      	mvns	r3, r3
 80010be:	69ba      	ldr	r2, [r7, #24]
 80010c0:	4013      	ands	r3, r2
 80010c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	f003 0203 	and.w	r2, r3, #3
 80010cc:	69fb      	ldr	r3, [r7, #28]
 80010ce:	005b      	lsls	r3, r3, #1
 80010d0:	fa02 f303 	lsl.w	r3, r2, r3
 80010d4:	69ba      	ldr	r2, [r7, #24]
 80010d6:	4313      	orrs	r3, r2
 80010d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	69ba      	ldr	r2, [r7, #24]
 80010de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	f000 80b4 	beq.w	8001256 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010ee:	2300      	movs	r3, #0
 80010f0:	60fb      	str	r3, [r7, #12]
 80010f2:	4b60      	ldr	r3, [pc, #384]	; (8001274 <HAL_GPIO_Init+0x30c>)
 80010f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010f6:	4a5f      	ldr	r2, [pc, #380]	; (8001274 <HAL_GPIO_Init+0x30c>)
 80010f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010fc:	6453      	str	r3, [r2, #68]	; 0x44
 80010fe:	4b5d      	ldr	r3, [pc, #372]	; (8001274 <HAL_GPIO_Init+0x30c>)
 8001100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001102:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001106:	60fb      	str	r3, [r7, #12]
 8001108:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800110a:	4a5b      	ldr	r2, [pc, #364]	; (8001278 <HAL_GPIO_Init+0x310>)
 800110c:	69fb      	ldr	r3, [r7, #28]
 800110e:	089b      	lsrs	r3, r3, #2
 8001110:	3302      	adds	r3, #2
 8001112:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001116:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001118:	69fb      	ldr	r3, [r7, #28]
 800111a:	f003 0303 	and.w	r3, r3, #3
 800111e:	009b      	lsls	r3, r3, #2
 8001120:	220f      	movs	r2, #15
 8001122:	fa02 f303 	lsl.w	r3, r2, r3
 8001126:	43db      	mvns	r3, r3
 8001128:	69ba      	ldr	r2, [r7, #24]
 800112a:	4013      	ands	r3, r2
 800112c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	4a52      	ldr	r2, [pc, #328]	; (800127c <HAL_GPIO_Init+0x314>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d02b      	beq.n	800118e <HAL_GPIO_Init+0x226>
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	4a51      	ldr	r2, [pc, #324]	; (8001280 <HAL_GPIO_Init+0x318>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d025      	beq.n	800118a <HAL_GPIO_Init+0x222>
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	4a50      	ldr	r2, [pc, #320]	; (8001284 <HAL_GPIO_Init+0x31c>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d01f      	beq.n	8001186 <HAL_GPIO_Init+0x21e>
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	4a4f      	ldr	r2, [pc, #316]	; (8001288 <HAL_GPIO_Init+0x320>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d019      	beq.n	8001182 <HAL_GPIO_Init+0x21a>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	4a4e      	ldr	r2, [pc, #312]	; (800128c <HAL_GPIO_Init+0x324>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d013      	beq.n	800117e <HAL_GPIO_Init+0x216>
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	4a4d      	ldr	r2, [pc, #308]	; (8001290 <HAL_GPIO_Init+0x328>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d00d      	beq.n	800117a <HAL_GPIO_Init+0x212>
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	4a4c      	ldr	r2, [pc, #304]	; (8001294 <HAL_GPIO_Init+0x32c>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d007      	beq.n	8001176 <HAL_GPIO_Init+0x20e>
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	4a4b      	ldr	r2, [pc, #300]	; (8001298 <HAL_GPIO_Init+0x330>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d101      	bne.n	8001172 <HAL_GPIO_Init+0x20a>
 800116e:	2307      	movs	r3, #7
 8001170:	e00e      	b.n	8001190 <HAL_GPIO_Init+0x228>
 8001172:	2308      	movs	r3, #8
 8001174:	e00c      	b.n	8001190 <HAL_GPIO_Init+0x228>
 8001176:	2306      	movs	r3, #6
 8001178:	e00a      	b.n	8001190 <HAL_GPIO_Init+0x228>
 800117a:	2305      	movs	r3, #5
 800117c:	e008      	b.n	8001190 <HAL_GPIO_Init+0x228>
 800117e:	2304      	movs	r3, #4
 8001180:	e006      	b.n	8001190 <HAL_GPIO_Init+0x228>
 8001182:	2303      	movs	r3, #3
 8001184:	e004      	b.n	8001190 <HAL_GPIO_Init+0x228>
 8001186:	2302      	movs	r3, #2
 8001188:	e002      	b.n	8001190 <HAL_GPIO_Init+0x228>
 800118a:	2301      	movs	r3, #1
 800118c:	e000      	b.n	8001190 <HAL_GPIO_Init+0x228>
 800118e:	2300      	movs	r3, #0
 8001190:	69fa      	ldr	r2, [r7, #28]
 8001192:	f002 0203 	and.w	r2, r2, #3
 8001196:	0092      	lsls	r2, r2, #2
 8001198:	4093      	lsls	r3, r2
 800119a:	69ba      	ldr	r2, [r7, #24]
 800119c:	4313      	orrs	r3, r2
 800119e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011a0:	4935      	ldr	r1, [pc, #212]	; (8001278 <HAL_GPIO_Init+0x310>)
 80011a2:	69fb      	ldr	r3, [r7, #28]
 80011a4:	089b      	lsrs	r3, r3, #2
 80011a6:	3302      	adds	r3, #2
 80011a8:	69ba      	ldr	r2, [r7, #24]
 80011aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011ae:	4b3b      	ldr	r3, [pc, #236]	; (800129c <HAL_GPIO_Init+0x334>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011b4:	693b      	ldr	r3, [r7, #16]
 80011b6:	43db      	mvns	r3, r3
 80011b8:	69ba      	ldr	r2, [r7, #24]
 80011ba:	4013      	ands	r3, r2
 80011bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d003      	beq.n	80011d2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80011ca:	69ba      	ldr	r2, [r7, #24]
 80011cc:	693b      	ldr	r3, [r7, #16]
 80011ce:	4313      	orrs	r3, r2
 80011d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011d2:	4a32      	ldr	r2, [pc, #200]	; (800129c <HAL_GPIO_Init+0x334>)
 80011d4:	69bb      	ldr	r3, [r7, #24]
 80011d6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80011d8:	4b30      	ldr	r3, [pc, #192]	; (800129c <HAL_GPIO_Init+0x334>)
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011de:	693b      	ldr	r3, [r7, #16]
 80011e0:	43db      	mvns	r3, r3
 80011e2:	69ba      	ldr	r2, [r7, #24]
 80011e4:	4013      	ands	r3, r2
 80011e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d003      	beq.n	80011fc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80011f4:	69ba      	ldr	r2, [r7, #24]
 80011f6:	693b      	ldr	r3, [r7, #16]
 80011f8:	4313      	orrs	r3, r2
 80011fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011fc:	4a27      	ldr	r2, [pc, #156]	; (800129c <HAL_GPIO_Init+0x334>)
 80011fe:	69bb      	ldr	r3, [r7, #24]
 8001200:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001202:	4b26      	ldr	r3, [pc, #152]	; (800129c <HAL_GPIO_Init+0x334>)
 8001204:	689b      	ldr	r3, [r3, #8]
 8001206:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001208:	693b      	ldr	r3, [r7, #16]
 800120a:	43db      	mvns	r3, r3
 800120c:	69ba      	ldr	r2, [r7, #24]
 800120e:	4013      	ands	r3, r2
 8001210:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800121a:	2b00      	cmp	r3, #0
 800121c:	d003      	beq.n	8001226 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800121e:	69ba      	ldr	r2, [r7, #24]
 8001220:	693b      	ldr	r3, [r7, #16]
 8001222:	4313      	orrs	r3, r2
 8001224:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001226:	4a1d      	ldr	r2, [pc, #116]	; (800129c <HAL_GPIO_Init+0x334>)
 8001228:	69bb      	ldr	r3, [r7, #24]
 800122a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800122c:	4b1b      	ldr	r3, [pc, #108]	; (800129c <HAL_GPIO_Init+0x334>)
 800122e:	68db      	ldr	r3, [r3, #12]
 8001230:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001232:	693b      	ldr	r3, [r7, #16]
 8001234:	43db      	mvns	r3, r3
 8001236:	69ba      	ldr	r2, [r7, #24]
 8001238:	4013      	ands	r3, r2
 800123a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001244:	2b00      	cmp	r3, #0
 8001246:	d003      	beq.n	8001250 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001248:	69ba      	ldr	r2, [r7, #24]
 800124a:	693b      	ldr	r3, [r7, #16]
 800124c:	4313      	orrs	r3, r2
 800124e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001250:	4a12      	ldr	r2, [pc, #72]	; (800129c <HAL_GPIO_Init+0x334>)
 8001252:	69bb      	ldr	r3, [r7, #24]
 8001254:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001256:	69fb      	ldr	r3, [r7, #28]
 8001258:	3301      	adds	r3, #1
 800125a:	61fb      	str	r3, [r7, #28]
 800125c:	69fb      	ldr	r3, [r7, #28]
 800125e:	2b0f      	cmp	r3, #15
 8001260:	f67f ae90 	bls.w	8000f84 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001264:	bf00      	nop
 8001266:	bf00      	nop
 8001268:	3724      	adds	r7, #36	; 0x24
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop
 8001274:	40023800 	.word	0x40023800
 8001278:	40013800 	.word	0x40013800
 800127c:	40020000 	.word	0x40020000
 8001280:	40020400 	.word	0x40020400
 8001284:	40020800 	.word	0x40020800
 8001288:	40020c00 	.word	0x40020c00
 800128c:	40021000 	.word	0x40021000
 8001290:	40021400 	.word	0x40021400
 8001294:	40021800 	.word	0x40021800
 8001298:	40021c00 	.word	0x40021c00
 800129c:	40013c00 	.word	0x40013c00

080012a0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b086      	sub	sp, #24
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d101      	bne.n	80012b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012ae:	2301      	movs	r3, #1
 80012b0:	e264      	b.n	800177c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f003 0301 	and.w	r3, r3, #1
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d075      	beq.n	80013aa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012be:	4ba3      	ldr	r3, [pc, #652]	; (800154c <HAL_RCC_OscConfig+0x2ac>)
 80012c0:	689b      	ldr	r3, [r3, #8]
 80012c2:	f003 030c 	and.w	r3, r3, #12
 80012c6:	2b04      	cmp	r3, #4
 80012c8:	d00c      	beq.n	80012e4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012ca:	4ba0      	ldr	r3, [pc, #640]	; (800154c <HAL_RCC_OscConfig+0x2ac>)
 80012cc:	689b      	ldr	r3, [r3, #8]
 80012ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012d2:	2b08      	cmp	r3, #8
 80012d4:	d112      	bne.n	80012fc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012d6:	4b9d      	ldr	r3, [pc, #628]	; (800154c <HAL_RCC_OscConfig+0x2ac>)
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80012e2:	d10b      	bne.n	80012fc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012e4:	4b99      	ldr	r3, [pc, #612]	; (800154c <HAL_RCC_OscConfig+0x2ac>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d05b      	beq.n	80013a8 <HAL_RCC_OscConfig+0x108>
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d157      	bne.n	80013a8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80012f8:	2301      	movs	r3, #1
 80012fa:	e23f      	b.n	800177c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001304:	d106      	bne.n	8001314 <HAL_RCC_OscConfig+0x74>
 8001306:	4b91      	ldr	r3, [pc, #580]	; (800154c <HAL_RCC_OscConfig+0x2ac>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4a90      	ldr	r2, [pc, #576]	; (800154c <HAL_RCC_OscConfig+0x2ac>)
 800130c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001310:	6013      	str	r3, [r2, #0]
 8001312:	e01d      	b.n	8001350 <HAL_RCC_OscConfig+0xb0>
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800131c:	d10c      	bne.n	8001338 <HAL_RCC_OscConfig+0x98>
 800131e:	4b8b      	ldr	r3, [pc, #556]	; (800154c <HAL_RCC_OscConfig+0x2ac>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4a8a      	ldr	r2, [pc, #552]	; (800154c <HAL_RCC_OscConfig+0x2ac>)
 8001324:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001328:	6013      	str	r3, [r2, #0]
 800132a:	4b88      	ldr	r3, [pc, #544]	; (800154c <HAL_RCC_OscConfig+0x2ac>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4a87      	ldr	r2, [pc, #540]	; (800154c <HAL_RCC_OscConfig+0x2ac>)
 8001330:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001334:	6013      	str	r3, [r2, #0]
 8001336:	e00b      	b.n	8001350 <HAL_RCC_OscConfig+0xb0>
 8001338:	4b84      	ldr	r3, [pc, #528]	; (800154c <HAL_RCC_OscConfig+0x2ac>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a83      	ldr	r2, [pc, #524]	; (800154c <HAL_RCC_OscConfig+0x2ac>)
 800133e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001342:	6013      	str	r3, [r2, #0]
 8001344:	4b81      	ldr	r3, [pc, #516]	; (800154c <HAL_RCC_OscConfig+0x2ac>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4a80      	ldr	r2, [pc, #512]	; (800154c <HAL_RCC_OscConfig+0x2ac>)
 800134a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800134e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d013      	beq.n	8001380 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001358:	f7ff fd18 	bl	8000d8c <HAL_GetTick>
 800135c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800135e:	e008      	b.n	8001372 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001360:	f7ff fd14 	bl	8000d8c <HAL_GetTick>
 8001364:	4602      	mov	r2, r0
 8001366:	693b      	ldr	r3, [r7, #16]
 8001368:	1ad3      	subs	r3, r2, r3
 800136a:	2b64      	cmp	r3, #100	; 0x64
 800136c:	d901      	bls.n	8001372 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800136e:	2303      	movs	r3, #3
 8001370:	e204      	b.n	800177c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001372:	4b76      	ldr	r3, [pc, #472]	; (800154c <HAL_RCC_OscConfig+0x2ac>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800137a:	2b00      	cmp	r3, #0
 800137c:	d0f0      	beq.n	8001360 <HAL_RCC_OscConfig+0xc0>
 800137e:	e014      	b.n	80013aa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001380:	f7ff fd04 	bl	8000d8c <HAL_GetTick>
 8001384:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001386:	e008      	b.n	800139a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001388:	f7ff fd00 	bl	8000d8c <HAL_GetTick>
 800138c:	4602      	mov	r2, r0
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	1ad3      	subs	r3, r2, r3
 8001392:	2b64      	cmp	r3, #100	; 0x64
 8001394:	d901      	bls.n	800139a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001396:	2303      	movs	r3, #3
 8001398:	e1f0      	b.n	800177c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800139a:	4b6c      	ldr	r3, [pc, #432]	; (800154c <HAL_RCC_OscConfig+0x2ac>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d1f0      	bne.n	8001388 <HAL_RCC_OscConfig+0xe8>
 80013a6:	e000      	b.n	80013aa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f003 0302 	and.w	r3, r3, #2
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d063      	beq.n	800147e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013b6:	4b65      	ldr	r3, [pc, #404]	; (800154c <HAL_RCC_OscConfig+0x2ac>)
 80013b8:	689b      	ldr	r3, [r3, #8]
 80013ba:	f003 030c 	and.w	r3, r3, #12
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d00b      	beq.n	80013da <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013c2:	4b62      	ldr	r3, [pc, #392]	; (800154c <HAL_RCC_OscConfig+0x2ac>)
 80013c4:	689b      	ldr	r3, [r3, #8]
 80013c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013ca:	2b08      	cmp	r3, #8
 80013cc:	d11c      	bne.n	8001408 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013ce:	4b5f      	ldr	r3, [pc, #380]	; (800154c <HAL_RCC_OscConfig+0x2ac>)
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d116      	bne.n	8001408 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013da:	4b5c      	ldr	r3, [pc, #368]	; (800154c <HAL_RCC_OscConfig+0x2ac>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f003 0302 	and.w	r3, r3, #2
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d005      	beq.n	80013f2 <HAL_RCC_OscConfig+0x152>
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	68db      	ldr	r3, [r3, #12]
 80013ea:	2b01      	cmp	r3, #1
 80013ec:	d001      	beq.n	80013f2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80013ee:	2301      	movs	r3, #1
 80013f0:	e1c4      	b.n	800177c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013f2:	4b56      	ldr	r3, [pc, #344]	; (800154c <HAL_RCC_OscConfig+0x2ac>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	691b      	ldr	r3, [r3, #16]
 80013fe:	00db      	lsls	r3, r3, #3
 8001400:	4952      	ldr	r1, [pc, #328]	; (800154c <HAL_RCC_OscConfig+0x2ac>)
 8001402:	4313      	orrs	r3, r2
 8001404:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001406:	e03a      	b.n	800147e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	68db      	ldr	r3, [r3, #12]
 800140c:	2b00      	cmp	r3, #0
 800140e:	d020      	beq.n	8001452 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001410:	4b4f      	ldr	r3, [pc, #316]	; (8001550 <HAL_RCC_OscConfig+0x2b0>)
 8001412:	2201      	movs	r2, #1
 8001414:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001416:	f7ff fcb9 	bl	8000d8c <HAL_GetTick>
 800141a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800141c:	e008      	b.n	8001430 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800141e:	f7ff fcb5 	bl	8000d8c <HAL_GetTick>
 8001422:	4602      	mov	r2, r0
 8001424:	693b      	ldr	r3, [r7, #16]
 8001426:	1ad3      	subs	r3, r2, r3
 8001428:	2b02      	cmp	r3, #2
 800142a:	d901      	bls.n	8001430 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800142c:	2303      	movs	r3, #3
 800142e:	e1a5      	b.n	800177c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001430:	4b46      	ldr	r3, [pc, #280]	; (800154c <HAL_RCC_OscConfig+0x2ac>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f003 0302 	and.w	r3, r3, #2
 8001438:	2b00      	cmp	r3, #0
 800143a:	d0f0      	beq.n	800141e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800143c:	4b43      	ldr	r3, [pc, #268]	; (800154c <HAL_RCC_OscConfig+0x2ac>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	691b      	ldr	r3, [r3, #16]
 8001448:	00db      	lsls	r3, r3, #3
 800144a:	4940      	ldr	r1, [pc, #256]	; (800154c <HAL_RCC_OscConfig+0x2ac>)
 800144c:	4313      	orrs	r3, r2
 800144e:	600b      	str	r3, [r1, #0]
 8001450:	e015      	b.n	800147e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001452:	4b3f      	ldr	r3, [pc, #252]	; (8001550 <HAL_RCC_OscConfig+0x2b0>)
 8001454:	2200      	movs	r2, #0
 8001456:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001458:	f7ff fc98 	bl	8000d8c <HAL_GetTick>
 800145c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800145e:	e008      	b.n	8001472 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001460:	f7ff fc94 	bl	8000d8c <HAL_GetTick>
 8001464:	4602      	mov	r2, r0
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	1ad3      	subs	r3, r2, r3
 800146a:	2b02      	cmp	r3, #2
 800146c:	d901      	bls.n	8001472 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800146e:	2303      	movs	r3, #3
 8001470:	e184      	b.n	800177c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001472:	4b36      	ldr	r3, [pc, #216]	; (800154c <HAL_RCC_OscConfig+0x2ac>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f003 0302 	and.w	r3, r3, #2
 800147a:	2b00      	cmp	r3, #0
 800147c:	d1f0      	bne.n	8001460 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f003 0308 	and.w	r3, r3, #8
 8001486:	2b00      	cmp	r3, #0
 8001488:	d030      	beq.n	80014ec <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	695b      	ldr	r3, [r3, #20]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d016      	beq.n	80014c0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001492:	4b30      	ldr	r3, [pc, #192]	; (8001554 <HAL_RCC_OscConfig+0x2b4>)
 8001494:	2201      	movs	r2, #1
 8001496:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001498:	f7ff fc78 	bl	8000d8c <HAL_GetTick>
 800149c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800149e:	e008      	b.n	80014b2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014a0:	f7ff fc74 	bl	8000d8c <HAL_GetTick>
 80014a4:	4602      	mov	r2, r0
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	1ad3      	subs	r3, r2, r3
 80014aa:	2b02      	cmp	r3, #2
 80014ac:	d901      	bls.n	80014b2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80014ae:	2303      	movs	r3, #3
 80014b0:	e164      	b.n	800177c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014b2:	4b26      	ldr	r3, [pc, #152]	; (800154c <HAL_RCC_OscConfig+0x2ac>)
 80014b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014b6:	f003 0302 	and.w	r3, r3, #2
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d0f0      	beq.n	80014a0 <HAL_RCC_OscConfig+0x200>
 80014be:	e015      	b.n	80014ec <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014c0:	4b24      	ldr	r3, [pc, #144]	; (8001554 <HAL_RCC_OscConfig+0x2b4>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014c6:	f7ff fc61 	bl	8000d8c <HAL_GetTick>
 80014ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014cc:	e008      	b.n	80014e0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014ce:	f7ff fc5d 	bl	8000d8c <HAL_GetTick>
 80014d2:	4602      	mov	r2, r0
 80014d4:	693b      	ldr	r3, [r7, #16]
 80014d6:	1ad3      	subs	r3, r2, r3
 80014d8:	2b02      	cmp	r3, #2
 80014da:	d901      	bls.n	80014e0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80014dc:	2303      	movs	r3, #3
 80014de:	e14d      	b.n	800177c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014e0:	4b1a      	ldr	r3, [pc, #104]	; (800154c <HAL_RCC_OscConfig+0x2ac>)
 80014e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014e4:	f003 0302 	and.w	r3, r3, #2
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d1f0      	bne.n	80014ce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f003 0304 	and.w	r3, r3, #4
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	f000 80a0 	beq.w	800163a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014fa:	2300      	movs	r3, #0
 80014fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014fe:	4b13      	ldr	r3, [pc, #76]	; (800154c <HAL_RCC_OscConfig+0x2ac>)
 8001500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001502:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001506:	2b00      	cmp	r3, #0
 8001508:	d10f      	bne.n	800152a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800150a:	2300      	movs	r3, #0
 800150c:	60bb      	str	r3, [r7, #8]
 800150e:	4b0f      	ldr	r3, [pc, #60]	; (800154c <HAL_RCC_OscConfig+0x2ac>)
 8001510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001512:	4a0e      	ldr	r2, [pc, #56]	; (800154c <HAL_RCC_OscConfig+0x2ac>)
 8001514:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001518:	6413      	str	r3, [r2, #64]	; 0x40
 800151a:	4b0c      	ldr	r3, [pc, #48]	; (800154c <HAL_RCC_OscConfig+0x2ac>)
 800151c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001522:	60bb      	str	r3, [r7, #8]
 8001524:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001526:	2301      	movs	r3, #1
 8001528:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800152a:	4b0b      	ldr	r3, [pc, #44]	; (8001558 <HAL_RCC_OscConfig+0x2b8>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001532:	2b00      	cmp	r3, #0
 8001534:	d121      	bne.n	800157a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001536:	4b08      	ldr	r3, [pc, #32]	; (8001558 <HAL_RCC_OscConfig+0x2b8>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4a07      	ldr	r2, [pc, #28]	; (8001558 <HAL_RCC_OscConfig+0x2b8>)
 800153c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001540:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001542:	f7ff fc23 	bl	8000d8c <HAL_GetTick>
 8001546:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001548:	e011      	b.n	800156e <HAL_RCC_OscConfig+0x2ce>
 800154a:	bf00      	nop
 800154c:	40023800 	.word	0x40023800
 8001550:	42470000 	.word	0x42470000
 8001554:	42470e80 	.word	0x42470e80
 8001558:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800155c:	f7ff fc16 	bl	8000d8c <HAL_GetTick>
 8001560:	4602      	mov	r2, r0
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	1ad3      	subs	r3, r2, r3
 8001566:	2b02      	cmp	r3, #2
 8001568:	d901      	bls.n	800156e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800156a:	2303      	movs	r3, #3
 800156c:	e106      	b.n	800177c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800156e:	4b85      	ldr	r3, [pc, #532]	; (8001784 <HAL_RCC_OscConfig+0x4e4>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001576:	2b00      	cmp	r3, #0
 8001578:	d0f0      	beq.n	800155c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	689b      	ldr	r3, [r3, #8]
 800157e:	2b01      	cmp	r3, #1
 8001580:	d106      	bne.n	8001590 <HAL_RCC_OscConfig+0x2f0>
 8001582:	4b81      	ldr	r3, [pc, #516]	; (8001788 <HAL_RCC_OscConfig+0x4e8>)
 8001584:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001586:	4a80      	ldr	r2, [pc, #512]	; (8001788 <HAL_RCC_OscConfig+0x4e8>)
 8001588:	f043 0301 	orr.w	r3, r3, #1
 800158c:	6713      	str	r3, [r2, #112]	; 0x70
 800158e:	e01c      	b.n	80015ca <HAL_RCC_OscConfig+0x32a>
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	689b      	ldr	r3, [r3, #8]
 8001594:	2b05      	cmp	r3, #5
 8001596:	d10c      	bne.n	80015b2 <HAL_RCC_OscConfig+0x312>
 8001598:	4b7b      	ldr	r3, [pc, #492]	; (8001788 <HAL_RCC_OscConfig+0x4e8>)
 800159a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800159c:	4a7a      	ldr	r2, [pc, #488]	; (8001788 <HAL_RCC_OscConfig+0x4e8>)
 800159e:	f043 0304 	orr.w	r3, r3, #4
 80015a2:	6713      	str	r3, [r2, #112]	; 0x70
 80015a4:	4b78      	ldr	r3, [pc, #480]	; (8001788 <HAL_RCC_OscConfig+0x4e8>)
 80015a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015a8:	4a77      	ldr	r2, [pc, #476]	; (8001788 <HAL_RCC_OscConfig+0x4e8>)
 80015aa:	f043 0301 	orr.w	r3, r3, #1
 80015ae:	6713      	str	r3, [r2, #112]	; 0x70
 80015b0:	e00b      	b.n	80015ca <HAL_RCC_OscConfig+0x32a>
 80015b2:	4b75      	ldr	r3, [pc, #468]	; (8001788 <HAL_RCC_OscConfig+0x4e8>)
 80015b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015b6:	4a74      	ldr	r2, [pc, #464]	; (8001788 <HAL_RCC_OscConfig+0x4e8>)
 80015b8:	f023 0301 	bic.w	r3, r3, #1
 80015bc:	6713      	str	r3, [r2, #112]	; 0x70
 80015be:	4b72      	ldr	r3, [pc, #456]	; (8001788 <HAL_RCC_OscConfig+0x4e8>)
 80015c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015c2:	4a71      	ldr	r2, [pc, #452]	; (8001788 <HAL_RCC_OscConfig+0x4e8>)
 80015c4:	f023 0304 	bic.w	r3, r3, #4
 80015c8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	689b      	ldr	r3, [r3, #8]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d015      	beq.n	80015fe <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015d2:	f7ff fbdb 	bl	8000d8c <HAL_GetTick>
 80015d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015d8:	e00a      	b.n	80015f0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015da:	f7ff fbd7 	bl	8000d8c <HAL_GetTick>
 80015de:	4602      	mov	r2, r0
 80015e0:	693b      	ldr	r3, [r7, #16]
 80015e2:	1ad3      	subs	r3, r2, r3
 80015e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80015e8:	4293      	cmp	r3, r2
 80015ea:	d901      	bls.n	80015f0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80015ec:	2303      	movs	r3, #3
 80015ee:	e0c5      	b.n	800177c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015f0:	4b65      	ldr	r3, [pc, #404]	; (8001788 <HAL_RCC_OscConfig+0x4e8>)
 80015f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015f4:	f003 0302 	and.w	r3, r3, #2
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d0ee      	beq.n	80015da <HAL_RCC_OscConfig+0x33a>
 80015fc:	e014      	b.n	8001628 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015fe:	f7ff fbc5 	bl	8000d8c <HAL_GetTick>
 8001602:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001604:	e00a      	b.n	800161c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001606:	f7ff fbc1 	bl	8000d8c <HAL_GetTick>
 800160a:	4602      	mov	r2, r0
 800160c:	693b      	ldr	r3, [r7, #16]
 800160e:	1ad3      	subs	r3, r2, r3
 8001610:	f241 3288 	movw	r2, #5000	; 0x1388
 8001614:	4293      	cmp	r3, r2
 8001616:	d901      	bls.n	800161c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001618:	2303      	movs	r3, #3
 800161a:	e0af      	b.n	800177c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800161c:	4b5a      	ldr	r3, [pc, #360]	; (8001788 <HAL_RCC_OscConfig+0x4e8>)
 800161e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001620:	f003 0302 	and.w	r3, r3, #2
 8001624:	2b00      	cmp	r3, #0
 8001626:	d1ee      	bne.n	8001606 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001628:	7dfb      	ldrb	r3, [r7, #23]
 800162a:	2b01      	cmp	r3, #1
 800162c:	d105      	bne.n	800163a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800162e:	4b56      	ldr	r3, [pc, #344]	; (8001788 <HAL_RCC_OscConfig+0x4e8>)
 8001630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001632:	4a55      	ldr	r2, [pc, #340]	; (8001788 <HAL_RCC_OscConfig+0x4e8>)
 8001634:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001638:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	699b      	ldr	r3, [r3, #24]
 800163e:	2b00      	cmp	r3, #0
 8001640:	f000 809b 	beq.w	800177a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001644:	4b50      	ldr	r3, [pc, #320]	; (8001788 <HAL_RCC_OscConfig+0x4e8>)
 8001646:	689b      	ldr	r3, [r3, #8]
 8001648:	f003 030c 	and.w	r3, r3, #12
 800164c:	2b08      	cmp	r3, #8
 800164e:	d05c      	beq.n	800170a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	699b      	ldr	r3, [r3, #24]
 8001654:	2b02      	cmp	r3, #2
 8001656:	d141      	bne.n	80016dc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001658:	4b4c      	ldr	r3, [pc, #304]	; (800178c <HAL_RCC_OscConfig+0x4ec>)
 800165a:	2200      	movs	r2, #0
 800165c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800165e:	f7ff fb95 	bl	8000d8c <HAL_GetTick>
 8001662:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001664:	e008      	b.n	8001678 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001666:	f7ff fb91 	bl	8000d8c <HAL_GetTick>
 800166a:	4602      	mov	r2, r0
 800166c:	693b      	ldr	r3, [r7, #16]
 800166e:	1ad3      	subs	r3, r2, r3
 8001670:	2b02      	cmp	r3, #2
 8001672:	d901      	bls.n	8001678 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001674:	2303      	movs	r3, #3
 8001676:	e081      	b.n	800177c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001678:	4b43      	ldr	r3, [pc, #268]	; (8001788 <HAL_RCC_OscConfig+0x4e8>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001680:	2b00      	cmp	r3, #0
 8001682:	d1f0      	bne.n	8001666 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	69da      	ldr	r2, [r3, #28]
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6a1b      	ldr	r3, [r3, #32]
 800168c:	431a      	orrs	r2, r3
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001692:	019b      	lsls	r3, r3, #6
 8001694:	431a      	orrs	r2, r3
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800169a:	085b      	lsrs	r3, r3, #1
 800169c:	3b01      	subs	r3, #1
 800169e:	041b      	lsls	r3, r3, #16
 80016a0:	431a      	orrs	r2, r3
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016a6:	061b      	lsls	r3, r3, #24
 80016a8:	4937      	ldr	r1, [pc, #220]	; (8001788 <HAL_RCC_OscConfig+0x4e8>)
 80016aa:	4313      	orrs	r3, r2
 80016ac:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016ae:	4b37      	ldr	r3, [pc, #220]	; (800178c <HAL_RCC_OscConfig+0x4ec>)
 80016b0:	2201      	movs	r2, #1
 80016b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016b4:	f7ff fb6a 	bl	8000d8c <HAL_GetTick>
 80016b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016ba:	e008      	b.n	80016ce <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016bc:	f7ff fb66 	bl	8000d8c <HAL_GetTick>
 80016c0:	4602      	mov	r2, r0
 80016c2:	693b      	ldr	r3, [r7, #16]
 80016c4:	1ad3      	subs	r3, r2, r3
 80016c6:	2b02      	cmp	r3, #2
 80016c8:	d901      	bls.n	80016ce <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80016ca:	2303      	movs	r3, #3
 80016cc:	e056      	b.n	800177c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016ce:	4b2e      	ldr	r3, [pc, #184]	; (8001788 <HAL_RCC_OscConfig+0x4e8>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d0f0      	beq.n	80016bc <HAL_RCC_OscConfig+0x41c>
 80016da:	e04e      	b.n	800177a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016dc:	4b2b      	ldr	r3, [pc, #172]	; (800178c <HAL_RCC_OscConfig+0x4ec>)
 80016de:	2200      	movs	r2, #0
 80016e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016e2:	f7ff fb53 	bl	8000d8c <HAL_GetTick>
 80016e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016e8:	e008      	b.n	80016fc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016ea:	f7ff fb4f 	bl	8000d8c <HAL_GetTick>
 80016ee:	4602      	mov	r2, r0
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	1ad3      	subs	r3, r2, r3
 80016f4:	2b02      	cmp	r3, #2
 80016f6:	d901      	bls.n	80016fc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80016f8:	2303      	movs	r3, #3
 80016fa:	e03f      	b.n	800177c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016fc:	4b22      	ldr	r3, [pc, #136]	; (8001788 <HAL_RCC_OscConfig+0x4e8>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001704:	2b00      	cmp	r3, #0
 8001706:	d1f0      	bne.n	80016ea <HAL_RCC_OscConfig+0x44a>
 8001708:	e037      	b.n	800177a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	699b      	ldr	r3, [r3, #24]
 800170e:	2b01      	cmp	r3, #1
 8001710:	d101      	bne.n	8001716 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001712:	2301      	movs	r3, #1
 8001714:	e032      	b.n	800177c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001716:	4b1c      	ldr	r3, [pc, #112]	; (8001788 <HAL_RCC_OscConfig+0x4e8>)
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	699b      	ldr	r3, [r3, #24]
 8001720:	2b01      	cmp	r3, #1
 8001722:	d028      	beq.n	8001776 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800172e:	429a      	cmp	r2, r3
 8001730:	d121      	bne.n	8001776 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800173c:	429a      	cmp	r2, r3
 800173e:	d11a      	bne.n	8001776 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001740:	68fa      	ldr	r2, [r7, #12]
 8001742:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001746:	4013      	ands	r3, r2
 8001748:	687a      	ldr	r2, [r7, #4]
 800174a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800174c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800174e:	4293      	cmp	r3, r2
 8001750:	d111      	bne.n	8001776 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800175c:	085b      	lsrs	r3, r3, #1
 800175e:	3b01      	subs	r3, #1
 8001760:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001762:	429a      	cmp	r2, r3
 8001764:	d107      	bne.n	8001776 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001770:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001772:	429a      	cmp	r2, r3
 8001774:	d001      	beq.n	800177a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001776:	2301      	movs	r3, #1
 8001778:	e000      	b.n	800177c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800177a:	2300      	movs	r3, #0
}
 800177c:	4618      	mov	r0, r3
 800177e:	3718      	adds	r7, #24
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	40007000 	.word	0x40007000
 8001788:	40023800 	.word	0x40023800
 800178c:	42470060 	.word	0x42470060

08001790 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b084      	sub	sp, #16
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
 8001798:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d101      	bne.n	80017a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017a0:	2301      	movs	r3, #1
 80017a2:	e0cc      	b.n	800193e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017a4:	4b68      	ldr	r3, [pc, #416]	; (8001948 <HAL_RCC_ClockConfig+0x1b8>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f003 0307 	and.w	r3, r3, #7
 80017ac:	683a      	ldr	r2, [r7, #0]
 80017ae:	429a      	cmp	r2, r3
 80017b0:	d90c      	bls.n	80017cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017b2:	4b65      	ldr	r3, [pc, #404]	; (8001948 <HAL_RCC_ClockConfig+0x1b8>)
 80017b4:	683a      	ldr	r2, [r7, #0]
 80017b6:	b2d2      	uxtb	r2, r2
 80017b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017ba:	4b63      	ldr	r3, [pc, #396]	; (8001948 <HAL_RCC_ClockConfig+0x1b8>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f003 0307 	and.w	r3, r3, #7
 80017c2:	683a      	ldr	r2, [r7, #0]
 80017c4:	429a      	cmp	r2, r3
 80017c6:	d001      	beq.n	80017cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80017c8:	2301      	movs	r3, #1
 80017ca:	e0b8      	b.n	800193e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f003 0302 	and.w	r3, r3, #2
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d020      	beq.n	800181a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f003 0304 	and.w	r3, r3, #4
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d005      	beq.n	80017f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017e4:	4b59      	ldr	r3, [pc, #356]	; (800194c <HAL_RCC_ClockConfig+0x1bc>)
 80017e6:	689b      	ldr	r3, [r3, #8]
 80017e8:	4a58      	ldr	r2, [pc, #352]	; (800194c <HAL_RCC_ClockConfig+0x1bc>)
 80017ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80017ee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f003 0308 	and.w	r3, r3, #8
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d005      	beq.n	8001808 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017fc:	4b53      	ldr	r3, [pc, #332]	; (800194c <HAL_RCC_ClockConfig+0x1bc>)
 80017fe:	689b      	ldr	r3, [r3, #8]
 8001800:	4a52      	ldr	r2, [pc, #328]	; (800194c <HAL_RCC_ClockConfig+0x1bc>)
 8001802:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001806:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001808:	4b50      	ldr	r3, [pc, #320]	; (800194c <HAL_RCC_ClockConfig+0x1bc>)
 800180a:	689b      	ldr	r3, [r3, #8]
 800180c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	689b      	ldr	r3, [r3, #8]
 8001814:	494d      	ldr	r1, [pc, #308]	; (800194c <HAL_RCC_ClockConfig+0x1bc>)
 8001816:	4313      	orrs	r3, r2
 8001818:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f003 0301 	and.w	r3, r3, #1
 8001822:	2b00      	cmp	r3, #0
 8001824:	d044      	beq.n	80018b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	2b01      	cmp	r3, #1
 800182c:	d107      	bne.n	800183e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800182e:	4b47      	ldr	r3, [pc, #284]	; (800194c <HAL_RCC_ClockConfig+0x1bc>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001836:	2b00      	cmp	r3, #0
 8001838:	d119      	bne.n	800186e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800183a:	2301      	movs	r3, #1
 800183c:	e07f      	b.n	800193e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	2b02      	cmp	r3, #2
 8001844:	d003      	beq.n	800184e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800184a:	2b03      	cmp	r3, #3
 800184c:	d107      	bne.n	800185e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800184e:	4b3f      	ldr	r3, [pc, #252]	; (800194c <HAL_RCC_ClockConfig+0x1bc>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001856:	2b00      	cmp	r3, #0
 8001858:	d109      	bne.n	800186e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	e06f      	b.n	800193e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800185e:	4b3b      	ldr	r3, [pc, #236]	; (800194c <HAL_RCC_ClockConfig+0x1bc>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f003 0302 	and.w	r3, r3, #2
 8001866:	2b00      	cmp	r3, #0
 8001868:	d101      	bne.n	800186e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800186a:	2301      	movs	r3, #1
 800186c:	e067      	b.n	800193e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800186e:	4b37      	ldr	r3, [pc, #220]	; (800194c <HAL_RCC_ClockConfig+0x1bc>)
 8001870:	689b      	ldr	r3, [r3, #8]
 8001872:	f023 0203 	bic.w	r2, r3, #3
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	4934      	ldr	r1, [pc, #208]	; (800194c <HAL_RCC_ClockConfig+0x1bc>)
 800187c:	4313      	orrs	r3, r2
 800187e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001880:	f7ff fa84 	bl	8000d8c <HAL_GetTick>
 8001884:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001886:	e00a      	b.n	800189e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001888:	f7ff fa80 	bl	8000d8c <HAL_GetTick>
 800188c:	4602      	mov	r2, r0
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	1ad3      	subs	r3, r2, r3
 8001892:	f241 3288 	movw	r2, #5000	; 0x1388
 8001896:	4293      	cmp	r3, r2
 8001898:	d901      	bls.n	800189e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800189a:	2303      	movs	r3, #3
 800189c:	e04f      	b.n	800193e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800189e:	4b2b      	ldr	r3, [pc, #172]	; (800194c <HAL_RCC_ClockConfig+0x1bc>)
 80018a0:	689b      	ldr	r3, [r3, #8]
 80018a2:	f003 020c 	and.w	r2, r3, #12
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	009b      	lsls	r3, r3, #2
 80018ac:	429a      	cmp	r2, r3
 80018ae:	d1eb      	bne.n	8001888 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018b0:	4b25      	ldr	r3, [pc, #148]	; (8001948 <HAL_RCC_ClockConfig+0x1b8>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f003 0307 	and.w	r3, r3, #7
 80018b8:	683a      	ldr	r2, [r7, #0]
 80018ba:	429a      	cmp	r2, r3
 80018bc:	d20c      	bcs.n	80018d8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018be:	4b22      	ldr	r3, [pc, #136]	; (8001948 <HAL_RCC_ClockConfig+0x1b8>)
 80018c0:	683a      	ldr	r2, [r7, #0]
 80018c2:	b2d2      	uxtb	r2, r2
 80018c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018c6:	4b20      	ldr	r3, [pc, #128]	; (8001948 <HAL_RCC_ClockConfig+0x1b8>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f003 0307 	and.w	r3, r3, #7
 80018ce:	683a      	ldr	r2, [r7, #0]
 80018d0:	429a      	cmp	r2, r3
 80018d2:	d001      	beq.n	80018d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80018d4:	2301      	movs	r3, #1
 80018d6:	e032      	b.n	800193e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f003 0304 	and.w	r3, r3, #4
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d008      	beq.n	80018f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018e4:	4b19      	ldr	r3, [pc, #100]	; (800194c <HAL_RCC_ClockConfig+0x1bc>)
 80018e6:	689b      	ldr	r3, [r3, #8]
 80018e8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	68db      	ldr	r3, [r3, #12]
 80018f0:	4916      	ldr	r1, [pc, #88]	; (800194c <HAL_RCC_ClockConfig+0x1bc>)
 80018f2:	4313      	orrs	r3, r2
 80018f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f003 0308 	and.w	r3, r3, #8
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d009      	beq.n	8001916 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001902:	4b12      	ldr	r3, [pc, #72]	; (800194c <HAL_RCC_ClockConfig+0x1bc>)
 8001904:	689b      	ldr	r3, [r3, #8]
 8001906:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	691b      	ldr	r3, [r3, #16]
 800190e:	00db      	lsls	r3, r3, #3
 8001910:	490e      	ldr	r1, [pc, #56]	; (800194c <HAL_RCC_ClockConfig+0x1bc>)
 8001912:	4313      	orrs	r3, r2
 8001914:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001916:	f000 f821 	bl	800195c <HAL_RCC_GetSysClockFreq>
 800191a:	4602      	mov	r2, r0
 800191c:	4b0b      	ldr	r3, [pc, #44]	; (800194c <HAL_RCC_ClockConfig+0x1bc>)
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	091b      	lsrs	r3, r3, #4
 8001922:	f003 030f 	and.w	r3, r3, #15
 8001926:	490a      	ldr	r1, [pc, #40]	; (8001950 <HAL_RCC_ClockConfig+0x1c0>)
 8001928:	5ccb      	ldrb	r3, [r1, r3]
 800192a:	fa22 f303 	lsr.w	r3, r2, r3
 800192e:	4a09      	ldr	r2, [pc, #36]	; (8001954 <HAL_RCC_ClockConfig+0x1c4>)
 8001930:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001932:	4b09      	ldr	r3, [pc, #36]	; (8001958 <HAL_RCC_ClockConfig+0x1c8>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4618      	mov	r0, r3
 8001938:	f7ff f906 	bl	8000b48 <HAL_InitTick>

  return HAL_OK;
 800193c:	2300      	movs	r3, #0
}
 800193e:	4618      	mov	r0, r3
 8001940:	3710      	adds	r7, #16
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	40023c00 	.word	0x40023c00
 800194c:	40023800 	.word	0x40023800
 8001950:	08005040 	.word	0x08005040
 8001954:	20000000 	.word	0x20000000
 8001958:	20000004 	.word	0x20000004

0800195c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800195c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001960:	b084      	sub	sp, #16
 8001962:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001964:	2300      	movs	r3, #0
 8001966:	607b      	str	r3, [r7, #4]
 8001968:	2300      	movs	r3, #0
 800196a:	60fb      	str	r3, [r7, #12]
 800196c:	2300      	movs	r3, #0
 800196e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001970:	2300      	movs	r3, #0
 8001972:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001974:	4b67      	ldr	r3, [pc, #412]	; (8001b14 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	f003 030c 	and.w	r3, r3, #12
 800197c:	2b08      	cmp	r3, #8
 800197e:	d00d      	beq.n	800199c <HAL_RCC_GetSysClockFreq+0x40>
 8001980:	2b08      	cmp	r3, #8
 8001982:	f200 80bd 	bhi.w	8001b00 <HAL_RCC_GetSysClockFreq+0x1a4>
 8001986:	2b00      	cmp	r3, #0
 8001988:	d002      	beq.n	8001990 <HAL_RCC_GetSysClockFreq+0x34>
 800198a:	2b04      	cmp	r3, #4
 800198c:	d003      	beq.n	8001996 <HAL_RCC_GetSysClockFreq+0x3a>
 800198e:	e0b7      	b.n	8001b00 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001990:	4b61      	ldr	r3, [pc, #388]	; (8001b18 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001992:	60bb      	str	r3, [r7, #8]
       break;
 8001994:	e0b7      	b.n	8001b06 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001996:	4b61      	ldr	r3, [pc, #388]	; (8001b1c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001998:	60bb      	str	r3, [r7, #8]
      break;
 800199a:	e0b4      	b.n	8001b06 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800199c:	4b5d      	ldr	r3, [pc, #372]	; (8001b14 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80019a4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019a6:	4b5b      	ldr	r3, [pc, #364]	; (8001b14 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d04d      	beq.n	8001a4e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019b2:	4b58      	ldr	r3, [pc, #352]	; (8001b14 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	099b      	lsrs	r3, r3, #6
 80019b8:	461a      	mov	r2, r3
 80019ba:	f04f 0300 	mov.w	r3, #0
 80019be:	f240 10ff 	movw	r0, #511	; 0x1ff
 80019c2:	f04f 0100 	mov.w	r1, #0
 80019c6:	ea02 0800 	and.w	r8, r2, r0
 80019ca:	ea03 0901 	and.w	r9, r3, r1
 80019ce:	4640      	mov	r0, r8
 80019d0:	4649      	mov	r1, r9
 80019d2:	f04f 0200 	mov.w	r2, #0
 80019d6:	f04f 0300 	mov.w	r3, #0
 80019da:	014b      	lsls	r3, r1, #5
 80019dc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80019e0:	0142      	lsls	r2, r0, #5
 80019e2:	4610      	mov	r0, r2
 80019e4:	4619      	mov	r1, r3
 80019e6:	ebb0 0008 	subs.w	r0, r0, r8
 80019ea:	eb61 0109 	sbc.w	r1, r1, r9
 80019ee:	f04f 0200 	mov.w	r2, #0
 80019f2:	f04f 0300 	mov.w	r3, #0
 80019f6:	018b      	lsls	r3, r1, #6
 80019f8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80019fc:	0182      	lsls	r2, r0, #6
 80019fe:	1a12      	subs	r2, r2, r0
 8001a00:	eb63 0301 	sbc.w	r3, r3, r1
 8001a04:	f04f 0000 	mov.w	r0, #0
 8001a08:	f04f 0100 	mov.w	r1, #0
 8001a0c:	00d9      	lsls	r1, r3, #3
 8001a0e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001a12:	00d0      	lsls	r0, r2, #3
 8001a14:	4602      	mov	r2, r0
 8001a16:	460b      	mov	r3, r1
 8001a18:	eb12 0208 	adds.w	r2, r2, r8
 8001a1c:	eb43 0309 	adc.w	r3, r3, r9
 8001a20:	f04f 0000 	mov.w	r0, #0
 8001a24:	f04f 0100 	mov.w	r1, #0
 8001a28:	0259      	lsls	r1, r3, #9
 8001a2a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001a2e:	0250      	lsls	r0, r2, #9
 8001a30:	4602      	mov	r2, r0
 8001a32:	460b      	mov	r3, r1
 8001a34:	4610      	mov	r0, r2
 8001a36:	4619      	mov	r1, r3
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	461a      	mov	r2, r3
 8001a3c:	f04f 0300 	mov.w	r3, #0
 8001a40:	f7fe fc1e 	bl	8000280 <__aeabi_uldivmod>
 8001a44:	4602      	mov	r2, r0
 8001a46:	460b      	mov	r3, r1
 8001a48:	4613      	mov	r3, r2
 8001a4a:	60fb      	str	r3, [r7, #12]
 8001a4c:	e04a      	b.n	8001ae4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a4e:	4b31      	ldr	r3, [pc, #196]	; (8001b14 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	099b      	lsrs	r3, r3, #6
 8001a54:	461a      	mov	r2, r3
 8001a56:	f04f 0300 	mov.w	r3, #0
 8001a5a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001a5e:	f04f 0100 	mov.w	r1, #0
 8001a62:	ea02 0400 	and.w	r4, r2, r0
 8001a66:	ea03 0501 	and.w	r5, r3, r1
 8001a6a:	4620      	mov	r0, r4
 8001a6c:	4629      	mov	r1, r5
 8001a6e:	f04f 0200 	mov.w	r2, #0
 8001a72:	f04f 0300 	mov.w	r3, #0
 8001a76:	014b      	lsls	r3, r1, #5
 8001a78:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001a7c:	0142      	lsls	r2, r0, #5
 8001a7e:	4610      	mov	r0, r2
 8001a80:	4619      	mov	r1, r3
 8001a82:	1b00      	subs	r0, r0, r4
 8001a84:	eb61 0105 	sbc.w	r1, r1, r5
 8001a88:	f04f 0200 	mov.w	r2, #0
 8001a8c:	f04f 0300 	mov.w	r3, #0
 8001a90:	018b      	lsls	r3, r1, #6
 8001a92:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001a96:	0182      	lsls	r2, r0, #6
 8001a98:	1a12      	subs	r2, r2, r0
 8001a9a:	eb63 0301 	sbc.w	r3, r3, r1
 8001a9e:	f04f 0000 	mov.w	r0, #0
 8001aa2:	f04f 0100 	mov.w	r1, #0
 8001aa6:	00d9      	lsls	r1, r3, #3
 8001aa8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001aac:	00d0      	lsls	r0, r2, #3
 8001aae:	4602      	mov	r2, r0
 8001ab0:	460b      	mov	r3, r1
 8001ab2:	1912      	adds	r2, r2, r4
 8001ab4:	eb45 0303 	adc.w	r3, r5, r3
 8001ab8:	f04f 0000 	mov.w	r0, #0
 8001abc:	f04f 0100 	mov.w	r1, #0
 8001ac0:	0299      	lsls	r1, r3, #10
 8001ac2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001ac6:	0290      	lsls	r0, r2, #10
 8001ac8:	4602      	mov	r2, r0
 8001aca:	460b      	mov	r3, r1
 8001acc:	4610      	mov	r0, r2
 8001ace:	4619      	mov	r1, r3
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	461a      	mov	r2, r3
 8001ad4:	f04f 0300 	mov.w	r3, #0
 8001ad8:	f7fe fbd2 	bl	8000280 <__aeabi_uldivmod>
 8001adc:	4602      	mov	r2, r0
 8001ade:	460b      	mov	r3, r1
 8001ae0:	4613      	mov	r3, r2
 8001ae2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001ae4:	4b0b      	ldr	r3, [pc, #44]	; (8001b14 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	0c1b      	lsrs	r3, r3, #16
 8001aea:	f003 0303 	and.w	r3, r3, #3
 8001aee:	3301      	adds	r3, #1
 8001af0:	005b      	lsls	r3, r3, #1
 8001af2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001af4:	68fa      	ldr	r2, [r7, #12]
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001afc:	60bb      	str	r3, [r7, #8]
      break;
 8001afe:	e002      	b.n	8001b06 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b00:	4b05      	ldr	r3, [pc, #20]	; (8001b18 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001b02:	60bb      	str	r3, [r7, #8]
      break;
 8001b04:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b06:	68bb      	ldr	r3, [r7, #8]
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	3710      	adds	r7, #16
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001b12:	bf00      	nop
 8001b14:	40023800 	.word	0x40023800
 8001b18:	00f42400 	.word	0x00f42400
 8001b1c:	007a1200 	.word	0x007a1200

08001b20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b24:	4b03      	ldr	r3, [pc, #12]	; (8001b34 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b26:	681b      	ldr	r3, [r3, #0]
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr
 8001b32:	bf00      	nop
 8001b34:	20000000 	.word	0x20000000

08001b38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001b3c:	f7ff fff0 	bl	8001b20 <HAL_RCC_GetHCLKFreq>
 8001b40:	4602      	mov	r2, r0
 8001b42:	4b05      	ldr	r3, [pc, #20]	; (8001b58 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	0a9b      	lsrs	r3, r3, #10
 8001b48:	f003 0307 	and.w	r3, r3, #7
 8001b4c:	4903      	ldr	r1, [pc, #12]	; (8001b5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b4e:	5ccb      	ldrb	r3, [r1, r3]
 8001b50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	40023800 	.word	0x40023800
 8001b5c:	08005050 	.word	0x08005050

08001b60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001b64:	f7ff ffdc 	bl	8001b20 <HAL_RCC_GetHCLKFreq>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	4b05      	ldr	r3, [pc, #20]	; (8001b80 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b6c:	689b      	ldr	r3, [r3, #8]
 8001b6e:	0b5b      	lsrs	r3, r3, #13
 8001b70:	f003 0307 	and.w	r3, r3, #7
 8001b74:	4903      	ldr	r1, [pc, #12]	; (8001b84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b76:	5ccb      	ldrb	r3, [r1, r3]
 8001b78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	40023800 	.word	0x40023800
 8001b84:	08005050 	.word	0x08005050

08001b88 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b083      	sub	sp, #12
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
 8001b90:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	220f      	movs	r2, #15
 8001b96:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001b98:	4b12      	ldr	r3, [pc, #72]	; (8001be4 <HAL_RCC_GetClockConfig+0x5c>)
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	f003 0203 	and.w	r2, r3, #3
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001ba4:	4b0f      	ldr	r3, [pc, #60]	; (8001be4 <HAL_RCC_GetClockConfig+0x5c>)
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001bb0:	4b0c      	ldr	r3, [pc, #48]	; (8001be4 <HAL_RCC_GetClockConfig+0x5c>)
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001bbc:	4b09      	ldr	r3, [pc, #36]	; (8001be4 <HAL_RCC_GetClockConfig+0x5c>)
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	08db      	lsrs	r3, r3, #3
 8001bc2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001bca:	4b07      	ldr	r3, [pc, #28]	; (8001be8 <HAL_RCC_GetClockConfig+0x60>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f003 0207 	and.w	r2, r3, #7
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	601a      	str	r2, [r3, #0]
}
 8001bd6:	bf00      	nop
 8001bd8:	370c      	adds	r7, #12
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr
 8001be2:	bf00      	nop
 8001be4:	40023800 	.word	0x40023800
 8001be8:	40023c00 	.word	0x40023c00

08001bec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b082      	sub	sp, #8
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d101      	bne.n	8001bfe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e041      	b.n	8001c82 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d106      	bne.n	8001c18 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c12:	6878      	ldr	r0, [r7, #4]
 8001c14:	f000 f839 	bl	8001c8a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2202      	movs	r2, #2
 8001c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681a      	ldr	r2, [r3, #0]
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	3304      	adds	r3, #4
 8001c28:	4619      	mov	r1, r3
 8001c2a:	4610      	mov	r0, r2
 8001c2c:	f000 f9d8 	bl	8001fe0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2201      	movs	r2, #1
 8001c34:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2201      	movs	r2, #1
 8001c44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2201      	movs	r2, #1
 8001c54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2201      	movs	r2, #1
 8001c64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2201      	movs	r2, #1
 8001c74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c80:	2300      	movs	r3, #0
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	3708      	adds	r7, #8
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}

08001c8a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001c8a:	b480      	push	{r7}
 8001c8c:	b083      	sub	sp, #12
 8001c8e:	af00      	add	r7, sp, #0
 8001c90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001c92:	bf00      	nop
 8001c94:	370c      	adds	r7, #12
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr
	...

08001ca0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b085      	sub	sp, #20
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cae:	b2db      	uxtb	r3, r3
 8001cb0:	2b01      	cmp	r3, #1
 8001cb2:	d001      	beq.n	8001cb8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	e04e      	b.n	8001d56 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2202      	movs	r2, #2
 8001cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	68da      	ldr	r2, [r3, #12]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f042 0201 	orr.w	r2, r2, #1
 8001cce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a23      	ldr	r2, [pc, #140]	; (8001d64 <HAL_TIM_Base_Start_IT+0xc4>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d022      	beq.n	8001d20 <HAL_TIM_Base_Start_IT+0x80>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ce2:	d01d      	beq.n	8001d20 <HAL_TIM_Base_Start_IT+0x80>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a1f      	ldr	r2, [pc, #124]	; (8001d68 <HAL_TIM_Base_Start_IT+0xc8>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d018      	beq.n	8001d20 <HAL_TIM_Base_Start_IT+0x80>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a1e      	ldr	r2, [pc, #120]	; (8001d6c <HAL_TIM_Base_Start_IT+0xcc>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d013      	beq.n	8001d20 <HAL_TIM_Base_Start_IT+0x80>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a1c      	ldr	r2, [pc, #112]	; (8001d70 <HAL_TIM_Base_Start_IT+0xd0>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d00e      	beq.n	8001d20 <HAL_TIM_Base_Start_IT+0x80>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a1b      	ldr	r2, [pc, #108]	; (8001d74 <HAL_TIM_Base_Start_IT+0xd4>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d009      	beq.n	8001d20 <HAL_TIM_Base_Start_IT+0x80>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a19      	ldr	r2, [pc, #100]	; (8001d78 <HAL_TIM_Base_Start_IT+0xd8>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d004      	beq.n	8001d20 <HAL_TIM_Base_Start_IT+0x80>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a18      	ldr	r2, [pc, #96]	; (8001d7c <HAL_TIM_Base_Start_IT+0xdc>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d111      	bne.n	8001d44 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	689b      	ldr	r3, [r3, #8]
 8001d26:	f003 0307 	and.w	r3, r3, #7
 8001d2a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	2b06      	cmp	r3, #6
 8001d30:	d010      	beq.n	8001d54 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	681a      	ldr	r2, [r3, #0]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f042 0201 	orr.w	r2, r2, #1
 8001d40:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d42:	e007      	b.n	8001d54 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f042 0201 	orr.w	r2, r2, #1
 8001d52:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d54:	2300      	movs	r3, #0
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	3714      	adds	r7, #20
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr
 8001d62:	bf00      	nop
 8001d64:	40010000 	.word	0x40010000
 8001d68:	40000400 	.word	0x40000400
 8001d6c:	40000800 	.word	0x40000800
 8001d70:	40000c00 	.word	0x40000c00
 8001d74:	40010400 	.word	0x40010400
 8001d78:	40014000 	.word	0x40014000
 8001d7c:	40001800 	.word	0x40001800

08001d80 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b082      	sub	sp, #8
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	691b      	ldr	r3, [r3, #16]
 8001d8e:	f003 0302 	and.w	r3, r3, #2
 8001d92:	2b02      	cmp	r3, #2
 8001d94:	d122      	bne.n	8001ddc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	f003 0302 	and.w	r3, r3, #2
 8001da0:	2b02      	cmp	r3, #2
 8001da2:	d11b      	bne.n	8001ddc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f06f 0202 	mvn.w	r2, #2
 8001dac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2201      	movs	r2, #1
 8001db2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	699b      	ldr	r3, [r3, #24]
 8001dba:	f003 0303 	and.w	r3, r3, #3
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d003      	beq.n	8001dca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001dc2:	6878      	ldr	r0, [r7, #4]
 8001dc4:	f000 f8ee 	bl	8001fa4 <HAL_TIM_IC_CaptureCallback>
 8001dc8:	e005      	b.n	8001dd6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dca:	6878      	ldr	r0, [r7, #4]
 8001dcc:	f000 f8e0 	bl	8001f90 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dd0:	6878      	ldr	r0, [r7, #4]
 8001dd2:	f000 f8f1 	bl	8001fb8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2200      	movs	r2, #0
 8001dda:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	691b      	ldr	r3, [r3, #16]
 8001de2:	f003 0304 	and.w	r3, r3, #4
 8001de6:	2b04      	cmp	r3, #4
 8001de8:	d122      	bne.n	8001e30 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	f003 0304 	and.w	r3, r3, #4
 8001df4:	2b04      	cmp	r3, #4
 8001df6:	d11b      	bne.n	8001e30 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f06f 0204 	mvn.w	r2, #4
 8001e00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2202      	movs	r2, #2
 8001e06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	699b      	ldr	r3, [r3, #24]
 8001e0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d003      	beq.n	8001e1e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e16:	6878      	ldr	r0, [r7, #4]
 8001e18:	f000 f8c4 	bl	8001fa4 <HAL_TIM_IC_CaptureCallback>
 8001e1c:	e005      	b.n	8001e2a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e1e:	6878      	ldr	r0, [r7, #4]
 8001e20:	f000 f8b6 	bl	8001f90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e24:	6878      	ldr	r0, [r7, #4]
 8001e26:	f000 f8c7 	bl	8001fb8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	691b      	ldr	r3, [r3, #16]
 8001e36:	f003 0308 	and.w	r3, r3, #8
 8001e3a:	2b08      	cmp	r3, #8
 8001e3c:	d122      	bne.n	8001e84 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	68db      	ldr	r3, [r3, #12]
 8001e44:	f003 0308 	and.w	r3, r3, #8
 8001e48:	2b08      	cmp	r3, #8
 8001e4a:	d11b      	bne.n	8001e84 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f06f 0208 	mvn.w	r2, #8
 8001e54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2204      	movs	r2, #4
 8001e5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	69db      	ldr	r3, [r3, #28]
 8001e62:	f003 0303 	and.w	r3, r3, #3
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d003      	beq.n	8001e72 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f000 f89a 	bl	8001fa4 <HAL_TIM_IC_CaptureCallback>
 8001e70:	e005      	b.n	8001e7e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f000 f88c 	bl	8001f90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e78:	6878      	ldr	r0, [r7, #4]
 8001e7a:	f000 f89d 	bl	8001fb8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2200      	movs	r2, #0
 8001e82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	691b      	ldr	r3, [r3, #16]
 8001e8a:	f003 0310 	and.w	r3, r3, #16
 8001e8e:	2b10      	cmp	r3, #16
 8001e90:	d122      	bne.n	8001ed8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	68db      	ldr	r3, [r3, #12]
 8001e98:	f003 0310 	and.w	r3, r3, #16
 8001e9c:	2b10      	cmp	r3, #16
 8001e9e:	d11b      	bne.n	8001ed8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f06f 0210 	mvn.w	r2, #16
 8001ea8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2208      	movs	r2, #8
 8001eae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	69db      	ldr	r3, [r3, #28]
 8001eb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d003      	beq.n	8001ec6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ebe:	6878      	ldr	r0, [r7, #4]
 8001ec0:	f000 f870 	bl	8001fa4 <HAL_TIM_IC_CaptureCallback>
 8001ec4:	e005      	b.n	8001ed2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ec6:	6878      	ldr	r0, [r7, #4]
 8001ec8:	f000 f862 	bl	8001f90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ecc:	6878      	ldr	r0, [r7, #4]
 8001ece:	f000 f873 	bl	8001fb8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	691b      	ldr	r3, [r3, #16]
 8001ede:	f003 0301 	and.w	r3, r3, #1
 8001ee2:	2b01      	cmp	r3, #1
 8001ee4:	d10e      	bne.n	8001f04 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	68db      	ldr	r3, [r3, #12]
 8001eec:	f003 0301 	and.w	r3, r3, #1
 8001ef0:	2b01      	cmp	r3, #1
 8001ef2:	d107      	bne.n	8001f04 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f06f 0201 	mvn.w	r2, #1
 8001efc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	f7fe fd96 	bl	8000a30 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	691b      	ldr	r3, [r3, #16]
 8001f0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f0e:	2b80      	cmp	r3, #128	; 0x80
 8001f10:	d10e      	bne.n	8001f30 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f1c:	2b80      	cmp	r3, #128	; 0x80
 8001f1e:	d107      	bne.n	8001f30 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001f28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	f000 f902 	bl	8002134 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	691b      	ldr	r3, [r3, #16]
 8001f36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f3a:	2b40      	cmp	r3, #64	; 0x40
 8001f3c:	d10e      	bne.n	8001f5c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	68db      	ldr	r3, [r3, #12]
 8001f44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f48:	2b40      	cmp	r3, #64	; 0x40
 8001f4a:	d107      	bne.n	8001f5c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001f54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001f56:	6878      	ldr	r0, [r7, #4]
 8001f58:	f000 f838 	bl	8001fcc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	691b      	ldr	r3, [r3, #16]
 8001f62:	f003 0320 	and.w	r3, r3, #32
 8001f66:	2b20      	cmp	r3, #32
 8001f68:	d10e      	bne.n	8001f88 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	f003 0320 	and.w	r3, r3, #32
 8001f74:	2b20      	cmp	r3, #32
 8001f76:	d107      	bne.n	8001f88 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f06f 0220 	mvn.w	r2, #32
 8001f80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001f82:	6878      	ldr	r0, [r7, #4]
 8001f84:	f000 f8cc 	bl	8002120 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001f88:	bf00      	nop
 8001f8a:	3708      	adds	r7, #8
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}

08001f90 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b083      	sub	sp, #12
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001f98:	bf00      	nop
 8001f9a:	370c      	adds	r7, #12
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr

08001fa4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b083      	sub	sp, #12
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001fac:	bf00      	nop
 8001fae:	370c      	adds	r7, #12
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb6:	4770      	bx	lr

08001fb8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001fc0:	bf00      	nop
 8001fc2:	370c      	adds	r7, #12
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr

08001fcc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b083      	sub	sp, #12
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001fd4:	bf00      	nop
 8001fd6:	370c      	adds	r7, #12
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr

08001fe0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b085      	sub	sp, #20
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
 8001fe8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	4a40      	ldr	r2, [pc, #256]	; (80020f4 <TIM_Base_SetConfig+0x114>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d013      	beq.n	8002020 <TIM_Base_SetConfig+0x40>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ffe:	d00f      	beq.n	8002020 <TIM_Base_SetConfig+0x40>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	4a3d      	ldr	r2, [pc, #244]	; (80020f8 <TIM_Base_SetConfig+0x118>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d00b      	beq.n	8002020 <TIM_Base_SetConfig+0x40>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	4a3c      	ldr	r2, [pc, #240]	; (80020fc <TIM_Base_SetConfig+0x11c>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d007      	beq.n	8002020 <TIM_Base_SetConfig+0x40>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	4a3b      	ldr	r2, [pc, #236]	; (8002100 <TIM_Base_SetConfig+0x120>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d003      	beq.n	8002020 <TIM_Base_SetConfig+0x40>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	4a3a      	ldr	r2, [pc, #232]	; (8002104 <TIM_Base_SetConfig+0x124>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d108      	bne.n	8002032 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002026:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	68fa      	ldr	r2, [r7, #12]
 800202e:	4313      	orrs	r3, r2
 8002030:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	4a2f      	ldr	r2, [pc, #188]	; (80020f4 <TIM_Base_SetConfig+0x114>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d02b      	beq.n	8002092 <TIM_Base_SetConfig+0xb2>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002040:	d027      	beq.n	8002092 <TIM_Base_SetConfig+0xb2>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4a2c      	ldr	r2, [pc, #176]	; (80020f8 <TIM_Base_SetConfig+0x118>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d023      	beq.n	8002092 <TIM_Base_SetConfig+0xb2>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	4a2b      	ldr	r2, [pc, #172]	; (80020fc <TIM_Base_SetConfig+0x11c>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d01f      	beq.n	8002092 <TIM_Base_SetConfig+0xb2>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	4a2a      	ldr	r2, [pc, #168]	; (8002100 <TIM_Base_SetConfig+0x120>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d01b      	beq.n	8002092 <TIM_Base_SetConfig+0xb2>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	4a29      	ldr	r2, [pc, #164]	; (8002104 <TIM_Base_SetConfig+0x124>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d017      	beq.n	8002092 <TIM_Base_SetConfig+0xb2>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	4a28      	ldr	r2, [pc, #160]	; (8002108 <TIM_Base_SetConfig+0x128>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d013      	beq.n	8002092 <TIM_Base_SetConfig+0xb2>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	4a27      	ldr	r2, [pc, #156]	; (800210c <TIM_Base_SetConfig+0x12c>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d00f      	beq.n	8002092 <TIM_Base_SetConfig+0xb2>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	4a26      	ldr	r2, [pc, #152]	; (8002110 <TIM_Base_SetConfig+0x130>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d00b      	beq.n	8002092 <TIM_Base_SetConfig+0xb2>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	4a25      	ldr	r2, [pc, #148]	; (8002114 <TIM_Base_SetConfig+0x134>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d007      	beq.n	8002092 <TIM_Base_SetConfig+0xb2>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	4a24      	ldr	r2, [pc, #144]	; (8002118 <TIM_Base_SetConfig+0x138>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d003      	beq.n	8002092 <TIM_Base_SetConfig+0xb2>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	4a23      	ldr	r2, [pc, #140]	; (800211c <TIM_Base_SetConfig+0x13c>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d108      	bne.n	80020a4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002098:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	68db      	ldr	r3, [r3, #12]
 800209e:	68fa      	ldr	r2, [r7, #12]
 80020a0:	4313      	orrs	r3, r2
 80020a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	695b      	ldr	r3, [r3, #20]
 80020ae:	4313      	orrs	r3, r2
 80020b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	68fa      	ldr	r2, [r7, #12]
 80020b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	689a      	ldr	r2, [r3, #8]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	4a0a      	ldr	r2, [pc, #40]	; (80020f4 <TIM_Base_SetConfig+0x114>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d003      	beq.n	80020d8 <TIM_Base_SetConfig+0xf8>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	4a0c      	ldr	r2, [pc, #48]	; (8002104 <TIM_Base_SetConfig+0x124>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d103      	bne.n	80020e0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	691a      	ldr	r2, [r3, #16]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2201      	movs	r2, #1
 80020e4:	615a      	str	r2, [r3, #20]
}
 80020e6:	bf00      	nop
 80020e8:	3714      	adds	r7, #20
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr
 80020f2:	bf00      	nop
 80020f4:	40010000 	.word	0x40010000
 80020f8:	40000400 	.word	0x40000400
 80020fc:	40000800 	.word	0x40000800
 8002100:	40000c00 	.word	0x40000c00
 8002104:	40010400 	.word	0x40010400
 8002108:	40014000 	.word	0x40014000
 800210c:	40014400 	.word	0x40014400
 8002110:	40014800 	.word	0x40014800
 8002114:	40001800 	.word	0x40001800
 8002118:	40001c00 	.word	0x40001c00
 800211c:	40002000 	.word	0x40002000

08002120 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002120:	b480      	push	{r7}
 8002122:	b083      	sub	sp, #12
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002128:	bf00      	nop
 800212a:	370c      	adds	r7, #12
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr

08002134 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002134:	b480      	push	{r7}
 8002136:	b083      	sub	sp, #12
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800213c:	bf00      	nop
 800213e:	370c      	adds	r7, #12
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr

08002148 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b082      	sub	sp, #8
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d101      	bne.n	800215a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	e03f      	b.n	80021da <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002160:	b2db      	uxtb	r3, r3
 8002162:	2b00      	cmp	r3, #0
 8002164:	d106      	bne.n	8002174 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2200      	movs	r2, #0
 800216a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	f7fe fca2 	bl	8000ab8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2224      	movs	r2, #36	; 0x24
 8002178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	68da      	ldr	r2, [r3, #12]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800218a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800218c:	6878      	ldr	r0, [r7, #4]
 800218e:	f000 f929 	bl	80023e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	691a      	ldr	r2, [r3, #16]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80021a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	695a      	ldr	r2, [r3, #20]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80021b0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	68da      	ldr	r2, [r3, #12]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80021c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2200      	movs	r2, #0
 80021c6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2220      	movs	r2, #32
 80021cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2220      	movs	r2, #32
 80021d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80021d8:	2300      	movs	r3, #0
}
 80021da:	4618      	mov	r0, r3
 80021dc:	3708      	adds	r7, #8
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}

080021e2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021e2:	b580      	push	{r7, lr}
 80021e4:	b08a      	sub	sp, #40	; 0x28
 80021e6:	af02      	add	r7, sp, #8
 80021e8:	60f8      	str	r0, [r7, #12]
 80021ea:	60b9      	str	r1, [r7, #8]
 80021ec:	603b      	str	r3, [r7, #0]
 80021ee:	4613      	mov	r3, r2
 80021f0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80021f2:	2300      	movs	r3, #0
 80021f4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021fc:	b2db      	uxtb	r3, r3
 80021fe:	2b20      	cmp	r3, #32
 8002200:	d17c      	bne.n	80022fc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d002      	beq.n	800220e <HAL_UART_Transmit+0x2c>
 8002208:	88fb      	ldrh	r3, [r7, #6]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d101      	bne.n	8002212 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e075      	b.n	80022fe <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002218:	2b01      	cmp	r3, #1
 800221a:	d101      	bne.n	8002220 <HAL_UART_Transmit+0x3e>
 800221c:	2302      	movs	r3, #2
 800221e:	e06e      	b.n	80022fe <HAL_UART_Transmit+0x11c>
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	2201      	movs	r2, #1
 8002224:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	2200      	movs	r2, #0
 800222c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	2221      	movs	r2, #33	; 0x21
 8002232:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002236:	f7fe fda9 	bl	8000d8c <HAL_GetTick>
 800223a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	88fa      	ldrh	r2, [r7, #6]
 8002240:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	88fa      	ldrh	r2, [r7, #6]
 8002246:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002250:	d108      	bne.n	8002264 <HAL_UART_Transmit+0x82>
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	691b      	ldr	r3, [r3, #16]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d104      	bne.n	8002264 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800225a:	2300      	movs	r3, #0
 800225c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	61bb      	str	r3, [r7, #24]
 8002262:	e003      	b.n	800226c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002268:	2300      	movs	r3, #0
 800226a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	2200      	movs	r2, #0
 8002270:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002274:	e02a      	b.n	80022cc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	9300      	str	r3, [sp, #0]
 800227a:	697b      	ldr	r3, [r7, #20]
 800227c:	2200      	movs	r2, #0
 800227e:	2180      	movs	r1, #128	; 0x80
 8002280:	68f8      	ldr	r0, [r7, #12]
 8002282:	f000 f840 	bl	8002306 <UART_WaitOnFlagUntilTimeout>
 8002286:	4603      	mov	r3, r0
 8002288:	2b00      	cmp	r3, #0
 800228a:	d001      	beq.n	8002290 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800228c:	2303      	movs	r3, #3
 800228e:	e036      	b.n	80022fe <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002290:	69fb      	ldr	r3, [r7, #28]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d10b      	bne.n	80022ae <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002296:	69bb      	ldr	r3, [r7, #24]
 8002298:	881b      	ldrh	r3, [r3, #0]
 800229a:	461a      	mov	r2, r3
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80022a4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80022a6:	69bb      	ldr	r3, [r7, #24]
 80022a8:	3302      	adds	r3, #2
 80022aa:	61bb      	str	r3, [r7, #24]
 80022ac:	e007      	b.n	80022be <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80022ae:	69fb      	ldr	r3, [r7, #28]
 80022b0:	781a      	ldrb	r2, [r3, #0]
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80022b8:	69fb      	ldr	r3, [r7, #28]
 80022ba:	3301      	adds	r3, #1
 80022bc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80022c2:	b29b      	uxth	r3, r3
 80022c4:	3b01      	subs	r3, #1
 80022c6:	b29a      	uxth	r2, r3
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80022d0:	b29b      	uxth	r3, r3
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d1cf      	bne.n	8002276 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	9300      	str	r3, [sp, #0]
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	2200      	movs	r2, #0
 80022de:	2140      	movs	r1, #64	; 0x40
 80022e0:	68f8      	ldr	r0, [r7, #12]
 80022e2:	f000 f810 	bl	8002306 <UART_WaitOnFlagUntilTimeout>
 80022e6:	4603      	mov	r3, r0
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d001      	beq.n	80022f0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80022ec:	2303      	movs	r3, #3
 80022ee:	e006      	b.n	80022fe <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	2220      	movs	r2, #32
 80022f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80022f8:	2300      	movs	r3, #0
 80022fa:	e000      	b.n	80022fe <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80022fc:	2302      	movs	r3, #2
  }
}
 80022fe:	4618      	mov	r0, r3
 8002300:	3720      	adds	r7, #32
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}

08002306 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002306:	b580      	push	{r7, lr}
 8002308:	b090      	sub	sp, #64	; 0x40
 800230a:	af00      	add	r7, sp, #0
 800230c:	60f8      	str	r0, [r7, #12]
 800230e:	60b9      	str	r1, [r7, #8]
 8002310:	603b      	str	r3, [r7, #0]
 8002312:	4613      	mov	r3, r2
 8002314:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002316:	e050      	b.n	80023ba <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002318:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800231a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800231e:	d04c      	beq.n	80023ba <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002320:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002322:	2b00      	cmp	r3, #0
 8002324:	d007      	beq.n	8002336 <UART_WaitOnFlagUntilTimeout+0x30>
 8002326:	f7fe fd31 	bl	8000d8c <HAL_GetTick>
 800232a:	4602      	mov	r2, r0
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	1ad3      	subs	r3, r2, r3
 8002330:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002332:	429a      	cmp	r2, r3
 8002334:	d241      	bcs.n	80023ba <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	330c      	adds	r3, #12
 800233c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800233e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002340:	e853 3f00 	ldrex	r3, [r3]
 8002344:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002348:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800234c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	330c      	adds	r3, #12
 8002354:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002356:	637a      	str	r2, [r7, #52]	; 0x34
 8002358:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800235a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800235c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800235e:	e841 2300 	strex	r3, r2, [r1]
 8002362:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002366:	2b00      	cmp	r3, #0
 8002368:	d1e5      	bne.n	8002336 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	3314      	adds	r3, #20
 8002370:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	e853 3f00 	ldrex	r3, [r3]
 8002378:	613b      	str	r3, [r7, #16]
   return(result);
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	f023 0301 	bic.w	r3, r3, #1
 8002380:	63bb      	str	r3, [r7, #56]	; 0x38
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	3314      	adds	r3, #20
 8002388:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800238a:	623a      	str	r2, [r7, #32]
 800238c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800238e:	69f9      	ldr	r1, [r7, #28]
 8002390:	6a3a      	ldr	r2, [r7, #32]
 8002392:	e841 2300 	strex	r3, r2, [r1]
 8002396:	61bb      	str	r3, [r7, #24]
   return(result);
 8002398:	69bb      	ldr	r3, [r7, #24]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d1e5      	bne.n	800236a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	2220      	movs	r2, #32
 80023a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	2220      	movs	r2, #32
 80023aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	2200      	movs	r2, #0
 80023b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80023b6:	2303      	movs	r3, #3
 80023b8:	e00f      	b.n	80023da <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	681a      	ldr	r2, [r3, #0]
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	4013      	ands	r3, r2
 80023c4:	68ba      	ldr	r2, [r7, #8]
 80023c6:	429a      	cmp	r2, r3
 80023c8:	bf0c      	ite	eq
 80023ca:	2301      	moveq	r3, #1
 80023cc:	2300      	movne	r3, #0
 80023ce:	b2db      	uxtb	r3, r3
 80023d0:	461a      	mov	r2, r3
 80023d2:	79fb      	ldrb	r3, [r7, #7]
 80023d4:	429a      	cmp	r2, r3
 80023d6:	d09f      	beq.n	8002318 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80023d8:	2300      	movs	r3, #0
}
 80023da:	4618      	mov	r0, r3
 80023dc:	3740      	adds	r7, #64	; 0x40
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}
	...

080023e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80023e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80023e8:	b09f      	sub	sp, #124	; 0x7c
 80023ea:	af00      	add	r7, sp, #0
 80023ec:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80023ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	691b      	ldr	r3, [r3, #16]
 80023f4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80023f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023fa:	68d9      	ldr	r1, [r3, #12]
 80023fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	ea40 0301 	orr.w	r3, r0, r1
 8002404:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002406:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002408:	689a      	ldr	r2, [r3, #8]
 800240a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800240c:	691b      	ldr	r3, [r3, #16]
 800240e:	431a      	orrs	r2, r3
 8002410:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002412:	695b      	ldr	r3, [r3, #20]
 8002414:	431a      	orrs	r2, r3
 8002416:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002418:	69db      	ldr	r3, [r3, #28]
 800241a:	4313      	orrs	r3, r2
 800241c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800241e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002428:	f021 010c 	bic.w	r1, r1, #12
 800242c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002432:	430b      	orrs	r3, r1
 8002434:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002436:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	695b      	ldr	r3, [r3, #20]
 800243c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002440:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002442:	6999      	ldr	r1, [r3, #24]
 8002444:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002446:	681a      	ldr	r2, [r3, #0]
 8002448:	ea40 0301 	orr.w	r3, r0, r1
 800244c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800244e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002450:	681a      	ldr	r2, [r3, #0]
 8002452:	4bc5      	ldr	r3, [pc, #788]	; (8002768 <UART_SetConfig+0x384>)
 8002454:	429a      	cmp	r2, r3
 8002456:	d004      	beq.n	8002462 <UART_SetConfig+0x7e>
 8002458:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	4bc3      	ldr	r3, [pc, #780]	; (800276c <UART_SetConfig+0x388>)
 800245e:	429a      	cmp	r2, r3
 8002460:	d103      	bne.n	800246a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002462:	f7ff fb7d 	bl	8001b60 <HAL_RCC_GetPCLK2Freq>
 8002466:	6778      	str	r0, [r7, #116]	; 0x74
 8002468:	e002      	b.n	8002470 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800246a:	f7ff fb65 	bl	8001b38 <HAL_RCC_GetPCLK1Freq>
 800246e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002470:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002472:	69db      	ldr	r3, [r3, #28]
 8002474:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002478:	f040 80b6 	bne.w	80025e8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800247c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800247e:	461c      	mov	r4, r3
 8002480:	f04f 0500 	mov.w	r5, #0
 8002484:	4622      	mov	r2, r4
 8002486:	462b      	mov	r3, r5
 8002488:	1891      	adds	r1, r2, r2
 800248a:	6439      	str	r1, [r7, #64]	; 0x40
 800248c:	415b      	adcs	r3, r3
 800248e:	647b      	str	r3, [r7, #68]	; 0x44
 8002490:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002494:	1912      	adds	r2, r2, r4
 8002496:	eb45 0303 	adc.w	r3, r5, r3
 800249a:	f04f 0000 	mov.w	r0, #0
 800249e:	f04f 0100 	mov.w	r1, #0
 80024a2:	00d9      	lsls	r1, r3, #3
 80024a4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80024a8:	00d0      	lsls	r0, r2, #3
 80024aa:	4602      	mov	r2, r0
 80024ac:	460b      	mov	r3, r1
 80024ae:	1911      	adds	r1, r2, r4
 80024b0:	6639      	str	r1, [r7, #96]	; 0x60
 80024b2:	416b      	adcs	r3, r5
 80024b4:	667b      	str	r3, [r7, #100]	; 0x64
 80024b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	461a      	mov	r2, r3
 80024bc:	f04f 0300 	mov.w	r3, #0
 80024c0:	1891      	adds	r1, r2, r2
 80024c2:	63b9      	str	r1, [r7, #56]	; 0x38
 80024c4:	415b      	adcs	r3, r3
 80024c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80024c8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80024cc:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80024d0:	f7fd fed6 	bl	8000280 <__aeabi_uldivmod>
 80024d4:	4602      	mov	r2, r0
 80024d6:	460b      	mov	r3, r1
 80024d8:	4ba5      	ldr	r3, [pc, #660]	; (8002770 <UART_SetConfig+0x38c>)
 80024da:	fba3 2302 	umull	r2, r3, r3, r2
 80024de:	095b      	lsrs	r3, r3, #5
 80024e0:	011e      	lsls	r6, r3, #4
 80024e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024e4:	461c      	mov	r4, r3
 80024e6:	f04f 0500 	mov.w	r5, #0
 80024ea:	4622      	mov	r2, r4
 80024ec:	462b      	mov	r3, r5
 80024ee:	1891      	adds	r1, r2, r2
 80024f0:	6339      	str	r1, [r7, #48]	; 0x30
 80024f2:	415b      	adcs	r3, r3
 80024f4:	637b      	str	r3, [r7, #52]	; 0x34
 80024f6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80024fa:	1912      	adds	r2, r2, r4
 80024fc:	eb45 0303 	adc.w	r3, r5, r3
 8002500:	f04f 0000 	mov.w	r0, #0
 8002504:	f04f 0100 	mov.w	r1, #0
 8002508:	00d9      	lsls	r1, r3, #3
 800250a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800250e:	00d0      	lsls	r0, r2, #3
 8002510:	4602      	mov	r2, r0
 8002512:	460b      	mov	r3, r1
 8002514:	1911      	adds	r1, r2, r4
 8002516:	65b9      	str	r1, [r7, #88]	; 0x58
 8002518:	416b      	adcs	r3, r5
 800251a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800251c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	461a      	mov	r2, r3
 8002522:	f04f 0300 	mov.w	r3, #0
 8002526:	1891      	adds	r1, r2, r2
 8002528:	62b9      	str	r1, [r7, #40]	; 0x28
 800252a:	415b      	adcs	r3, r3
 800252c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800252e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002532:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002536:	f7fd fea3 	bl	8000280 <__aeabi_uldivmod>
 800253a:	4602      	mov	r2, r0
 800253c:	460b      	mov	r3, r1
 800253e:	4b8c      	ldr	r3, [pc, #560]	; (8002770 <UART_SetConfig+0x38c>)
 8002540:	fba3 1302 	umull	r1, r3, r3, r2
 8002544:	095b      	lsrs	r3, r3, #5
 8002546:	2164      	movs	r1, #100	; 0x64
 8002548:	fb01 f303 	mul.w	r3, r1, r3
 800254c:	1ad3      	subs	r3, r2, r3
 800254e:	00db      	lsls	r3, r3, #3
 8002550:	3332      	adds	r3, #50	; 0x32
 8002552:	4a87      	ldr	r2, [pc, #540]	; (8002770 <UART_SetConfig+0x38c>)
 8002554:	fba2 2303 	umull	r2, r3, r2, r3
 8002558:	095b      	lsrs	r3, r3, #5
 800255a:	005b      	lsls	r3, r3, #1
 800255c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002560:	441e      	add	r6, r3
 8002562:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002564:	4618      	mov	r0, r3
 8002566:	f04f 0100 	mov.w	r1, #0
 800256a:	4602      	mov	r2, r0
 800256c:	460b      	mov	r3, r1
 800256e:	1894      	adds	r4, r2, r2
 8002570:	623c      	str	r4, [r7, #32]
 8002572:	415b      	adcs	r3, r3
 8002574:	627b      	str	r3, [r7, #36]	; 0x24
 8002576:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800257a:	1812      	adds	r2, r2, r0
 800257c:	eb41 0303 	adc.w	r3, r1, r3
 8002580:	f04f 0400 	mov.w	r4, #0
 8002584:	f04f 0500 	mov.w	r5, #0
 8002588:	00dd      	lsls	r5, r3, #3
 800258a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800258e:	00d4      	lsls	r4, r2, #3
 8002590:	4622      	mov	r2, r4
 8002592:	462b      	mov	r3, r5
 8002594:	1814      	adds	r4, r2, r0
 8002596:	653c      	str	r4, [r7, #80]	; 0x50
 8002598:	414b      	adcs	r3, r1
 800259a:	657b      	str	r3, [r7, #84]	; 0x54
 800259c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	461a      	mov	r2, r3
 80025a2:	f04f 0300 	mov.w	r3, #0
 80025a6:	1891      	adds	r1, r2, r2
 80025a8:	61b9      	str	r1, [r7, #24]
 80025aa:	415b      	adcs	r3, r3
 80025ac:	61fb      	str	r3, [r7, #28]
 80025ae:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80025b2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80025b6:	f7fd fe63 	bl	8000280 <__aeabi_uldivmod>
 80025ba:	4602      	mov	r2, r0
 80025bc:	460b      	mov	r3, r1
 80025be:	4b6c      	ldr	r3, [pc, #432]	; (8002770 <UART_SetConfig+0x38c>)
 80025c0:	fba3 1302 	umull	r1, r3, r3, r2
 80025c4:	095b      	lsrs	r3, r3, #5
 80025c6:	2164      	movs	r1, #100	; 0x64
 80025c8:	fb01 f303 	mul.w	r3, r1, r3
 80025cc:	1ad3      	subs	r3, r2, r3
 80025ce:	00db      	lsls	r3, r3, #3
 80025d0:	3332      	adds	r3, #50	; 0x32
 80025d2:	4a67      	ldr	r2, [pc, #412]	; (8002770 <UART_SetConfig+0x38c>)
 80025d4:	fba2 2303 	umull	r2, r3, r2, r3
 80025d8:	095b      	lsrs	r3, r3, #5
 80025da:	f003 0207 	and.w	r2, r3, #7
 80025de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4432      	add	r2, r6
 80025e4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80025e6:	e0b9      	b.n	800275c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80025e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80025ea:	461c      	mov	r4, r3
 80025ec:	f04f 0500 	mov.w	r5, #0
 80025f0:	4622      	mov	r2, r4
 80025f2:	462b      	mov	r3, r5
 80025f4:	1891      	adds	r1, r2, r2
 80025f6:	6139      	str	r1, [r7, #16]
 80025f8:	415b      	adcs	r3, r3
 80025fa:	617b      	str	r3, [r7, #20]
 80025fc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002600:	1912      	adds	r2, r2, r4
 8002602:	eb45 0303 	adc.w	r3, r5, r3
 8002606:	f04f 0000 	mov.w	r0, #0
 800260a:	f04f 0100 	mov.w	r1, #0
 800260e:	00d9      	lsls	r1, r3, #3
 8002610:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002614:	00d0      	lsls	r0, r2, #3
 8002616:	4602      	mov	r2, r0
 8002618:	460b      	mov	r3, r1
 800261a:	eb12 0804 	adds.w	r8, r2, r4
 800261e:	eb43 0905 	adc.w	r9, r3, r5
 8002622:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	4618      	mov	r0, r3
 8002628:	f04f 0100 	mov.w	r1, #0
 800262c:	f04f 0200 	mov.w	r2, #0
 8002630:	f04f 0300 	mov.w	r3, #0
 8002634:	008b      	lsls	r3, r1, #2
 8002636:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800263a:	0082      	lsls	r2, r0, #2
 800263c:	4640      	mov	r0, r8
 800263e:	4649      	mov	r1, r9
 8002640:	f7fd fe1e 	bl	8000280 <__aeabi_uldivmod>
 8002644:	4602      	mov	r2, r0
 8002646:	460b      	mov	r3, r1
 8002648:	4b49      	ldr	r3, [pc, #292]	; (8002770 <UART_SetConfig+0x38c>)
 800264a:	fba3 2302 	umull	r2, r3, r3, r2
 800264e:	095b      	lsrs	r3, r3, #5
 8002650:	011e      	lsls	r6, r3, #4
 8002652:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002654:	4618      	mov	r0, r3
 8002656:	f04f 0100 	mov.w	r1, #0
 800265a:	4602      	mov	r2, r0
 800265c:	460b      	mov	r3, r1
 800265e:	1894      	adds	r4, r2, r2
 8002660:	60bc      	str	r4, [r7, #8]
 8002662:	415b      	adcs	r3, r3
 8002664:	60fb      	str	r3, [r7, #12]
 8002666:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800266a:	1812      	adds	r2, r2, r0
 800266c:	eb41 0303 	adc.w	r3, r1, r3
 8002670:	f04f 0400 	mov.w	r4, #0
 8002674:	f04f 0500 	mov.w	r5, #0
 8002678:	00dd      	lsls	r5, r3, #3
 800267a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800267e:	00d4      	lsls	r4, r2, #3
 8002680:	4622      	mov	r2, r4
 8002682:	462b      	mov	r3, r5
 8002684:	1814      	adds	r4, r2, r0
 8002686:	64bc      	str	r4, [r7, #72]	; 0x48
 8002688:	414b      	adcs	r3, r1
 800268a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800268c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	4618      	mov	r0, r3
 8002692:	f04f 0100 	mov.w	r1, #0
 8002696:	f04f 0200 	mov.w	r2, #0
 800269a:	f04f 0300 	mov.w	r3, #0
 800269e:	008b      	lsls	r3, r1, #2
 80026a0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80026a4:	0082      	lsls	r2, r0, #2
 80026a6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80026aa:	f7fd fde9 	bl	8000280 <__aeabi_uldivmod>
 80026ae:	4602      	mov	r2, r0
 80026b0:	460b      	mov	r3, r1
 80026b2:	4b2f      	ldr	r3, [pc, #188]	; (8002770 <UART_SetConfig+0x38c>)
 80026b4:	fba3 1302 	umull	r1, r3, r3, r2
 80026b8:	095b      	lsrs	r3, r3, #5
 80026ba:	2164      	movs	r1, #100	; 0x64
 80026bc:	fb01 f303 	mul.w	r3, r1, r3
 80026c0:	1ad3      	subs	r3, r2, r3
 80026c2:	011b      	lsls	r3, r3, #4
 80026c4:	3332      	adds	r3, #50	; 0x32
 80026c6:	4a2a      	ldr	r2, [pc, #168]	; (8002770 <UART_SetConfig+0x38c>)
 80026c8:	fba2 2303 	umull	r2, r3, r2, r3
 80026cc:	095b      	lsrs	r3, r3, #5
 80026ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80026d2:	441e      	add	r6, r3
 80026d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80026d6:	4618      	mov	r0, r3
 80026d8:	f04f 0100 	mov.w	r1, #0
 80026dc:	4602      	mov	r2, r0
 80026de:	460b      	mov	r3, r1
 80026e0:	1894      	adds	r4, r2, r2
 80026e2:	603c      	str	r4, [r7, #0]
 80026e4:	415b      	adcs	r3, r3
 80026e6:	607b      	str	r3, [r7, #4]
 80026e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80026ec:	1812      	adds	r2, r2, r0
 80026ee:	eb41 0303 	adc.w	r3, r1, r3
 80026f2:	f04f 0400 	mov.w	r4, #0
 80026f6:	f04f 0500 	mov.w	r5, #0
 80026fa:	00dd      	lsls	r5, r3, #3
 80026fc:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002700:	00d4      	lsls	r4, r2, #3
 8002702:	4622      	mov	r2, r4
 8002704:	462b      	mov	r3, r5
 8002706:	eb12 0a00 	adds.w	sl, r2, r0
 800270a:	eb43 0b01 	adc.w	fp, r3, r1
 800270e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	4618      	mov	r0, r3
 8002714:	f04f 0100 	mov.w	r1, #0
 8002718:	f04f 0200 	mov.w	r2, #0
 800271c:	f04f 0300 	mov.w	r3, #0
 8002720:	008b      	lsls	r3, r1, #2
 8002722:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002726:	0082      	lsls	r2, r0, #2
 8002728:	4650      	mov	r0, sl
 800272a:	4659      	mov	r1, fp
 800272c:	f7fd fda8 	bl	8000280 <__aeabi_uldivmod>
 8002730:	4602      	mov	r2, r0
 8002732:	460b      	mov	r3, r1
 8002734:	4b0e      	ldr	r3, [pc, #56]	; (8002770 <UART_SetConfig+0x38c>)
 8002736:	fba3 1302 	umull	r1, r3, r3, r2
 800273a:	095b      	lsrs	r3, r3, #5
 800273c:	2164      	movs	r1, #100	; 0x64
 800273e:	fb01 f303 	mul.w	r3, r1, r3
 8002742:	1ad3      	subs	r3, r2, r3
 8002744:	011b      	lsls	r3, r3, #4
 8002746:	3332      	adds	r3, #50	; 0x32
 8002748:	4a09      	ldr	r2, [pc, #36]	; (8002770 <UART_SetConfig+0x38c>)
 800274a:	fba2 2303 	umull	r2, r3, r2, r3
 800274e:	095b      	lsrs	r3, r3, #5
 8002750:	f003 020f 	and.w	r2, r3, #15
 8002754:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4432      	add	r2, r6
 800275a:	609a      	str	r2, [r3, #8]
}
 800275c:	bf00      	nop
 800275e:	377c      	adds	r7, #124	; 0x7c
 8002760:	46bd      	mov	sp, r7
 8002762:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002766:	bf00      	nop
 8002768:	40011000 	.word	0x40011000
 800276c:	40011400 	.word	0x40011400
 8002770:	51eb851f 	.word	0x51eb851f

08002774 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002774:	b480      	push	{r7}
 8002776:	b083      	sub	sp, #12
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	f103 0208 	add.w	r2, r3, #8
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	f04f 32ff 	mov.w	r2, #4294967295
 800278c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	f103 0208 	add.w	r2, r3, #8
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	f103 0208 	add.w	r2, r3, #8
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2200      	movs	r2, #0
 80027a6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80027a8:	bf00      	nop
 80027aa:	370c      	adds	r7, #12
 80027ac:	46bd      	mov	sp, r7
 80027ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b2:	4770      	bx	lr

080027b4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80027b4:	b480      	push	{r7}
 80027b6:	b083      	sub	sp, #12
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2200      	movs	r2, #0
 80027c0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80027c2:	bf00      	nop
 80027c4:	370c      	adds	r7, #12
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr

080027ce <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80027ce:	b480      	push	{r7}
 80027d0:	b085      	sub	sp, #20
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	6078      	str	r0, [r7, #4]
 80027d6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	68fa      	ldr	r2, [r7, #12]
 80027e2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	689a      	ldr	r2, [r3, #8]
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	683a      	ldr	r2, [r7, #0]
 80027f2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	683a      	ldr	r2, [r7, #0]
 80027f8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	687a      	ldr	r2, [r7, #4]
 80027fe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	1c5a      	adds	r2, r3, #1
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	601a      	str	r2, [r3, #0]
}
 800280a:	bf00      	nop
 800280c:	3714      	adds	r7, #20
 800280e:	46bd      	mov	sp, r7
 8002810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002814:	4770      	bx	lr

08002816 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002816:	b480      	push	{r7}
 8002818:	b085      	sub	sp, #20
 800281a:	af00      	add	r7, sp, #0
 800281c:	6078      	str	r0, [r7, #4]
 800281e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	f1b3 3fff 	cmp.w	r3, #4294967295
 800282c:	d103      	bne.n	8002836 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	691b      	ldr	r3, [r3, #16]
 8002832:	60fb      	str	r3, [r7, #12]
 8002834:	e00c      	b.n	8002850 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	3308      	adds	r3, #8
 800283a:	60fb      	str	r3, [r7, #12]
 800283c:	e002      	b.n	8002844 <vListInsert+0x2e>
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	60fb      	str	r3, [r7, #12]
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	68ba      	ldr	r2, [r7, #8]
 800284c:	429a      	cmp	r2, r3
 800284e:	d2f6      	bcs.n	800283e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	685a      	ldr	r2, [r3, #4]
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	683a      	ldr	r2, [r7, #0]
 800285e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	68fa      	ldr	r2, [r7, #12]
 8002864:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	683a      	ldr	r2, [r7, #0]
 800286a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	687a      	ldr	r2, [r7, #4]
 8002870:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	1c5a      	adds	r2, r3, #1
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	601a      	str	r2, [r3, #0]
}
 800287c:	bf00      	nop
 800287e:	3714      	adds	r7, #20
 8002880:	46bd      	mov	sp, r7
 8002882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002886:	4770      	bx	lr

08002888 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002888:	b480      	push	{r7}
 800288a:	b085      	sub	sp, #20
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	691b      	ldr	r3, [r3, #16]
 8002894:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	687a      	ldr	r2, [r7, #4]
 800289c:	6892      	ldr	r2, [r2, #8]
 800289e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	687a      	ldr	r2, [r7, #4]
 80028a6:	6852      	ldr	r2, [r2, #4]
 80028a8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	687a      	ldr	r2, [r7, #4]
 80028b0:	429a      	cmp	r2, r3
 80028b2:	d103      	bne.n	80028bc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	689a      	ldr	r2, [r3, #8]
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2200      	movs	r2, #0
 80028c0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	1e5a      	subs	r2, r3, #1
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	3714      	adds	r7, #20
 80028d4:	46bd      	mov	sp, r7
 80028d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028da:	4770      	bx	lr

080028dc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b084      	sub	sp, #16
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
 80028e4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d10a      	bne.n	8002906 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80028f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028f4:	f383 8811 	msr	BASEPRI, r3
 80028f8:	f3bf 8f6f 	isb	sy
 80028fc:	f3bf 8f4f 	dsb	sy
 8002900:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002902:	bf00      	nop
 8002904:	e7fe      	b.n	8002904 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002906:	f001 fb95 	bl	8004034 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002912:	68f9      	ldr	r1, [r7, #12]
 8002914:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002916:	fb01 f303 	mul.w	r3, r1, r3
 800291a:	441a      	add	r2, r3
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	2200      	movs	r2, #0
 8002924:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681a      	ldr	r2, [r3, #0]
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002936:	3b01      	subs	r3, #1
 8002938:	68f9      	ldr	r1, [r7, #12]
 800293a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800293c:	fb01 f303 	mul.w	r3, r1, r3
 8002940:	441a      	add	r2, r3
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	22ff      	movs	r2, #255	; 0xff
 800294a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	22ff      	movs	r2, #255	; 0xff
 8002952:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d114      	bne.n	8002986 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	691b      	ldr	r3, [r3, #16]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d01a      	beq.n	800299a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	3310      	adds	r3, #16
 8002968:	4618      	mov	r0, r3
 800296a:	f000 ff71 	bl	8003850 <xTaskRemoveFromEventList>
 800296e:	4603      	mov	r3, r0
 8002970:	2b00      	cmp	r3, #0
 8002972:	d012      	beq.n	800299a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002974:	4b0c      	ldr	r3, [pc, #48]	; (80029a8 <xQueueGenericReset+0xcc>)
 8002976:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800297a:	601a      	str	r2, [r3, #0]
 800297c:	f3bf 8f4f 	dsb	sy
 8002980:	f3bf 8f6f 	isb	sy
 8002984:	e009      	b.n	800299a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	3310      	adds	r3, #16
 800298a:	4618      	mov	r0, r3
 800298c:	f7ff fef2 	bl	8002774 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	3324      	adds	r3, #36	; 0x24
 8002994:	4618      	mov	r0, r3
 8002996:	f7ff feed 	bl	8002774 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800299a:	f001 fb7b 	bl	8004094 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800299e:	2301      	movs	r3, #1
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	3710      	adds	r7, #16
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}
 80029a8:	e000ed04 	.word	0xe000ed04

080029ac <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b08a      	sub	sp, #40	; 0x28
 80029b0:	af02      	add	r7, sp, #8
 80029b2:	60f8      	str	r0, [r7, #12]
 80029b4:	60b9      	str	r1, [r7, #8]
 80029b6:	4613      	mov	r3, r2
 80029b8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d10a      	bne.n	80029d6 <xQueueGenericCreate+0x2a>
	__asm volatile
 80029c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029c4:	f383 8811 	msr	BASEPRI, r3
 80029c8:	f3bf 8f6f 	isb	sy
 80029cc:	f3bf 8f4f 	dsb	sy
 80029d0:	613b      	str	r3, [r7, #16]
}
 80029d2:	bf00      	nop
 80029d4:	e7fe      	b.n	80029d4 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	68ba      	ldr	r2, [r7, #8]
 80029da:	fb02 f303 	mul.w	r3, r2, r3
 80029de:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80029e0:	69fb      	ldr	r3, [r7, #28]
 80029e2:	3348      	adds	r3, #72	; 0x48
 80029e4:	4618      	mov	r0, r3
 80029e6:	f001 fc07 	bl	80041f8 <pvPortMalloc>
 80029ea:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80029ec:	69bb      	ldr	r3, [r7, #24]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d011      	beq.n	8002a16 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80029f2:	69bb      	ldr	r3, [r7, #24]
 80029f4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	3348      	adds	r3, #72	; 0x48
 80029fa:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80029fc:	69bb      	ldr	r3, [r7, #24]
 80029fe:	2200      	movs	r2, #0
 8002a00:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002a04:	79fa      	ldrb	r2, [r7, #7]
 8002a06:	69bb      	ldr	r3, [r7, #24]
 8002a08:	9300      	str	r3, [sp, #0]
 8002a0a:	4613      	mov	r3, r2
 8002a0c:	697a      	ldr	r2, [r7, #20]
 8002a0e:	68b9      	ldr	r1, [r7, #8]
 8002a10:	68f8      	ldr	r0, [r7, #12]
 8002a12:	f000 f805 	bl	8002a20 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002a16:	69bb      	ldr	r3, [r7, #24]
	}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	3720      	adds	r7, #32
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}

08002a20 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b084      	sub	sp, #16
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	60f8      	str	r0, [r7, #12]
 8002a28:	60b9      	str	r1, [r7, #8]
 8002a2a:	607a      	str	r2, [r7, #4]
 8002a2c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d103      	bne.n	8002a3c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002a34:	69bb      	ldr	r3, [r7, #24]
 8002a36:	69ba      	ldr	r2, [r7, #24]
 8002a38:	601a      	str	r2, [r3, #0]
 8002a3a:	e002      	b.n	8002a42 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002a3c:	69bb      	ldr	r3, [r7, #24]
 8002a3e:	687a      	ldr	r2, [r7, #4]
 8002a40:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002a42:	69bb      	ldr	r3, [r7, #24]
 8002a44:	68fa      	ldr	r2, [r7, #12]
 8002a46:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002a48:	69bb      	ldr	r3, [r7, #24]
 8002a4a:	68ba      	ldr	r2, [r7, #8]
 8002a4c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002a4e:	2101      	movs	r1, #1
 8002a50:	69b8      	ldr	r0, [r7, #24]
 8002a52:	f7ff ff43 	bl	80028dc <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002a56:	bf00      	nop
 8002a58:	3710      	adds	r7, #16
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}
	...

08002a60 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b08e      	sub	sp, #56	; 0x38
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	60f8      	str	r0, [r7, #12]
 8002a68:	60b9      	str	r1, [r7, #8]
 8002a6a:	607a      	str	r2, [r7, #4]
 8002a6c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d10a      	bne.n	8002a92 <xQueueGenericSend+0x32>
	__asm volatile
 8002a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a80:	f383 8811 	msr	BASEPRI, r3
 8002a84:	f3bf 8f6f 	isb	sy
 8002a88:	f3bf 8f4f 	dsb	sy
 8002a8c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002a8e:	bf00      	nop
 8002a90:	e7fe      	b.n	8002a90 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d103      	bne.n	8002aa0 <xQueueGenericSend+0x40>
 8002a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d101      	bne.n	8002aa4 <xQueueGenericSend+0x44>
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	e000      	b.n	8002aa6 <xQueueGenericSend+0x46>
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d10a      	bne.n	8002ac0 <xQueueGenericSend+0x60>
	__asm volatile
 8002aaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002aae:	f383 8811 	msr	BASEPRI, r3
 8002ab2:	f3bf 8f6f 	isb	sy
 8002ab6:	f3bf 8f4f 	dsb	sy
 8002aba:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002abc:	bf00      	nop
 8002abe:	e7fe      	b.n	8002abe <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	2b02      	cmp	r3, #2
 8002ac4:	d103      	bne.n	8002ace <xQueueGenericSend+0x6e>
 8002ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ac8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aca:	2b01      	cmp	r3, #1
 8002acc:	d101      	bne.n	8002ad2 <xQueueGenericSend+0x72>
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e000      	b.n	8002ad4 <xQueueGenericSend+0x74>
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d10a      	bne.n	8002aee <xQueueGenericSend+0x8e>
	__asm volatile
 8002ad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002adc:	f383 8811 	msr	BASEPRI, r3
 8002ae0:	f3bf 8f6f 	isb	sy
 8002ae4:	f3bf 8f4f 	dsb	sy
 8002ae8:	623b      	str	r3, [r7, #32]
}
 8002aea:	bf00      	nop
 8002aec:	e7fe      	b.n	8002aec <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002aee:	f001 f86b 	bl	8003bc8 <xTaskGetSchedulerState>
 8002af2:	4603      	mov	r3, r0
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d102      	bne.n	8002afe <xQueueGenericSend+0x9e>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d101      	bne.n	8002b02 <xQueueGenericSend+0xa2>
 8002afe:	2301      	movs	r3, #1
 8002b00:	e000      	b.n	8002b04 <xQueueGenericSend+0xa4>
 8002b02:	2300      	movs	r3, #0
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d10a      	bne.n	8002b1e <xQueueGenericSend+0xbe>
	__asm volatile
 8002b08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b0c:	f383 8811 	msr	BASEPRI, r3
 8002b10:	f3bf 8f6f 	isb	sy
 8002b14:	f3bf 8f4f 	dsb	sy
 8002b18:	61fb      	str	r3, [r7, #28]
}
 8002b1a:	bf00      	nop
 8002b1c:	e7fe      	b.n	8002b1c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002b1e:	f001 fa89 	bl	8004034 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b2a:	429a      	cmp	r2, r3
 8002b2c:	d302      	bcc.n	8002b34 <xQueueGenericSend+0xd4>
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	2b02      	cmp	r3, #2
 8002b32:	d129      	bne.n	8002b88 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002b34:	683a      	ldr	r2, [r7, #0]
 8002b36:	68b9      	ldr	r1, [r7, #8]
 8002b38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002b3a:	f000 f96f 	bl	8002e1c <prvCopyDataToQueue>
 8002b3e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002b40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d010      	beq.n	8002b6a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002b48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b4a:	3324      	adds	r3, #36	; 0x24
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f000 fe7f 	bl	8003850 <xTaskRemoveFromEventList>
 8002b52:	4603      	mov	r3, r0
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d013      	beq.n	8002b80 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002b58:	4b3f      	ldr	r3, [pc, #252]	; (8002c58 <xQueueGenericSend+0x1f8>)
 8002b5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b5e:	601a      	str	r2, [r3, #0]
 8002b60:	f3bf 8f4f 	dsb	sy
 8002b64:	f3bf 8f6f 	isb	sy
 8002b68:	e00a      	b.n	8002b80 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d007      	beq.n	8002b80 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002b70:	4b39      	ldr	r3, [pc, #228]	; (8002c58 <xQueueGenericSend+0x1f8>)
 8002b72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b76:	601a      	str	r2, [r3, #0]
 8002b78:	f3bf 8f4f 	dsb	sy
 8002b7c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002b80:	f001 fa88 	bl	8004094 <vPortExitCritical>
				return pdPASS;
 8002b84:	2301      	movs	r3, #1
 8002b86:	e063      	b.n	8002c50 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d103      	bne.n	8002b96 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002b8e:	f001 fa81 	bl	8004094 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002b92:	2300      	movs	r3, #0
 8002b94:	e05c      	b.n	8002c50 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002b96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d106      	bne.n	8002baa <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002b9c:	f107 0314 	add.w	r3, r7, #20
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f000 feb7 	bl	8003914 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002baa:	f001 fa73 	bl	8004094 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002bae:	f000 fc6d 	bl	800348c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002bb2:	f001 fa3f 	bl	8004034 <vPortEnterCritical>
 8002bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bb8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002bbc:	b25b      	sxtb	r3, r3
 8002bbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bc2:	d103      	bne.n	8002bcc <xQueueGenericSend+0x16c>
 8002bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002bd2:	b25b      	sxtb	r3, r3
 8002bd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bd8:	d103      	bne.n	8002be2 <xQueueGenericSend+0x182>
 8002bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bdc:	2200      	movs	r2, #0
 8002bde:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002be2:	f001 fa57 	bl	8004094 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002be6:	1d3a      	adds	r2, r7, #4
 8002be8:	f107 0314 	add.w	r3, r7, #20
 8002bec:	4611      	mov	r1, r2
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f000 fea6 	bl	8003940 <xTaskCheckForTimeOut>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d124      	bne.n	8002c44 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002bfa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002bfc:	f000 fa06 	bl	800300c <prvIsQueueFull>
 8002c00:	4603      	mov	r3, r0
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d018      	beq.n	8002c38 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c08:	3310      	adds	r3, #16
 8002c0a:	687a      	ldr	r2, [r7, #4]
 8002c0c:	4611      	mov	r1, r2
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f000 fdfa 	bl	8003808 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002c14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002c16:	f000 f991 	bl	8002f3c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002c1a:	f000 fc45 	bl	80034a8 <xTaskResumeAll>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	f47f af7c 	bne.w	8002b1e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002c26:	4b0c      	ldr	r3, [pc, #48]	; (8002c58 <xQueueGenericSend+0x1f8>)
 8002c28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c2c:	601a      	str	r2, [r3, #0]
 8002c2e:	f3bf 8f4f 	dsb	sy
 8002c32:	f3bf 8f6f 	isb	sy
 8002c36:	e772      	b.n	8002b1e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002c38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002c3a:	f000 f97f 	bl	8002f3c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002c3e:	f000 fc33 	bl	80034a8 <xTaskResumeAll>
 8002c42:	e76c      	b.n	8002b1e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002c44:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002c46:	f000 f979 	bl	8002f3c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002c4a:	f000 fc2d 	bl	80034a8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002c4e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	3738      	adds	r7, #56	; 0x38
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}
 8002c58:	e000ed04 	.word	0xe000ed04

08002c5c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b08c      	sub	sp, #48	; 0x30
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	60f8      	str	r0, [r7, #12]
 8002c64:	60b9      	str	r1, [r7, #8]
 8002c66:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002c70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d10a      	bne.n	8002c8c <xQueueReceive+0x30>
	__asm volatile
 8002c76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c7a:	f383 8811 	msr	BASEPRI, r3
 8002c7e:	f3bf 8f6f 	isb	sy
 8002c82:	f3bf 8f4f 	dsb	sy
 8002c86:	623b      	str	r3, [r7, #32]
}
 8002c88:	bf00      	nop
 8002c8a:	e7fe      	b.n	8002c8a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d103      	bne.n	8002c9a <xQueueReceive+0x3e>
 8002c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d101      	bne.n	8002c9e <xQueueReceive+0x42>
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e000      	b.n	8002ca0 <xQueueReceive+0x44>
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d10a      	bne.n	8002cba <xQueueReceive+0x5e>
	__asm volatile
 8002ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ca8:	f383 8811 	msr	BASEPRI, r3
 8002cac:	f3bf 8f6f 	isb	sy
 8002cb0:	f3bf 8f4f 	dsb	sy
 8002cb4:	61fb      	str	r3, [r7, #28]
}
 8002cb6:	bf00      	nop
 8002cb8:	e7fe      	b.n	8002cb8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002cba:	f000 ff85 	bl	8003bc8 <xTaskGetSchedulerState>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d102      	bne.n	8002cca <xQueueReceive+0x6e>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d101      	bne.n	8002cce <xQueueReceive+0x72>
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e000      	b.n	8002cd0 <xQueueReceive+0x74>
 8002cce:	2300      	movs	r3, #0
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d10a      	bne.n	8002cea <xQueueReceive+0x8e>
	__asm volatile
 8002cd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cd8:	f383 8811 	msr	BASEPRI, r3
 8002cdc:	f3bf 8f6f 	isb	sy
 8002ce0:	f3bf 8f4f 	dsb	sy
 8002ce4:	61bb      	str	r3, [r7, #24]
}
 8002ce6:	bf00      	nop
 8002ce8:	e7fe      	b.n	8002ce8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002cea:	f001 f9a3 	bl	8004034 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cf2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d01f      	beq.n	8002d3a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002cfa:	68b9      	ldr	r1, [r7, #8]
 8002cfc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002cfe:	f000 f8f7 	bl	8002ef0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d04:	1e5a      	subs	r2, r3, #1
 8002d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d08:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d0c:	691b      	ldr	r3, [r3, #16]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d00f      	beq.n	8002d32 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d14:	3310      	adds	r3, #16
 8002d16:	4618      	mov	r0, r3
 8002d18:	f000 fd9a 	bl	8003850 <xTaskRemoveFromEventList>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d007      	beq.n	8002d32 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002d22:	4b3d      	ldr	r3, [pc, #244]	; (8002e18 <xQueueReceive+0x1bc>)
 8002d24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d28:	601a      	str	r2, [r3, #0]
 8002d2a:	f3bf 8f4f 	dsb	sy
 8002d2e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002d32:	f001 f9af 	bl	8004094 <vPortExitCritical>
				return pdPASS;
 8002d36:	2301      	movs	r3, #1
 8002d38:	e069      	b.n	8002e0e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d103      	bne.n	8002d48 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002d40:	f001 f9a8 	bl	8004094 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002d44:	2300      	movs	r3, #0
 8002d46:	e062      	b.n	8002e0e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002d48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d106      	bne.n	8002d5c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002d4e:	f107 0310 	add.w	r3, r7, #16
 8002d52:	4618      	mov	r0, r3
 8002d54:	f000 fdde 	bl	8003914 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002d5c:	f001 f99a 	bl	8004094 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002d60:	f000 fb94 	bl	800348c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002d64:	f001 f966 	bl	8004034 <vPortEnterCritical>
 8002d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d6a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002d6e:	b25b      	sxtb	r3, r3
 8002d70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d74:	d103      	bne.n	8002d7e <xQueueReceive+0x122>
 8002d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d78:	2200      	movs	r2, #0
 8002d7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d80:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002d84:	b25b      	sxtb	r3, r3
 8002d86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d8a:	d103      	bne.n	8002d94 <xQueueReceive+0x138>
 8002d8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d8e:	2200      	movs	r2, #0
 8002d90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002d94:	f001 f97e 	bl	8004094 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002d98:	1d3a      	adds	r2, r7, #4
 8002d9a:	f107 0310 	add.w	r3, r7, #16
 8002d9e:	4611      	mov	r1, r2
 8002da0:	4618      	mov	r0, r3
 8002da2:	f000 fdcd 	bl	8003940 <xTaskCheckForTimeOut>
 8002da6:	4603      	mov	r3, r0
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d123      	bne.n	8002df4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002dac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002dae:	f000 f917 	bl	8002fe0 <prvIsQueueEmpty>
 8002db2:	4603      	mov	r3, r0
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d017      	beq.n	8002de8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dba:	3324      	adds	r3, #36	; 0x24
 8002dbc:	687a      	ldr	r2, [r7, #4]
 8002dbe:	4611      	mov	r1, r2
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f000 fd21 	bl	8003808 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002dc6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002dc8:	f000 f8b8 	bl	8002f3c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002dcc:	f000 fb6c 	bl	80034a8 <xTaskResumeAll>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d189      	bne.n	8002cea <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8002dd6:	4b10      	ldr	r3, [pc, #64]	; (8002e18 <xQueueReceive+0x1bc>)
 8002dd8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ddc:	601a      	str	r2, [r3, #0]
 8002dde:	f3bf 8f4f 	dsb	sy
 8002de2:	f3bf 8f6f 	isb	sy
 8002de6:	e780      	b.n	8002cea <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002de8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002dea:	f000 f8a7 	bl	8002f3c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002dee:	f000 fb5b 	bl	80034a8 <xTaskResumeAll>
 8002df2:	e77a      	b.n	8002cea <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002df4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002df6:	f000 f8a1 	bl	8002f3c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002dfa:	f000 fb55 	bl	80034a8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002dfe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002e00:	f000 f8ee 	bl	8002fe0 <prvIsQueueEmpty>
 8002e04:	4603      	mov	r3, r0
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	f43f af6f 	beq.w	8002cea <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002e0c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	3730      	adds	r7, #48	; 0x30
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	bf00      	nop
 8002e18:	e000ed04 	.word	0xe000ed04

08002e1c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b086      	sub	sp, #24
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	60f8      	str	r0, [r7, #12]
 8002e24:	60b9      	str	r1, [r7, #8]
 8002e26:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e30:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d10d      	bne.n	8002e56 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d14d      	bne.n	8002ede <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	4618      	mov	r0, r3
 8002e48:	f000 fedc 	bl	8003c04 <xTaskPriorityDisinherit>
 8002e4c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	2200      	movs	r2, #0
 8002e52:	609a      	str	r2, [r3, #8]
 8002e54:	e043      	b.n	8002ede <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d119      	bne.n	8002e90 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	6858      	ldr	r0, [r3, #4]
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e64:	461a      	mov	r2, r3
 8002e66:	68b9      	ldr	r1, [r7, #8]
 8002e68:	f001 fbda 	bl	8004620 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	685a      	ldr	r2, [r3, #4]
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e74:	441a      	add	r2, r3
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	685a      	ldr	r2, [r3, #4]
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	429a      	cmp	r2, r3
 8002e84:	d32b      	bcc.n	8002ede <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681a      	ldr	r2, [r3, #0]
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	605a      	str	r2, [r3, #4]
 8002e8e:	e026      	b.n	8002ede <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	68d8      	ldr	r0, [r3, #12]
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e98:	461a      	mov	r2, r3
 8002e9a:	68b9      	ldr	r1, [r7, #8]
 8002e9c:	f001 fbc0 	bl	8004620 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	68da      	ldr	r2, [r3, #12]
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea8:	425b      	negs	r3, r3
 8002eaa:	441a      	add	r2, r3
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	68da      	ldr	r2, [r3, #12]
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	429a      	cmp	r2, r3
 8002eba:	d207      	bcs.n	8002ecc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	689a      	ldr	r2, [r3, #8]
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec4:	425b      	negs	r3, r3
 8002ec6:	441a      	add	r2, r3
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2b02      	cmp	r3, #2
 8002ed0:	d105      	bne.n	8002ede <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d002      	beq.n	8002ede <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002ed8:	693b      	ldr	r3, [r7, #16]
 8002eda:	3b01      	subs	r3, #1
 8002edc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002ede:	693b      	ldr	r3, [r7, #16]
 8002ee0:	1c5a      	adds	r2, r3, #1
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002ee6:	697b      	ldr	r3, [r7, #20]
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	3718      	adds	r7, #24
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd80      	pop	{r7, pc}

08002ef0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b082      	sub	sp, #8
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
 8002ef8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d018      	beq.n	8002f34 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	68da      	ldr	r2, [r3, #12]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f0a:	441a      	add	r2, r3
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	68da      	ldr	r2, [r3, #12]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	429a      	cmp	r2, r3
 8002f1a:	d303      	bcc.n	8002f24 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681a      	ldr	r2, [r3, #0]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	68d9      	ldr	r1, [r3, #12]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2c:	461a      	mov	r2, r3
 8002f2e:	6838      	ldr	r0, [r7, #0]
 8002f30:	f001 fb76 	bl	8004620 <memcpy>
	}
}
 8002f34:	bf00      	nop
 8002f36:	3708      	adds	r7, #8
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd80      	pop	{r7, pc}

08002f3c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b084      	sub	sp, #16
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002f44:	f001 f876 	bl	8004034 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002f4e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002f50:	e011      	b.n	8002f76 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d012      	beq.n	8002f80 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	3324      	adds	r3, #36	; 0x24
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f000 fc76 	bl	8003850 <xTaskRemoveFromEventList>
 8002f64:	4603      	mov	r3, r0
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d001      	beq.n	8002f6e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002f6a:	f000 fd4b 	bl	8003a04 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002f6e:	7bfb      	ldrb	r3, [r7, #15]
 8002f70:	3b01      	subs	r3, #1
 8002f72:	b2db      	uxtb	r3, r3
 8002f74:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002f76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	dce9      	bgt.n	8002f52 <prvUnlockQueue+0x16>
 8002f7e:	e000      	b.n	8002f82 <prvUnlockQueue+0x46>
					break;
 8002f80:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	22ff      	movs	r2, #255	; 0xff
 8002f86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002f8a:	f001 f883 	bl	8004094 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002f8e:	f001 f851 	bl	8004034 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002f98:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002f9a:	e011      	b.n	8002fc0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	691b      	ldr	r3, [r3, #16]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d012      	beq.n	8002fca <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	3310      	adds	r3, #16
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f000 fc51 	bl	8003850 <xTaskRemoveFromEventList>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d001      	beq.n	8002fb8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002fb4:	f000 fd26 	bl	8003a04 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002fb8:	7bbb      	ldrb	r3, [r7, #14]
 8002fba:	3b01      	subs	r3, #1
 8002fbc:	b2db      	uxtb	r3, r3
 8002fbe:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002fc0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	dce9      	bgt.n	8002f9c <prvUnlockQueue+0x60>
 8002fc8:	e000      	b.n	8002fcc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002fca:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	22ff      	movs	r2, #255	; 0xff
 8002fd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002fd4:	f001 f85e 	bl	8004094 <vPortExitCritical>
}
 8002fd8:	bf00      	nop
 8002fda:	3710      	adds	r7, #16
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bd80      	pop	{r7, pc}

08002fe0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b084      	sub	sp, #16
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002fe8:	f001 f824 	bl	8004034 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d102      	bne.n	8002ffa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	60fb      	str	r3, [r7, #12]
 8002ff8:	e001      	b.n	8002ffe <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002ffe:	f001 f849 	bl	8004094 <vPortExitCritical>

	return xReturn;
 8003002:	68fb      	ldr	r3, [r7, #12]
}
 8003004:	4618      	mov	r0, r3
 8003006:	3710      	adds	r7, #16
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}

0800300c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b084      	sub	sp, #16
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003014:	f001 f80e 	bl	8004034 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003020:	429a      	cmp	r2, r3
 8003022:	d102      	bne.n	800302a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003024:	2301      	movs	r3, #1
 8003026:	60fb      	str	r3, [r7, #12]
 8003028:	e001      	b.n	800302e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800302a:	2300      	movs	r3, #0
 800302c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800302e:	f001 f831 	bl	8004094 <vPortExitCritical>

	return xReturn;
 8003032:	68fb      	ldr	r3, [r7, #12]
}
 8003034:	4618      	mov	r0, r3
 8003036:	3710      	adds	r7, #16
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}

0800303c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800303c:	b580      	push	{r7, lr}
 800303e:	b08e      	sub	sp, #56	; 0x38
 8003040:	af04      	add	r7, sp, #16
 8003042:	60f8      	str	r0, [r7, #12]
 8003044:	60b9      	str	r1, [r7, #8]
 8003046:	607a      	str	r2, [r7, #4]
 8003048:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800304a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800304c:	2b00      	cmp	r3, #0
 800304e:	d10a      	bne.n	8003066 <xTaskCreateStatic+0x2a>
	__asm volatile
 8003050:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003054:	f383 8811 	msr	BASEPRI, r3
 8003058:	f3bf 8f6f 	isb	sy
 800305c:	f3bf 8f4f 	dsb	sy
 8003060:	623b      	str	r3, [r7, #32]
}
 8003062:	bf00      	nop
 8003064:	e7fe      	b.n	8003064 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003068:	2b00      	cmp	r3, #0
 800306a:	d10a      	bne.n	8003082 <xTaskCreateStatic+0x46>
	__asm volatile
 800306c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003070:	f383 8811 	msr	BASEPRI, r3
 8003074:	f3bf 8f6f 	isb	sy
 8003078:	f3bf 8f4f 	dsb	sy
 800307c:	61fb      	str	r3, [r7, #28]
}
 800307e:	bf00      	nop
 8003080:	e7fe      	b.n	8003080 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003082:	2354      	movs	r3, #84	; 0x54
 8003084:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	2b54      	cmp	r3, #84	; 0x54
 800308a:	d00a      	beq.n	80030a2 <xTaskCreateStatic+0x66>
	__asm volatile
 800308c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003090:	f383 8811 	msr	BASEPRI, r3
 8003094:	f3bf 8f6f 	isb	sy
 8003098:	f3bf 8f4f 	dsb	sy
 800309c:	61bb      	str	r3, [r7, #24]
}
 800309e:	bf00      	nop
 80030a0:	e7fe      	b.n	80030a0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80030a2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80030a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d01e      	beq.n	80030e8 <xTaskCreateStatic+0xac>
 80030aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d01b      	beq.n	80030e8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80030b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030b2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80030b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80030b8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80030ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030bc:	2202      	movs	r2, #2
 80030be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80030c2:	2300      	movs	r3, #0
 80030c4:	9303      	str	r3, [sp, #12]
 80030c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c8:	9302      	str	r3, [sp, #8]
 80030ca:	f107 0314 	add.w	r3, r7, #20
 80030ce:	9301      	str	r3, [sp, #4]
 80030d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030d2:	9300      	str	r3, [sp, #0]
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	687a      	ldr	r2, [r7, #4]
 80030d8:	68b9      	ldr	r1, [r7, #8]
 80030da:	68f8      	ldr	r0, [r7, #12]
 80030dc:	f000 f850 	bl	8003180 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80030e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80030e2:	f000 f8d5 	bl	8003290 <prvAddNewTaskToReadyList>
 80030e6:	e001      	b.n	80030ec <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80030e8:	2300      	movs	r3, #0
 80030ea:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80030ec:	697b      	ldr	r3, [r7, #20]
	}
 80030ee:	4618      	mov	r0, r3
 80030f0:	3728      	adds	r7, #40	; 0x28
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}

080030f6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80030f6:	b580      	push	{r7, lr}
 80030f8:	b08c      	sub	sp, #48	; 0x30
 80030fa:	af04      	add	r7, sp, #16
 80030fc:	60f8      	str	r0, [r7, #12]
 80030fe:	60b9      	str	r1, [r7, #8]
 8003100:	603b      	str	r3, [r7, #0]
 8003102:	4613      	mov	r3, r2
 8003104:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003106:	88fb      	ldrh	r3, [r7, #6]
 8003108:	009b      	lsls	r3, r3, #2
 800310a:	4618      	mov	r0, r3
 800310c:	f001 f874 	bl	80041f8 <pvPortMalloc>
 8003110:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d00e      	beq.n	8003136 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003118:	2054      	movs	r0, #84	; 0x54
 800311a:	f001 f86d 	bl	80041f8 <pvPortMalloc>
 800311e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003120:	69fb      	ldr	r3, [r7, #28]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d003      	beq.n	800312e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003126:	69fb      	ldr	r3, [r7, #28]
 8003128:	697a      	ldr	r2, [r7, #20]
 800312a:	631a      	str	r2, [r3, #48]	; 0x30
 800312c:	e005      	b.n	800313a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800312e:	6978      	ldr	r0, [r7, #20]
 8003130:	f001 f92e 	bl	8004390 <vPortFree>
 8003134:	e001      	b.n	800313a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003136:	2300      	movs	r3, #0
 8003138:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800313a:	69fb      	ldr	r3, [r7, #28]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d017      	beq.n	8003170 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003140:	69fb      	ldr	r3, [r7, #28]
 8003142:	2200      	movs	r2, #0
 8003144:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003148:	88fa      	ldrh	r2, [r7, #6]
 800314a:	2300      	movs	r3, #0
 800314c:	9303      	str	r3, [sp, #12]
 800314e:	69fb      	ldr	r3, [r7, #28]
 8003150:	9302      	str	r3, [sp, #8]
 8003152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003154:	9301      	str	r3, [sp, #4]
 8003156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003158:	9300      	str	r3, [sp, #0]
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	68b9      	ldr	r1, [r7, #8]
 800315e:	68f8      	ldr	r0, [r7, #12]
 8003160:	f000 f80e 	bl	8003180 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003164:	69f8      	ldr	r0, [r7, #28]
 8003166:	f000 f893 	bl	8003290 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800316a:	2301      	movs	r3, #1
 800316c:	61bb      	str	r3, [r7, #24]
 800316e:	e002      	b.n	8003176 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003170:	f04f 33ff 	mov.w	r3, #4294967295
 8003174:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003176:	69bb      	ldr	r3, [r7, #24]
	}
 8003178:	4618      	mov	r0, r3
 800317a:	3720      	adds	r7, #32
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}

08003180 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b088      	sub	sp, #32
 8003184:	af00      	add	r7, sp, #0
 8003186:	60f8      	str	r0, [r7, #12]
 8003188:	60b9      	str	r1, [r7, #8]
 800318a:	607a      	str	r2, [r7, #4]
 800318c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800318e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003190:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003198:	3b01      	subs	r3, #1
 800319a:	009b      	lsls	r3, r3, #2
 800319c:	4413      	add	r3, r2
 800319e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80031a0:	69bb      	ldr	r3, [r7, #24]
 80031a2:	f023 0307 	bic.w	r3, r3, #7
 80031a6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80031a8:	69bb      	ldr	r3, [r7, #24]
 80031aa:	f003 0307 	and.w	r3, r3, #7
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d00a      	beq.n	80031c8 <prvInitialiseNewTask+0x48>
	__asm volatile
 80031b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031b6:	f383 8811 	msr	BASEPRI, r3
 80031ba:	f3bf 8f6f 	isb	sy
 80031be:	f3bf 8f4f 	dsb	sy
 80031c2:	617b      	str	r3, [r7, #20]
}
 80031c4:	bf00      	nop
 80031c6:	e7fe      	b.n	80031c6 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d01f      	beq.n	800320e <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80031ce:	2300      	movs	r3, #0
 80031d0:	61fb      	str	r3, [r7, #28]
 80031d2:	e012      	b.n	80031fa <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80031d4:	68ba      	ldr	r2, [r7, #8]
 80031d6:	69fb      	ldr	r3, [r7, #28]
 80031d8:	4413      	add	r3, r2
 80031da:	7819      	ldrb	r1, [r3, #0]
 80031dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80031de:	69fb      	ldr	r3, [r7, #28]
 80031e0:	4413      	add	r3, r2
 80031e2:	3334      	adds	r3, #52	; 0x34
 80031e4:	460a      	mov	r2, r1
 80031e6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80031e8:	68ba      	ldr	r2, [r7, #8]
 80031ea:	69fb      	ldr	r3, [r7, #28]
 80031ec:	4413      	add	r3, r2
 80031ee:	781b      	ldrb	r3, [r3, #0]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d006      	beq.n	8003202 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80031f4:	69fb      	ldr	r3, [r7, #28]
 80031f6:	3301      	adds	r3, #1
 80031f8:	61fb      	str	r3, [r7, #28]
 80031fa:	69fb      	ldr	r3, [r7, #28]
 80031fc:	2b0f      	cmp	r3, #15
 80031fe:	d9e9      	bls.n	80031d4 <prvInitialiseNewTask+0x54>
 8003200:	e000      	b.n	8003204 <prvInitialiseNewTask+0x84>
			{
				break;
 8003202:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003206:	2200      	movs	r2, #0
 8003208:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800320c:	e003      	b.n	8003216 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800320e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003210:	2200      	movs	r2, #0
 8003212:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003218:	2b06      	cmp	r3, #6
 800321a:	d901      	bls.n	8003220 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800321c:	2306      	movs	r3, #6
 800321e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003222:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003224:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003228:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800322a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800322c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800322e:	2200      	movs	r2, #0
 8003230:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003234:	3304      	adds	r3, #4
 8003236:	4618      	mov	r0, r3
 8003238:	f7ff fabc 	bl	80027b4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800323c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800323e:	3318      	adds	r3, #24
 8003240:	4618      	mov	r0, r3
 8003242:	f7ff fab7 	bl	80027b4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003248:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800324a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800324c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800324e:	f1c3 0207 	rsb	r2, r3, #7
 8003252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003254:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003258:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800325a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800325c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800325e:	2200      	movs	r2, #0
 8003260:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003264:	2200      	movs	r2, #0
 8003266:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800326a:	683a      	ldr	r2, [r7, #0]
 800326c:	68f9      	ldr	r1, [r7, #12]
 800326e:	69b8      	ldr	r0, [r7, #24]
 8003270:	f000 fdb4 	bl	8003ddc <pxPortInitialiseStack>
 8003274:	4602      	mov	r2, r0
 8003276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003278:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800327a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800327c:	2b00      	cmp	r3, #0
 800327e:	d002      	beq.n	8003286 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003282:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003284:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003286:	bf00      	nop
 8003288:	3720      	adds	r7, #32
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}
	...

08003290 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b082      	sub	sp, #8
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003298:	f000 fecc 	bl	8004034 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800329c:	4b2a      	ldr	r3, [pc, #168]	; (8003348 <prvAddNewTaskToReadyList+0xb8>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	3301      	adds	r3, #1
 80032a2:	4a29      	ldr	r2, [pc, #164]	; (8003348 <prvAddNewTaskToReadyList+0xb8>)
 80032a4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80032a6:	4b29      	ldr	r3, [pc, #164]	; (800334c <prvAddNewTaskToReadyList+0xbc>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d109      	bne.n	80032c2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80032ae:	4a27      	ldr	r2, [pc, #156]	; (800334c <prvAddNewTaskToReadyList+0xbc>)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80032b4:	4b24      	ldr	r3, [pc, #144]	; (8003348 <prvAddNewTaskToReadyList+0xb8>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	2b01      	cmp	r3, #1
 80032ba:	d110      	bne.n	80032de <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80032bc:	f000 fbc6 	bl	8003a4c <prvInitialiseTaskLists>
 80032c0:	e00d      	b.n	80032de <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80032c2:	4b23      	ldr	r3, [pc, #140]	; (8003350 <prvAddNewTaskToReadyList+0xc0>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d109      	bne.n	80032de <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80032ca:	4b20      	ldr	r3, [pc, #128]	; (800334c <prvAddNewTaskToReadyList+0xbc>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032d4:	429a      	cmp	r2, r3
 80032d6:	d802      	bhi.n	80032de <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80032d8:	4a1c      	ldr	r2, [pc, #112]	; (800334c <prvAddNewTaskToReadyList+0xbc>)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80032de:	4b1d      	ldr	r3, [pc, #116]	; (8003354 <prvAddNewTaskToReadyList+0xc4>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	3301      	adds	r3, #1
 80032e4:	4a1b      	ldr	r2, [pc, #108]	; (8003354 <prvAddNewTaskToReadyList+0xc4>)
 80032e6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ec:	2201      	movs	r2, #1
 80032ee:	409a      	lsls	r2, r3
 80032f0:	4b19      	ldr	r3, [pc, #100]	; (8003358 <prvAddNewTaskToReadyList+0xc8>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4313      	orrs	r3, r2
 80032f6:	4a18      	ldr	r2, [pc, #96]	; (8003358 <prvAddNewTaskToReadyList+0xc8>)
 80032f8:	6013      	str	r3, [r2, #0]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032fe:	4613      	mov	r3, r2
 8003300:	009b      	lsls	r3, r3, #2
 8003302:	4413      	add	r3, r2
 8003304:	009b      	lsls	r3, r3, #2
 8003306:	4a15      	ldr	r2, [pc, #84]	; (800335c <prvAddNewTaskToReadyList+0xcc>)
 8003308:	441a      	add	r2, r3
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	3304      	adds	r3, #4
 800330e:	4619      	mov	r1, r3
 8003310:	4610      	mov	r0, r2
 8003312:	f7ff fa5c 	bl	80027ce <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003316:	f000 febd 	bl	8004094 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800331a:	4b0d      	ldr	r3, [pc, #52]	; (8003350 <prvAddNewTaskToReadyList+0xc0>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d00e      	beq.n	8003340 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003322:	4b0a      	ldr	r3, [pc, #40]	; (800334c <prvAddNewTaskToReadyList+0xbc>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800332c:	429a      	cmp	r2, r3
 800332e:	d207      	bcs.n	8003340 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003330:	4b0b      	ldr	r3, [pc, #44]	; (8003360 <prvAddNewTaskToReadyList+0xd0>)
 8003332:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003336:	601a      	str	r2, [r3, #0]
 8003338:	f3bf 8f4f 	dsb	sy
 800333c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003340:	bf00      	nop
 8003342:	3708      	adds	r7, #8
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}
 8003348:	200003e8 	.word	0x200003e8
 800334c:	200002e8 	.word	0x200002e8
 8003350:	200003f4 	.word	0x200003f4
 8003354:	20000404 	.word	0x20000404
 8003358:	200003f0 	.word	0x200003f0
 800335c:	200002ec 	.word	0x200002ec
 8003360:	e000ed04 	.word	0xe000ed04

08003364 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003364:	b580      	push	{r7, lr}
 8003366:	b084      	sub	sp, #16
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800336c:	2300      	movs	r3, #0
 800336e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d017      	beq.n	80033a6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003376:	4b13      	ldr	r3, [pc, #76]	; (80033c4 <vTaskDelay+0x60>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d00a      	beq.n	8003394 <vTaskDelay+0x30>
	__asm volatile
 800337e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003382:	f383 8811 	msr	BASEPRI, r3
 8003386:	f3bf 8f6f 	isb	sy
 800338a:	f3bf 8f4f 	dsb	sy
 800338e:	60bb      	str	r3, [r7, #8]
}
 8003390:	bf00      	nop
 8003392:	e7fe      	b.n	8003392 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003394:	f000 f87a 	bl	800348c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003398:	2100      	movs	r1, #0
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f000 fcb8 	bl	8003d10 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80033a0:	f000 f882 	bl	80034a8 <xTaskResumeAll>
 80033a4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d107      	bne.n	80033bc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80033ac:	4b06      	ldr	r3, [pc, #24]	; (80033c8 <vTaskDelay+0x64>)
 80033ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80033b2:	601a      	str	r2, [r3, #0]
 80033b4:	f3bf 8f4f 	dsb	sy
 80033b8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80033bc:	bf00      	nop
 80033be:	3710      	adds	r7, #16
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bd80      	pop	{r7, pc}
 80033c4:	20000410 	.word	0x20000410
 80033c8:	e000ed04 	.word	0xe000ed04

080033cc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b08a      	sub	sp, #40	; 0x28
 80033d0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80033d2:	2300      	movs	r3, #0
 80033d4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80033d6:	2300      	movs	r3, #0
 80033d8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80033da:	463a      	mov	r2, r7
 80033dc:	1d39      	adds	r1, r7, #4
 80033de:	f107 0308 	add.w	r3, r7, #8
 80033e2:	4618      	mov	r0, r3
 80033e4:	f7fd f8c8 	bl	8000578 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80033e8:	6839      	ldr	r1, [r7, #0]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	68ba      	ldr	r2, [r7, #8]
 80033ee:	9202      	str	r2, [sp, #8]
 80033f0:	9301      	str	r3, [sp, #4]
 80033f2:	2300      	movs	r3, #0
 80033f4:	9300      	str	r3, [sp, #0]
 80033f6:	2300      	movs	r3, #0
 80033f8:	460a      	mov	r2, r1
 80033fa:	491e      	ldr	r1, [pc, #120]	; (8003474 <vTaskStartScheduler+0xa8>)
 80033fc:	481e      	ldr	r0, [pc, #120]	; (8003478 <vTaskStartScheduler+0xac>)
 80033fe:	f7ff fe1d 	bl	800303c <xTaskCreateStatic>
 8003402:	4603      	mov	r3, r0
 8003404:	4a1d      	ldr	r2, [pc, #116]	; (800347c <vTaskStartScheduler+0xb0>)
 8003406:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003408:	4b1c      	ldr	r3, [pc, #112]	; (800347c <vTaskStartScheduler+0xb0>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d002      	beq.n	8003416 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003410:	2301      	movs	r3, #1
 8003412:	617b      	str	r3, [r7, #20]
 8003414:	e001      	b.n	800341a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003416:	2300      	movs	r3, #0
 8003418:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	2b01      	cmp	r3, #1
 800341e:	d116      	bne.n	800344e <vTaskStartScheduler+0x82>
	__asm volatile
 8003420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003424:	f383 8811 	msr	BASEPRI, r3
 8003428:	f3bf 8f6f 	isb	sy
 800342c:	f3bf 8f4f 	dsb	sy
 8003430:	613b      	str	r3, [r7, #16]
}
 8003432:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003434:	4b12      	ldr	r3, [pc, #72]	; (8003480 <vTaskStartScheduler+0xb4>)
 8003436:	f04f 32ff 	mov.w	r2, #4294967295
 800343a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800343c:	4b11      	ldr	r3, [pc, #68]	; (8003484 <vTaskStartScheduler+0xb8>)
 800343e:	2201      	movs	r2, #1
 8003440:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003442:	4b11      	ldr	r3, [pc, #68]	; (8003488 <vTaskStartScheduler+0xbc>)
 8003444:	2200      	movs	r2, #0
 8003446:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003448:	f000 fd52 	bl	8003ef0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800344c:	e00e      	b.n	800346c <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003454:	d10a      	bne.n	800346c <vTaskStartScheduler+0xa0>
	__asm volatile
 8003456:	f04f 0350 	mov.w	r3, #80	; 0x50
 800345a:	f383 8811 	msr	BASEPRI, r3
 800345e:	f3bf 8f6f 	isb	sy
 8003462:	f3bf 8f4f 	dsb	sy
 8003466:	60fb      	str	r3, [r7, #12]
}
 8003468:	bf00      	nop
 800346a:	e7fe      	b.n	800346a <vTaskStartScheduler+0x9e>
}
 800346c:	bf00      	nop
 800346e:	3718      	adds	r7, #24
 8003470:	46bd      	mov	sp, r7
 8003472:	bd80      	pop	{r7, pc}
 8003474:	08005038 	.word	0x08005038
 8003478:	08003a1d 	.word	0x08003a1d
 800347c:	2000040c 	.word	0x2000040c
 8003480:	20000408 	.word	0x20000408
 8003484:	200003f4 	.word	0x200003f4
 8003488:	200003ec 	.word	0x200003ec

0800348c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800348c:	b480      	push	{r7}
 800348e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003490:	4b04      	ldr	r3, [pc, #16]	; (80034a4 <vTaskSuspendAll+0x18>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	3301      	adds	r3, #1
 8003496:	4a03      	ldr	r2, [pc, #12]	; (80034a4 <vTaskSuspendAll+0x18>)
 8003498:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800349a:	bf00      	nop
 800349c:	46bd      	mov	sp, r7
 800349e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a2:	4770      	bx	lr
 80034a4:	20000410 	.word	0x20000410

080034a8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b084      	sub	sp, #16
 80034ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80034ae:	2300      	movs	r3, #0
 80034b0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80034b2:	2300      	movs	r3, #0
 80034b4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80034b6:	4b41      	ldr	r3, [pc, #260]	; (80035bc <xTaskResumeAll+0x114>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d10a      	bne.n	80034d4 <xTaskResumeAll+0x2c>
	__asm volatile
 80034be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034c2:	f383 8811 	msr	BASEPRI, r3
 80034c6:	f3bf 8f6f 	isb	sy
 80034ca:	f3bf 8f4f 	dsb	sy
 80034ce:	603b      	str	r3, [r7, #0]
}
 80034d0:	bf00      	nop
 80034d2:	e7fe      	b.n	80034d2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80034d4:	f000 fdae 	bl	8004034 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80034d8:	4b38      	ldr	r3, [pc, #224]	; (80035bc <xTaskResumeAll+0x114>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	3b01      	subs	r3, #1
 80034de:	4a37      	ldr	r2, [pc, #220]	; (80035bc <xTaskResumeAll+0x114>)
 80034e0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80034e2:	4b36      	ldr	r3, [pc, #216]	; (80035bc <xTaskResumeAll+0x114>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d161      	bne.n	80035ae <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80034ea:	4b35      	ldr	r3, [pc, #212]	; (80035c0 <xTaskResumeAll+0x118>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d05d      	beq.n	80035ae <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80034f2:	e02e      	b.n	8003552 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80034f4:	4b33      	ldr	r3, [pc, #204]	; (80035c4 <xTaskResumeAll+0x11c>)
 80034f6:	68db      	ldr	r3, [r3, #12]
 80034f8:	68db      	ldr	r3, [r3, #12]
 80034fa:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	3318      	adds	r3, #24
 8003500:	4618      	mov	r0, r3
 8003502:	f7ff f9c1 	bl	8002888 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	3304      	adds	r3, #4
 800350a:	4618      	mov	r0, r3
 800350c:	f7ff f9bc 	bl	8002888 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003514:	2201      	movs	r2, #1
 8003516:	409a      	lsls	r2, r3
 8003518:	4b2b      	ldr	r3, [pc, #172]	; (80035c8 <xTaskResumeAll+0x120>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4313      	orrs	r3, r2
 800351e:	4a2a      	ldr	r2, [pc, #168]	; (80035c8 <xTaskResumeAll+0x120>)
 8003520:	6013      	str	r3, [r2, #0]
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003526:	4613      	mov	r3, r2
 8003528:	009b      	lsls	r3, r3, #2
 800352a:	4413      	add	r3, r2
 800352c:	009b      	lsls	r3, r3, #2
 800352e:	4a27      	ldr	r2, [pc, #156]	; (80035cc <xTaskResumeAll+0x124>)
 8003530:	441a      	add	r2, r3
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	3304      	adds	r3, #4
 8003536:	4619      	mov	r1, r3
 8003538:	4610      	mov	r0, r2
 800353a:	f7ff f948 	bl	80027ce <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003542:	4b23      	ldr	r3, [pc, #140]	; (80035d0 <xTaskResumeAll+0x128>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003548:	429a      	cmp	r2, r3
 800354a:	d302      	bcc.n	8003552 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800354c:	4b21      	ldr	r3, [pc, #132]	; (80035d4 <xTaskResumeAll+0x12c>)
 800354e:	2201      	movs	r2, #1
 8003550:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003552:	4b1c      	ldr	r3, [pc, #112]	; (80035c4 <xTaskResumeAll+0x11c>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d1cc      	bne.n	80034f4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d001      	beq.n	8003564 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003560:	f000 fb12 	bl	8003b88 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003564:	4b1c      	ldr	r3, [pc, #112]	; (80035d8 <xTaskResumeAll+0x130>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d010      	beq.n	8003592 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003570:	f000 f836 	bl	80035e0 <xTaskIncrementTick>
 8003574:	4603      	mov	r3, r0
 8003576:	2b00      	cmp	r3, #0
 8003578:	d002      	beq.n	8003580 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800357a:	4b16      	ldr	r3, [pc, #88]	; (80035d4 <xTaskResumeAll+0x12c>)
 800357c:	2201      	movs	r2, #1
 800357e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	3b01      	subs	r3, #1
 8003584:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d1f1      	bne.n	8003570 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800358c:	4b12      	ldr	r3, [pc, #72]	; (80035d8 <xTaskResumeAll+0x130>)
 800358e:	2200      	movs	r2, #0
 8003590:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003592:	4b10      	ldr	r3, [pc, #64]	; (80035d4 <xTaskResumeAll+0x12c>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d009      	beq.n	80035ae <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800359a:	2301      	movs	r3, #1
 800359c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800359e:	4b0f      	ldr	r3, [pc, #60]	; (80035dc <xTaskResumeAll+0x134>)
 80035a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035a4:	601a      	str	r2, [r3, #0]
 80035a6:	f3bf 8f4f 	dsb	sy
 80035aa:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80035ae:	f000 fd71 	bl	8004094 <vPortExitCritical>

	return xAlreadyYielded;
 80035b2:	68bb      	ldr	r3, [r7, #8]
}
 80035b4:	4618      	mov	r0, r3
 80035b6:	3710      	adds	r7, #16
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bd80      	pop	{r7, pc}
 80035bc:	20000410 	.word	0x20000410
 80035c0:	200003e8 	.word	0x200003e8
 80035c4:	200003a8 	.word	0x200003a8
 80035c8:	200003f0 	.word	0x200003f0
 80035cc:	200002ec 	.word	0x200002ec
 80035d0:	200002e8 	.word	0x200002e8
 80035d4:	200003fc 	.word	0x200003fc
 80035d8:	200003f8 	.word	0x200003f8
 80035dc:	e000ed04 	.word	0xe000ed04

080035e0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b086      	sub	sp, #24
 80035e4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80035e6:	2300      	movs	r3, #0
 80035e8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80035ea:	4b4e      	ldr	r3, [pc, #312]	; (8003724 <xTaskIncrementTick+0x144>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	f040 808e 	bne.w	8003710 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80035f4:	4b4c      	ldr	r3, [pc, #304]	; (8003728 <xTaskIncrementTick+0x148>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	3301      	adds	r3, #1
 80035fa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80035fc:	4a4a      	ldr	r2, [pc, #296]	; (8003728 <xTaskIncrementTick+0x148>)
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d120      	bne.n	800364a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003608:	4b48      	ldr	r3, [pc, #288]	; (800372c <xTaskIncrementTick+0x14c>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d00a      	beq.n	8003628 <xTaskIncrementTick+0x48>
	__asm volatile
 8003612:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003616:	f383 8811 	msr	BASEPRI, r3
 800361a:	f3bf 8f6f 	isb	sy
 800361e:	f3bf 8f4f 	dsb	sy
 8003622:	603b      	str	r3, [r7, #0]
}
 8003624:	bf00      	nop
 8003626:	e7fe      	b.n	8003626 <xTaskIncrementTick+0x46>
 8003628:	4b40      	ldr	r3, [pc, #256]	; (800372c <xTaskIncrementTick+0x14c>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	60fb      	str	r3, [r7, #12]
 800362e:	4b40      	ldr	r3, [pc, #256]	; (8003730 <xTaskIncrementTick+0x150>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a3e      	ldr	r2, [pc, #248]	; (800372c <xTaskIncrementTick+0x14c>)
 8003634:	6013      	str	r3, [r2, #0]
 8003636:	4a3e      	ldr	r2, [pc, #248]	; (8003730 <xTaskIncrementTick+0x150>)
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	6013      	str	r3, [r2, #0]
 800363c:	4b3d      	ldr	r3, [pc, #244]	; (8003734 <xTaskIncrementTick+0x154>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	3301      	adds	r3, #1
 8003642:	4a3c      	ldr	r2, [pc, #240]	; (8003734 <xTaskIncrementTick+0x154>)
 8003644:	6013      	str	r3, [r2, #0]
 8003646:	f000 fa9f 	bl	8003b88 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800364a:	4b3b      	ldr	r3, [pc, #236]	; (8003738 <xTaskIncrementTick+0x158>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	693a      	ldr	r2, [r7, #16]
 8003650:	429a      	cmp	r2, r3
 8003652:	d348      	bcc.n	80036e6 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003654:	4b35      	ldr	r3, [pc, #212]	; (800372c <xTaskIncrementTick+0x14c>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d104      	bne.n	8003668 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800365e:	4b36      	ldr	r3, [pc, #216]	; (8003738 <xTaskIncrementTick+0x158>)
 8003660:	f04f 32ff 	mov.w	r2, #4294967295
 8003664:	601a      	str	r2, [r3, #0]
					break;
 8003666:	e03e      	b.n	80036e6 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003668:	4b30      	ldr	r3, [pc, #192]	; (800372c <xTaskIncrementTick+0x14c>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	68db      	ldr	r3, [r3, #12]
 800366e:	68db      	ldr	r3, [r3, #12]
 8003670:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003678:	693a      	ldr	r2, [r7, #16]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	429a      	cmp	r2, r3
 800367e:	d203      	bcs.n	8003688 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003680:	4a2d      	ldr	r2, [pc, #180]	; (8003738 <xTaskIncrementTick+0x158>)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003686:	e02e      	b.n	80036e6 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	3304      	adds	r3, #4
 800368c:	4618      	mov	r0, r3
 800368e:	f7ff f8fb 	bl	8002888 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003696:	2b00      	cmp	r3, #0
 8003698:	d004      	beq.n	80036a4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	3318      	adds	r3, #24
 800369e:	4618      	mov	r0, r3
 80036a0:	f7ff f8f2 	bl	8002888 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036a8:	2201      	movs	r2, #1
 80036aa:	409a      	lsls	r2, r3
 80036ac:	4b23      	ldr	r3, [pc, #140]	; (800373c <xTaskIncrementTick+0x15c>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4313      	orrs	r3, r2
 80036b2:	4a22      	ldr	r2, [pc, #136]	; (800373c <xTaskIncrementTick+0x15c>)
 80036b4:	6013      	str	r3, [r2, #0]
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036ba:	4613      	mov	r3, r2
 80036bc:	009b      	lsls	r3, r3, #2
 80036be:	4413      	add	r3, r2
 80036c0:	009b      	lsls	r3, r3, #2
 80036c2:	4a1f      	ldr	r2, [pc, #124]	; (8003740 <xTaskIncrementTick+0x160>)
 80036c4:	441a      	add	r2, r3
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	3304      	adds	r3, #4
 80036ca:	4619      	mov	r1, r3
 80036cc:	4610      	mov	r0, r2
 80036ce:	f7ff f87e 	bl	80027ce <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80036d2:	68bb      	ldr	r3, [r7, #8]
 80036d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036d6:	4b1b      	ldr	r3, [pc, #108]	; (8003744 <xTaskIncrementTick+0x164>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036dc:	429a      	cmp	r2, r3
 80036de:	d3b9      	bcc.n	8003654 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80036e0:	2301      	movs	r3, #1
 80036e2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80036e4:	e7b6      	b.n	8003654 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80036e6:	4b17      	ldr	r3, [pc, #92]	; (8003744 <xTaskIncrementTick+0x164>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036ec:	4914      	ldr	r1, [pc, #80]	; (8003740 <xTaskIncrementTick+0x160>)
 80036ee:	4613      	mov	r3, r2
 80036f0:	009b      	lsls	r3, r3, #2
 80036f2:	4413      	add	r3, r2
 80036f4:	009b      	lsls	r3, r3, #2
 80036f6:	440b      	add	r3, r1
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	2b01      	cmp	r3, #1
 80036fc:	d901      	bls.n	8003702 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80036fe:	2301      	movs	r3, #1
 8003700:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003702:	4b11      	ldr	r3, [pc, #68]	; (8003748 <xTaskIncrementTick+0x168>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d007      	beq.n	800371a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800370a:	2301      	movs	r3, #1
 800370c:	617b      	str	r3, [r7, #20]
 800370e:	e004      	b.n	800371a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003710:	4b0e      	ldr	r3, [pc, #56]	; (800374c <xTaskIncrementTick+0x16c>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	3301      	adds	r3, #1
 8003716:	4a0d      	ldr	r2, [pc, #52]	; (800374c <xTaskIncrementTick+0x16c>)
 8003718:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800371a:	697b      	ldr	r3, [r7, #20]
}
 800371c:	4618      	mov	r0, r3
 800371e:	3718      	adds	r7, #24
 8003720:	46bd      	mov	sp, r7
 8003722:	bd80      	pop	{r7, pc}
 8003724:	20000410 	.word	0x20000410
 8003728:	200003ec 	.word	0x200003ec
 800372c:	200003a0 	.word	0x200003a0
 8003730:	200003a4 	.word	0x200003a4
 8003734:	20000400 	.word	0x20000400
 8003738:	20000408 	.word	0x20000408
 800373c:	200003f0 	.word	0x200003f0
 8003740:	200002ec 	.word	0x200002ec
 8003744:	200002e8 	.word	0x200002e8
 8003748:	200003fc 	.word	0x200003fc
 800374c:	200003f8 	.word	0x200003f8

08003750 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003750:	b480      	push	{r7}
 8003752:	b087      	sub	sp, #28
 8003754:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003756:	4b27      	ldr	r3, [pc, #156]	; (80037f4 <vTaskSwitchContext+0xa4>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d003      	beq.n	8003766 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800375e:	4b26      	ldr	r3, [pc, #152]	; (80037f8 <vTaskSwitchContext+0xa8>)
 8003760:	2201      	movs	r2, #1
 8003762:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003764:	e03f      	b.n	80037e6 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8003766:	4b24      	ldr	r3, [pc, #144]	; (80037f8 <vTaskSwitchContext+0xa8>)
 8003768:	2200      	movs	r2, #0
 800376a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800376c:	4b23      	ldr	r3, [pc, #140]	; (80037fc <vTaskSwitchContext+0xac>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	fab3 f383 	clz	r3, r3
 8003778:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800377a:	7afb      	ldrb	r3, [r7, #11]
 800377c:	f1c3 031f 	rsb	r3, r3, #31
 8003780:	617b      	str	r3, [r7, #20]
 8003782:	491f      	ldr	r1, [pc, #124]	; (8003800 <vTaskSwitchContext+0xb0>)
 8003784:	697a      	ldr	r2, [r7, #20]
 8003786:	4613      	mov	r3, r2
 8003788:	009b      	lsls	r3, r3, #2
 800378a:	4413      	add	r3, r2
 800378c:	009b      	lsls	r3, r3, #2
 800378e:	440b      	add	r3, r1
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d10a      	bne.n	80037ac <vTaskSwitchContext+0x5c>
	__asm volatile
 8003796:	f04f 0350 	mov.w	r3, #80	; 0x50
 800379a:	f383 8811 	msr	BASEPRI, r3
 800379e:	f3bf 8f6f 	isb	sy
 80037a2:	f3bf 8f4f 	dsb	sy
 80037a6:	607b      	str	r3, [r7, #4]
}
 80037a8:	bf00      	nop
 80037aa:	e7fe      	b.n	80037aa <vTaskSwitchContext+0x5a>
 80037ac:	697a      	ldr	r2, [r7, #20]
 80037ae:	4613      	mov	r3, r2
 80037b0:	009b      	lsls	r3, r3, #2
 80037b2:	4413      	add	r3, r2
 80037b4:	009b      	lsls	r3, r3, #2
 80037b6:	4a12      	ldr	r2, [pc, #72]	; (8003800 <vTaskSwitchContext+0xb0>)
 80037b8:	4413      	add	r3, r2
 80037ba:	613b      	str	r3, [r7, #16]
 80037bc:	693b      	ldr	r3, [r7, #16]
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	685a      	ldr	r2, [r3, #4]
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	605a      	str	r2, [r3, #4]
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	685a      	ldr	r2, [r3, #4]
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	3308      	adds	r3, #8
 80037ce:	429a      	cmp	r2, r3
 80037d0:	d104      	bne.n	80037dc <vTaskSwitchContext+0x8c>
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	685a      	ldr	r2, [r3, #4]
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	605a      	str	r2, [r3, #4]
 80037dc:	693b      	ldr	r3, [r7, #16]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	68db      	ldr	r3, [r3, #12]
 80037e2:	4a08      	ldr	r2, [pc, #32]	; (8003804 <vTaskSwitchContext+0xb4>)
 80037e4:	6013      	str	r3, [r2, #0]
}
 80037e6:	bf00      	nop
 80037e8:	371c      	adds	r7, #28
 80037ea:	46bd      	mov	sp, r7
 80037ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f0:	4770      	bx	lr
 80037f2:	bf00      	nop
 80037f4:	20000410 	.word	0x20000410
 80037f8:	200003fc 	.word	0x200003fc
 80037fc:	200003f0 	.word	0x200003f0
 8003800:	200002ec 	.word	0x200002ec
 8003804:	200002e8 	.word	0x200002e8

08003808 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b084      	sub	sp, #16
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
 8003810:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d10a      	bne.n	800382e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003818:	f04f 0350 	mov.w	r3, #80	; 0x50
 800381c:	f383 8811 	msr	BASEPRI, r3
 8003820:	f3bf 8f6f 	isb	sy
 8003824:	f3bf 8f4f 	dsb	sy
 8003828:	60fb      	str	r3, [r7, #12]
}
 800382a:	bf00      	nop
 800382c:	e7fe      	b.n	800382c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800382e:	4b07      	ldr	r3, [pc, #28]	; (800384c <vTaskPlaceOnEventList+0x44>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	3318      	adds	r3, #24
 8003834:	4619      	mov	r1, r3
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	f7fe ffed 	bl	8002816 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800383c:	2101      	movs	r1, #1
 800383e:	6838      	ldr	r0, [r7, #0]
 8003840:	f000 fa66 	bl	8003d10 <prvAddCurrentTaskToDelayedList>
}
 8003844:	bf00      	nop
 8003846:	3710      	adds	r7, #16
 8003848:	46bd      	mov	sp, r7
 800384a:	bd80      	pop	{r7, pc}
 800384c:	200002e8 	.word	0x200002e8

08003850 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b086      	sub	sp, #24
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	68db      	ldr	r3, [r3, #12]
 800385c:	68db      	ldr	r3, [r3, #12]
 800385e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003860:	693b      	ldr	r3, [r7, #16]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d10a      	bne.n	800387c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003866:	f04f 0350 	mov.w	r3, #80	; 0x50
 800386a:	f383 8811 	msr	BASEPRI, r3
 800386e:	f3bf 8f6f 	isb	sy
 8003872:	f3bf 8f4f 	dsb	sy
 8003876:	60fb      	str	r3, [r7, #12]
}
 8003878:	bf00      	nop
 800387a:	e7fe      	b.n	800387a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	3318      	adds	r3, #24
 8003880:	4618      	mov	r0, r3
 8003882:	f7ff f801 	bl	8002888 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003886:	4b1d      	ldr	r3, [pc, #116]	; (80038fc <xTaskRemoveFromEventList+0xac>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d11c      	bne.n	80038c8 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	3304      	adds	r3, #4
 8003892:	4618      	mov	r0, r3
 8003894:	f7fe fff8 	bl	8002888 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003898:	693b      	ldr	r3, [r7, #16]
 800389a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800389c:	2201      	movs	r2, #1
 800389e:	409a      	lsls	r2, r3
 80038a0:	4b17      	ldr	r3, [pc, #92]	; (8003900 <xTaskRemoveFromEventList+0xb0>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4313      	orrs	r3, r2
 80038a6:	4a16      	ldr	r2, [pc, #88]	; (8003900 <xTaskRemoveFromEventList+0xb0>)
 80038a8:	6013      	str	r3, [r2, #0]
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038ae:	4613      	mov	r3, r2
 80038b0:	009b      	lsls	r3, r3, #2
 80038b2:	4413      	add	r3, r2
 80038b4:	009b      	lsls	r3, r3, #2
 80038b6:	4a13      	ldr	r2, [pc, #76]	; (8003904 <xTaskRemoveFromEventList+0xb4>)
 80038b8:	441a      	add	r2, r3
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	3304      	adds	r3, #4
 80038be:	4619      	mov	r1, r3
 80038c0:	4610      	mov	r0, r2
 80038c2:	f7fe ff84 	bl	80027ce <vListInsertEnd>
 80038c6:	e005      	b.n	80038d4 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80038c8:	693b      	ldr	r3, [r7, #16]
 80038ca:	3318      	adds	r3, #24
 80038cc:	4619      	mov	r1, r3
 80038ce:	480e      	ldr	r0, [pc, #56]	; (8003908 <xTaskRemoveFromEventList+0xb8>)
 80038d0:	f7fe ff7d 	bl	80027ce <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80038d4:	693b      	ldr	r3, [r7, #16]
 80038d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038d8:	4b0c      	ldr	r3, [pc, #48]	; (800390c <xTaskRemoveFromEventList+0xbc>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038de:	429a      	cmp	r2, r3
 80038e0:	d905      	bls.n	80038ee <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80038e2:	2301      	movs	r3, #1
 80038e4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80038e6:	4b0a      	ldr	r3, [pc, #40]	; (8003910 <xTaskRemoveFromEventList+0xc0>)
 80038e8:	2201      	movs	r2, #1
 80038ea:	601a      	str	r2, [r3, #0]
 80038ec:	e001      	b.n	80038f2 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80038ee:	2300      	movs	r3, #0
 80038f0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80038f2:	697b      	ldr	r3, [r7, #20]
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	3718      	adds	r7, #24
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}
 80038fc:	20000410 	.word	0x20000410
 8003900:	200003f0 	.word	0x200003f0
 8003904:	200002ec 	.word	0x200002ec
 8003908:	200003a8 	.word	0x200003a8
 800390c:	200002e8 	.word	0x200002e8
 8003910:	200003fc 	.word	0x200003fc

08003914 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003914:	b480      	push	{r7}
 8003916:	b083      	sub	sp, #12
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800391c:	4b06      	ldr	r3, [pc, #24]	; (8003938 <vTaskInternalSetTimeOutState+0x24>)
 800391e:	681a      	ldr	r2, [r3, #0]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003924:	4b05      	ldr	r3, [pc, #20]	; (800393c <vTaskInternalSetTimeOutState+0x28>)
 8003926:	681a      	ldr	r2, [r3, #0]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	605a      	str	r2, [r3, #4]
}
 800392c:	bf00      	nop
 800392e:	370c      	adds	r7, #12
 8003930:	46bd      	mov	sp, r7
 8003932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003936:	4770      	bx	lr
 8003938:	20000400 	.word	0x20000400
 800393c:	200003ec 	.word	0x200003ec

08003940 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b088      	sub	sp, #32
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
 8003948:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d10a      	bne.n	8003966 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003954:	f383 8811 	msr	BASEPRI, r3
 8003958:	f3bf 8f6f 	isb	sy
 800395c:	f3bf 8f4f 	dsb	sy
 8003960:	613b      	str	r3, [r7, #16]
}
 8003962:	bf00      	nop
 8003964:	e7fe      	b.n	8003964 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d10a      	bne.n	8003982 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800396c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003970:	f383 8811 	msr	BASEPRI, r3
 8003974:	f3bf 8f6f 	isb	sy
 8003978:	f3bf 8f4f 	dsb	sy
 800397c:	60fb      	str	r3, [r7, #12]
}
 800397e:	bf00      	nop
 8003980:	e7fe      	b.n	8003980 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003982:	f000 fb57 	bl	8004034 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003986:	4b1d      	ldr	r3, [pc, #116]	; (80039fc <xTaskCheckForTimeOut+0xbc>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	69ba      	ldr	r2, [r7, #24]
 8003992:	1ad3      	subs	r3, r2, r3
 8003994:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800399e:	d102      	bne.n	80039a6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80039a0:	2300      	movs	r3, #0
 80039a2:	61fb      	str	r3, [r7, #28]
 80039a4:	e023      	b.n	80039ee <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681a      	ldr	r2, [r3, #0]
 80039aa:	4b15      	ldr	r3, [pc, #84]	; (8003a00 <xTaskCheckForTimeOut+0xc0>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	429a      	cmp	r2, r3
 80039b0:	d007      	beq.n	80039c2 <xTaskCheckForTimeOut+0x82>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	69ba      	ldr	r2, [r7, #24]
 80039b8:	429a      	cmp	r2, r3
 80039ba:	d302      	bcc.n	80039c2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80039bc:	2301      	movs	r3, #1
 80039be:	61fb      	str	r3, [r7, #28]
 80039c0:	e015      	b.n	80039ee <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	697a      	ldr	r2, [r7, #20]
 80039c8:	429a      	cmp	r2, r3
 80039ca:	d20b      	bcs.n	80039e4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	681a      	ldr	r2, [r3, #0]
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	1ad2      	subs	r2, r2, r3
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80039d8:	6878      	ldr	r0, [r7, #4]
 80039da:	f7ff ff9b 	bl	8003914 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80039de:	2300      	movs	r3, #0
 80039e0:	61fb      	str	r3, [r7, #28]
 80039e2:	e004      	b.n	80039ee <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	2200      	movs	r2, #0
 80039e8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80039ea:	2301      	movs	r3, #1
 80039ec:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80039ee:	f000 fb51 	bl	8004094 <vPortExitCritical>

	return xReturn;
 80039f2:	69fb      	ldr	r3, [r7, #28]
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	3720      	adds	r7, #32
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}
 80039fc:	200003ec 	.word	0x200003ec
 8003a00:	20000400 	.word	0x20000400

08003a04 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003a04:	b480      	push	{r7}
 8003a06:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003a08:	4b03      	ldr	r3, [pc, #12]	; (8003a18 <vTaskMissedYield+0x14>)
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	601a      	str	r2, [r3, #0]
}
 8003a0e:	bf00      	nop
 8003a10:	46bd      	mov	sp, r7
 8003a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a16:	4770      	bx	lr
 8003a18:	200003fc 	.word	0x200003fc

08003a1c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b082      	sub	sp, #8
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003a24:	f000 f852 	bl	8003acc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003a28:	4b06      	ldr	r3, [pc, #24]	; (8003a44 <prvIdleTask+0x28>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	d9f9      	bls.n	8003a24 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003a30:	4b05      	ldr	r3, [pc, #20]	; (8003a48 <prvIdleTask+0x2c>)
 8003a32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a36:	601a      	str	r2, [r3, #0]
 8003a38:	f3bf 8f4f 	dsb	sy
 8003a3c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003a40:	e7f0      	b.n	8003a24 <prvIdleTask+0x8>
 8003a42:	bf00      	nop
 8003a44:	200002ec 	.word	0x200002ec
 8003a48:	e000ed04 	.word	0xe000ed04

08003a4c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b082      	sub	sp, #8
 8003a50:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003a52:	2300      	movs	r3, #0
 8003a54:	607b      	str	r3, [r7, #4]
 8003a56:	e00c      	b.n	8003a72 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003a58:	687a      	ldr	r2, [r7, #4]
 8003a5a:	4613      	mov	r3, r2
 8003a5c:	009b      	lsls	r3, r3, #2
 8003a5e:	4413      	add	r3, r2
 8003a60:	009b      	lsls	r3, r3, #2
 8003a62:	4a12      	ldr	r2, [pc, #72]	; (8003aac <prvInitialiseTaskLists+0x60>)
 8003a64:	4413      	add	r3, r2
 8003a66:	4618      	mov	r0, r3
 8003a68:	f7fe fe84 	bl	8002774 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	3301      	adds	r3, #1
 8003a70:	607b      	str	r3, [r7, #4]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2b06      	cmp	r3, #6
 8003a76:	d9ef      	bls.n	8003a58 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003a78:	480d      	ldr	r0, [pc, #52]	; (8003ab0 <prvInitialiseTaskLists+0x64>)
 8003a7a:	f7fe fe7b 	bl	8002774 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003a7e:	480d      	ldr	r0, [pc, #52]	; (8003ab4 <prvInitialiseTaskLists+0x68>)
 8003a80:	f7fe fe78 	bl	8002774 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003a84:	480c      	ldr	r0, [pc, #48]	; (8003ab8 <prvInitialiseTaskLists+0x6c>)
 8003a86:	f7fe fe75 	bl	8002774 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003a8a:	480c      	ldr	r0, [pc, #48]	; (8003abc <prvInitialiseTaskLists+0x70>)
 8003a8c:	f7fe fe72 	bl	8002774 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003a90:	480b      	ldr	r0, [pc, #44]	; (8003ac0 <prvInitialiseTaskLists+0x74>)
 8003a92:	f7fe fe6f 	bl	8002774 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003a96:	4b0b      	ldr	r3, [pc, #44]	; (8003ac4 <prvInitialiseTaskLists+0x78>)
 8003a98:	4a05      	ldr	r2, [pc, #20]	; (8003ab0 <prvInitialiseTaskLists+0x64>)
 8003a9a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003a9c:	4b0a      	ldr	r3, [pc, #40]	; (8003ac8 <prvInitialiseTaskLists+0x7c>)
 8003a9e:	4a05      	ldr	r2, [pc, #20]	; (8003ab4 <prvInitialiseTaskLists+0x68>)
 8003aa0:	601a      	str	r2, [r3, #0]
}
 8003aa2:	bf00      	nop
 8003aa4:	3708      	adds	r7, #8
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}
 8003aaa:	bf00      	nop
 8003aac:	200002ec 	.word	0x200002ec
 8003ab0:	20000378 	.word	0x20000378
 8003ab4:	2000038c 	.word	0x2000038c
 8003ab8:	200003a8 	.word	0x200003a8
 8003abc:	200003bc 	.word	0x200003bc
 8003ac0:	200003d4 	.word	0x200003d4
 8003ac4:	200003a0 	.word	0x200003a0
 8003ac8:	200003a4 	.word	0x200003a4

08003acc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b082      	sub	sp, #8
 8003ad0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003ad2:	e019      	b.n	8003b08 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003ad4:	f000 faae 	bl	8004034 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ad8:	4b10      	ldr	r3, [pc, #64]	; (8003b1c <prvCheckTasksWaitingTermination+0x50>)
 8003ada:	68db      	ldr	r3, [r3, #12]
 8003adc:	68db      	ldr	r3, [r3, #12]
 8003ade:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	3304      	adds	r3, #4
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f7fe fecf 	bl	8002888 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003aea:	4b0d      	ldr	r3, [pc, #52]	; (8003b20 <prvCheckTasksWaitingTermination+0x54>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	3b01      	subs	r3, #1
 8003af0:	4a0b      	ldr	r2, [pc, #44]	; (8003b20 <prvCheckTasksWaitingTermination+0x54>)
 8003af2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003af4:	4b0b      	ldr	r3, [pc, #44]	; (8003b24 <prvCheckTasksWaitingTermination+0x58>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	3b01      	subs	r3, #1
 8003afa:	4a0a      	ldr	r2, [pc, #40]	; (8003b24 <prvCheckTasksWaitingTermination+0x58>)
 8003afc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003afe:	f000 fac9 	bl	8004094 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	f000 f810 	bl	8003b28 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003b08:	4b06      	ldr	r3, [pc, #24]	; (8003b24 <prvCheckTasksWaitingTermination+0x58>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d1e1      	bne.n	8003ad4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003b10:	bf00      	nop
 8003b12:	bf00      	nop
 8003b14:	3708      	adds	r7, #8
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}
 8003b1a:	bf00      	nop
 8003b1c:	200003bc 	.word	0x200003bc
 8003b20:	200003e8 	.word	0x200003e8
 8003b24:	200003d0 	.word	0x200003d0

08003b28 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b084      	sub	sp, #16
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d108      	bne.n	8003b4c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f000 fc26 	bl	8004390 <vPortFree>
				vPortFree( pxTCB );
 8003b44:	6878      	ldr	r0, [r7, #4]
 8003b46:	f000 fc23 	bl	8004390 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003b4a:	e018      	b.n	8003b7e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003b52:	2b01      	cmp	r3, #1
 8003b54:	d103      	bne.n	8003b5e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	f000 fc1a 	bl	8004390 <vPortFree>
	}
 8003b5c:	e00f      	b.n	8003b7e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003b64:	2b02      	cmp	r3, #2
 8003b66:	d00a      	beq.n	8003b7e <prvDeleteTCB+0x56>
	__asm volatile
 8003b68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b6c:	f383 8811 	msr	BASEPRI, r3
 8003b70:	f3bf 8f6f 	isb	sy
 8003b74:	f3bf 8f4f 	dsb	sy
 8003b78:	60fb      	str	r3, [r7, #12]
}
 8003b7a:	bf00      	nop
 8003b7c:	e7fe      	b.n	8003b7c <prvDeleteTCB+0x54>
	}
 8003b7e:	bf00      	nop
 8003b80:	3710      	adds	r7, #16
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd80      	pop	{r7, pc}
	...

08003b88 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b083      	sub	sp, #12
 8003b8c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003b8e:	4b0c      	ldr	r3, [pc, #48]	; (8003bc0 <prvResetNextTaskUnblockTime+0x38>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d104      	bne.n	8003ba2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003b98:	4b0a      	ldr	r3, [pc, #40]	; (8003bc4 <prvResetNextTaskUnblockTime+0x3c>)
 8003b9a:	f04f 32ff 	mov.w	r2, #4294967295
 8003b9e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003ba0:	e008      	b.n	8003bb4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ba2:	4b07      	ldr	r3, [pc, #28]	; (8003bc0 <prvResetNextTaskUnblockTime+0x38>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	68db      	ldr	r3, [r3, #12]
 8003ba8:	68db      	ldr	r3, [r3, #12]
 8003baa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	4a04      	ldr	r2, [pc, #16]	; (8003bc4 <prvResetNextTaskUnblockTime+0x3c>)
 8003bb2:	6013      	str	r3, [r2, #0]
}
 8003bb4:	bf00      	nop
 8003bb6:	370c      	adds	r7, #12
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbe:	4770      	bx	lr
 8003bc0:	200003a0 	.word	0x200003a0
 8003bc4:	20000408 	.word	0x20000408

08003bc8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003bc8:	b480      	push	{r7}
 8003bca:	b083      	sub	sp, #12
 8003bcc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003bce:	4b0b      	ldr	r3, [pc, #44]	; (8003bfc <xTaskGetSchedulerState+0x34>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d102      	bne.n	8003bdc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	607b      	str	r3, [r7, #4]
 8003bda:	e008      	b.n	8003bee <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003bdc:	4b08      	ldr	r3, [pc, #32]	; (8003c00 <xTaskGetSchedulerState+0x38>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d102      	bne.n	8003bea <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003be4:	2302      	movs	r3, #2
 8003be6:	607b      	str	r3, [r7, #4]
 8003be8:	e001      	b.n	8003bee <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003bea:	2300      	movs	r3, #0
 8003bec:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003bee:	687b      	ldr	r3, [r7, #4]
	}
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	370c      	adds	r7, #12
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfa:	4770      	bx	lr
 8003bfc:	200003f4 	.word	0x200003f4
 8003c00:	20000410 	.word	0x20000410

08003c04 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b086      	sub	sp, #24
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003c10:	2300      	movs	r3, #0
 8003c12:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d06e      	beq.n	8003cf8 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003c1a:	4b3a      	ldr	r3, [pc, #232]	; (8003d04 <xTaskPriorityDisinherit+0x100>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	693a      	ldr	r2, [r7, #16]
 8003c20:	429a      	cmp	r2, r3
 8003c22:	d00a      	beq.n	8003c3a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8003c24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c28:	f383 8811 	msr	BASEPRI, r3
 8003c2c:	f3bf 8f6f 	isb	sy
 8003c30:	f3bf 8f4f 	dsb	sy
 8003c34:	60fb      	str	r3, [r7, #12]
}
 8003c36:	bf00      	nop
 8003c38:	e7fe      	b.n	8003c38 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003c3a:	693b      	ldr	r3, [r7, #16]
 8003c3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d10a      	bne.n	8003c58 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8003c42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c46:	f383 8811 	msr	BASEPRI, r3
 8003c4a:	f3bf 8f6f 	isb	sy
 8003c4e:	f3bf 8f4f 	dsb	sy
 8003c52:	60bb      	str	r3, [r7, #8]
}
 8003c54:	bf00      	nop
 8003c56:	e7fe      	b.n	8003c56 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8003c58:	693b      	ldr	r3, [r7, #16]
 8003c5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c5c:	1e5a      	subs	r2, r3, #1
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c66:	693b      	ldr	r3, [r7, #16]
 8003c68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c6a:	429a      	cmp	r2, r3
 8003c6c:	d044      	beq.n	8003cf8 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d140      	bne.n	8003cf8 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	3304      	adds	r3, #4
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f7fe fe04 	bl	8002888 <uxListRemove>
 8003c80:	4603      	mov	r3, r0
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d115      	bne.n	8003cb2 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c8a:	491f      	ldr	r1, [pc, #124]	; (8003d08 <xTaskPriorityDisinherit+0x104>)
 8003c8c:	4613      	mov	r3, r2
 8003c8e:	009b      	lsls	r3, r3, #2
 8003c90:	4413      	add	r3, r2
 8003c92:	009b      	lsls	r3, r3, #2
 8003c94:	440b      	add	r3, r1
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d10a      	bne.n	8003cb2 <xTaskPriorityDisinherit+0xae>
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ca0:	2201      	movs	r2, #1
 8003ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca6:	43da      	mvns	r2, r3
 8003ca8:	4b18      	ldr	r3, [pc, #96]	; (8003d0c <xTaskPriorityDisinherit+0x108>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4013      	ands	r3, r2
 8003cae:	4a17      	ldr	r2, [pc, #92]	; (8003d0c <xTaskPriorityDisinherit+0x108>)
 8003cb0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cbe:	f1c3 0207 	rsb	r2, r3, #7
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cca:	2201      	movs	r2, #1
 8003ccc:	409a      	lsls	r2, r3
 8003cce:	4b0f      	ldr	r3, [pc, #60]	; (8003d0c <xTaskPriorityDisinherit+0x108>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	4a0d      	ldr	r2, [pc, #52]	; (8003d0c <xTaskPriorityDisinherit+0x108>)
 8003cd6:	6013      	str	r3, [r2, #0]
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cdc:	4613      	mov	r3, r2
 8003cde:	009b      	lsls	r3, r3, #2
 8003ce0:	4413      	add	r3, r2
 8003ce2:	009b      	lsls	r3, r3, #2
 8003ce4:	4a08      	ldr	r2, [pc, #32]	; (8003d08 <xTaskPriorityDisinherit+0x104>)
 8003ce6:	441a      	add	r2, r3
 8003ce8:	693b      	ldr	r3, [r7, #16]
 8003cea:	3304      	adds	r3, #4
 8003cec:	4619      	mov	r1, r3
 8003cee:	4610      	mov	r0, r2
 8003cf0:	f7fe fd6d 	bl	80027ce <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003cf8:	697b      	ldr	r3, [r7, #20]
	}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	3718      	adds	r7, #24
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}
 8003d02:	bf00      	nop
 8003d04:	200002e8 	.word	0x200002e8
 8003d08:	200002ec 	.word	0x200002ec
 8003d0c:	200003f0 	.word	0x200003f0

08003d10 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b084      	sub	sp, #16
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
 8003d18:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003d1a:	4b29      	ldr	r3, [pc, #164]	; (8003dc0 <prvAddCurrentTaskToDelayedList+0xb0>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003d20:	4b28      	ldr	r3, [pc, #160]	; (8003dc4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	3304      	adds	r3, #4
 8003d26:	4618      	mov	r0, r3
 8003d28:	f7fe fdae 	bl	8002888 <uxListRemove>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d10b      	bne.n	8003d4a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003d32:	4b24      	ldr	r3, [pc, #144]	; (8003dc4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d38:	2201      	movs	r2, #1
 8003d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d3e:	43da      	mvns	r2, r3
 8003d40:	4b21      	ldr	r3, [pc, #132]	; (8003dc8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4013      	ands	r3, r2
 8003d46:	4a20      	ldr	r2, [pc, #128]	; (8003dc8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003d48:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d50:	d10a      	bne.n	8003d68 <prvAddCurrentTaskToDelayedList+0x58>
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d007      	beq.n	8003d68 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003d58:	4b1a      	ldr	r3, [pc, #104]	; (8003dc4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	3304      	adds	r3, #4
 8003d5e:	4619      	mov	r1, r3
 8003d60:	481a      	ldr	r0, [pc, #104]	; (8003dcc <prvAddCurrentTaskToDelayedList+0xbc>)
 8003d62:	f7fe fd34 	bl	80027ce <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003d66:	e026      	b.n	8003db6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003d68:	68fa      	ldr	r2, [r7, #12]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	4413      	add	r3, r2
 8003d6e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003d70:	4b14      	ldr	r3, [pc, #80]	; (8003dc4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	68ba      	ldr	r2, [r7, #8]
 8003d76:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003d78:	68ba      	ldr	r2, [r7, #8]
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	429a      	cmp	r2, r3
 8003d7e:	d209      	bcs.n	8003d94 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003d80:	4b13      	ldr	r3, [pc, #76]	; (8003dd0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8003d82:	681a      	ldr	r2, [r3, #0]
 8003d84:	4b0f      	ldr	r3, [pc, #60]	; (8003dc4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	3304      	adds	r3, #4
 8003d8a:	4619      	mov	r1, r3
 8003d8c:	4610      	mov	r0, r2
 8003d8e:	f7fe fd42 	bl	8002816 <vListInsert>
}
 8003d92:	e010      	b.n	8003db6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003d94:	4b0f      	ldr	r3, [pc, #60]	; (8003dd4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8003d96:	681a      	ldr	r2, [r3, #0]
 8003d98:	4b0a      	ldr	r3, [pc, #40]	; (8003dc4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	3304      	adds	r3, #4
 8003d9e:	4619      	mov	r1, r3
 8003da0:	4610      	mov	r0, r2
 8003da2:	f7fe fd38 	bl	8002816 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003da6:	4b0c      	ldr	r3, [pc, #48]	; (8003dd8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	68ba      	ldr	r2, [r7, #8]
 8003dac:	429a      	cmp	r2, r3
 8003dae:	d202      	bcs.n	8003db6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003db0:	4a09      	ldr	r2, [pc, #36]	; (8003dd8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003db2:	68bb      	ldr	r3, [r7, #8]
 8003db4:	6013      	str	r3, [r2, #0]
}
 8003db6:	bf00      	nop
 8003db8:	3710      	adds	r7, #16
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bd80      	pop	{r7, pc}
 8003dbe:	bf00      	nop
 8003dc0:	200003ec 	.word	0x200003ec
 8003dc4:	200002e8 	.word	0x200002e8
 8003dc8:	200003f0 	.word	0x200003f0
 8003dcc:	200003d4 	.word	0x200003d4
 8003dd0:	200003a4 	.word	0x200003a4
 8003dd4:	200003a0 	.word	0x200003a0
 8003dd8:	20000408 	.word	0x20000408

08003ddc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b085      	sub	sp, #20
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	60f8      	str	r0, [r7, #12]
 8003de4:	60b9      	str	r1, [r7, #8]
 8003de6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	3b04      	subs	r3, #4
 8003dec:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003df4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	3b04      	subs	r3, #4
 8003dfa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	f023 0201 	bic.w	r2, r3, #1
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	3b04      	subs	r3, #4
 8003e0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003e0c:	4a0c      	ldr	r2, [pc, #48]	; (8003e40 <pxPortInitialiseStack+0x64>)
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	3b14      	subs	r3, #20
 8003e16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003e18:	687a      	ldr	r2, [r7, #4]
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	3b04      	subs	r3, #4
 8003e22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	f06f 0202 	mvn.w	r2, #2
 8003e2a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	3b20      	subs	r3, #32
 8003e30:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003e32:	68fb      	ldr	r3, [r7, #12]
}
 8003e34:	4618      	mov	r0, r3
 8003e36:	3714      	adds	r7, #20
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3e:	4770      	bx	lr
 8003e40:	08003e45 	.word	0x08003e45

08003e44 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003e44:	b480      	push	{r7}
 8003e46:	b085      	sub	sp, #20
 8003e48:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003e4e:	4b12      	ldr	r3, [pc, #72]	; (8003e98 <prvTaskExitError+0x54>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e56:	d00a      	beq.n	8003e6e <prvTaskExitError+0x2a>
	__asm volatile
 8003e58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e5c:	f383 8811 	msr	BASEPRI, r3
 8003e60:	f3bf 8f6f 	isb	sy
 8003e64:	f3bf 8f4f 	dsb	sy
 8003e68:	60fb      	str	r3, [r7, #12]
}
 8003e6a:	bf00      	nop
 8003e6c:	e7fe      	b.n	8003e6c <prvTaskExitError+0x28>
	__asm volatile
 8003e6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e72:	f383 8811 	msr	BASEPRI, r3
 8003e76:	f3bf 8f6f 	isb	sy
 8003e7a:	f3bf 8f4f 	dsb	sy
 8003e7e:	60bb      	str	r3, [r7, #8]
}
 8003e80:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003e82:	bf00      	nop
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d0fc      	beq.n	8003e84 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003e8a:	bf00      	nop
 8003e8c:	bf00      	nop
 8003e8e:	3714      	adds	r7, #20
 8003e90:	46bd      	mov	sp, r7
 8003e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e96:	4770      	bx	lr
 8003e98:	2000000c 	.word	0x2000000c
 8003e9c:	00000000 	.word	0x00000000

08003ea0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003ea0:	4b07      	ldr	r3, [pc, #28]	; (8003ec0 <pxCurrentTCBConst2>)
 8003ea2:	6819      	ldr	r1, [r3, #0]
 8003ea4:	6808      	ldr	r0, [r1, #0]
 8003ea6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003eaa:	f380 8809 	msr	PSP, r0
 8003eae:	f3bf 8f6f 	isb	sy
 8003eb2:	f04f 0000 	mov.w	r0, #0
 8003eb6:	f380 8811 	msr	BASEPRI, r0
 8003eba:	4770      	bx	lr
 8003ebc:	f3af 8000 	nop.w

08003ec0 <pxCurrentTCBConst2>:
 8003ec0:	200002e8 	.word	0x200002e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003ec4:	bf00      	nop
 8003ec6:	bf00      	nop

08003ec8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003ec8:	4808      	ldr	r0, [pc, #32]	; (8003eec <prvPortStartFirstTask+0x24>)
 8003eca:	6800      	ldr	r0, [r0, #0]
 8003ecc:	6800      	ldr	r0, [r0, #0]
 8003ece:	f380 8808 	msr	MSP, r0
 8003ed2:	f04f 0000 	mov.w	r0, #0
 8003ed6:	f380 8814 	msr	CONTROL, r0
 8003eda:	b662      	cpsie	i
 8003edc:	b661      	cpsie	f
 8003ede:	f3bf 8f4f 	dsb	sy
 8003ee2:	f3bf 8f6f 	isb	sy
 8003ee6:	df00      	svc	0
 8003ee8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003eea:	bf00      	nop
 8003eec:	e000ed08 	.word	0xe000ed08

08003ef0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b086      	sub	sp, #24
 8003ef4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003ef6:	4b46      	ldr	r3, [pc, #280]	; (8004010 <xPortStartScheduler+0x120>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a46      	ldr	r2, [pc, #280]	; (8004014 <xPortStartScheduler+0x124>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d10a      	bne.n	8003f16 <xPortStartScheduler+0x26>
	__asm volatile
 8003f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f04:	f383 8811 	msr	BASEPRI, r3
 8003f08:	f3bf 8f6f 	isb	sy
 8003f0c:	f3bf 8f4f 	dsb	sy
 8003f10:	613b      	str	r3, [r7, #16]
}
 8003f12:	bf00      	nop
 8003f14:	e7fe      	b.n	8003f14 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003f16:	4b3e      	ldr	r3, [pc, #248]	; (8004010 <xPortStartScheduler+0x120>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a3f      	ldr	r2, [pc, #252]	; (8004018 <xPortStartScheduler+0x128>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d10a      	bne.n	8003f36 <xPortStartScheduler+0x46>
	__asm volatile
 8003f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f24:	f383 8811 	msr	BASEPRI, r3
 8003f28:	f3bf 8f6f 	isb	sy
 8003f2c:	f3bf 8f4f 	dsb	sy
 8003f30:	60fb      	str	r3, [r7, #12]
}
 8003f32:	bf00      	nop
 8003f34:	e7fe      	b.n	8003f34 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003f36:	4b39      	ldr	r3, [pc, #228]	; (800401c <xPortStartScheduler+0x12c>)
 8003f38:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003f3a:	697b      	ldr	r3, [r7, #20]
 8003f3c:	781b      	ldrb	r3, [r3, #0]
 8003f3e:	b2db      	uxtb	r3, r3
 8003f40:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	22ff      	movs	r2, #255	; 0xff
 8003f46:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003f48:	697b      	ldr	r3, [r7, #20]
 8003f4a:	781b      	ldrb	r3, [r3, #0]
 8003f4c:	b2db      	uxtb	r3, r3
 8003f4e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003f50:	78fb      	ldrb	r3, [r7, #3]
 8003f52:	b2db      	uxtb	r3, r3
 8003f54:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003f58:	b2da      	uxtb	r2, r3
 8003f5a:	4b31      	ldr	r3, [pc, #196]	; (8004020 <xPortStartScheduler+0x130>)
 8003f5c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003f5e:	4b31      	ldr	r3, [pc, #196]	; (8004024 <xPortStartScheduler+0x134>)
 8003f60:	2207      	movs	r2, #7
 8003f62:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003f64:	e009      	b.n	8003f7a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8003f66:	4b2f      	ldr	r3, [pc, #188]	; (8004024 <xPortStartScheduler+0x134>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	3b01      	subs	r3, #1
 8003f6c:	4a2d      	ldr	r2, [pc, #180]	; (8004024 <xPortStartScheduler+0x134>)
 8003f6e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003f70:	78fb      	ldrb	r3, [r7, #3]
 8003f72:	b2db      	uxtb	r3, r3
 8003f74:	005b      	lsls	r3, r3, #1
 8003f76:	b2db      	uxtb	r3, r3
 8003f78:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003f7a:	78fb      	ldrb	r3, [r7, #3]
 8003f7c:	b2db      	uxtb	r3, r3
 8003f7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f82:	2b80      	cmp	r3, #128	; 0x80
 8003f84:	d0ef      	beq.n	8003f66 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003f86:	4b27      	ldr	r3, [pc, #156]	; (8004024 <xPortStartScheduler+0x134>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f1c3 0307 	rsb	r3, r3, #7
 8003f8e:	2b04      	cmp	r3, #4
 8003f90:	d00a      	beq.n	8003fa8 <xPortStartScheduler+0xb8>
	__asm volatile
 8003f92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f96:	f383 8811 	msr	BASEPRI, r3
 8003f9a:	f3bf 8f6f 	isb	sy
 8003f9e:	f3bf 8f4f 	dsb	sy
 8003fa2:	60bb      	str	r3, [r7, #8]
}
 8003fa4:	bf00      	nop
 8003fa6:	e7fe      	b.n	8003fa6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003fa8:	4b1e      	ldr	r3, [pc, #120]	; (8004024 <xPortStartScheduler+0x134>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	021b      	lsls	r3, r3, #8
 8003fae:	4a1d      	ldr	r2, [pc, #116]	; (8004024 <xPortStartScheduler+0x134>)
 8003fb0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003fb2:	4b1c      	ldr	r3, [pc, #112]	; (8004024 <xPortStartScheduler+0x134>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003fba:	4a1a      	ldr	r2, [pc, #104]	; (8004024 <xPortStartScheduler+0x134>)
 8003fbc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	b2da      	uxtb	r2, r3
 8003fc2:	697b      	ldr	r3, [r7, #20]
 8003fc4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003fc6:	4b18      	ldr	r3, [pc, #96]	; (8004028 <xPortStartScheduler+0x138>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a17      	ldr	r2, [pc, #92]	; (8004028 <xPortStartScheduler+0x138>)
 8003fcc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003fd0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003fd2:	4b15      	ldr	r3, [pc, #84]	; (8004028 <xPortStartScheduler+0x138>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a14      	ldr	r2, [pc, #80]	; (8004028 <xPortStartScheduler+0x138>)
 8003fd8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003fdc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003fde:	f000 f8dd 	bl	800419c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003fe2:	4b12      	ldr	r3, [pc, #72]	; (800402c <xPortStartScheduler+0x13c>)
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003fe8:	f000 f8fc 	bl	80041e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003fec:	4b10      	ldr	r3, [pc, #64]	; (8004030 <xPortStartScheduler+0x140>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a0f      	ldr	r2, [pc, #60]	; (8004030 <xPortStartScheduler+0x140>)
 8003ff2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003ff6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003ff8:	f7ff ff66 	bl	8003ec8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003ffc:	f7ff fba8 	bl	8003750 <vTaskSwitchContext>
	prvTaskExitError();
 8004000:	f7ff ff20 	bl	8003e44 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004004:	2300      	movs	r3, #0
}
 8004006:	4618      	mov	r0, r3
 8004008:	3718      	adds	r7, #24
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}
 800400e:	bf00      	nop
 8004010:	e000ed00 	.word	0xe000ed00
 8004014:	410fc271 	.word	0x410fc271
 8004018:	410fc270 	.word	0x410fc270
 800401c:	e000e400 	.word	0xe000e400
 8004020:	20000414 	.word	0x20000414
 8004024:	20000418 	.word	0x20000418
 8004028:	e000ed20 	.word	0xe000ed20
 800402c:	2000000c 	.word	0x2000000c
 8004030:	e000ef34 	.word	0xe000ef34

08004034 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004034:	b480      	push	{r7}
 8004036:	b083      	sub	sp, #12
 8004038:	af00      	add	r7, sp, #0
	__asm volatile
 800403a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800403e:	f383 8811 	msr	BASEPRI, r3
 8004042:	f3bf 8f6f 	isb	sy
 8004046:	f3bf 8f4f 	dsb	sy
 800404a:	607b      	str	r3, [r7, #4]
}
 800404c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800404e:	4b0f      	ldr	r3, [pc, #60]	; (800408c <vPortEnterCritical+0x58>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	3301      	adds	r3, #1
 8004054:	4a0d      	ldr	r2, [pc, #52]	; (800408c <vPortEnterCritical+0x58>)
 8004056:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004058:	4b0c      	ldr	r3, [pc, #48]	; (800408c <vPortEnterCritical+0x58>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	2b01      	cmp	r3, #1
 800405e:	d10f      	bne.n	8004080 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004060:	4b0b      	ldr	r3, [pc, #44]	; (8004090 <vPortEnterCritical+0x5c>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	b2db      	uxtb	r3, r3
 8004066:	2b00      	cmp	r3, #0
 8004068:	d00a      	beq.n	8004080 <vPortEnterCritical+0x4c>
	__asm volatile
 800406a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800406e:	f383 8811 	msr	BASEPRI, r3
 8004072:	f3bf 8f6f 	isb	sy
 8004076:	f3bf 8f4f 	dsb	sy
 800407a:	603b      	str	r3, [r7, #0]
}
 800407c:	bf00      	nop
 800407e:	e7fe      	b.n	800407e <vPortEnterCritical+0x4a>
	}
}
 8004080:	bf00      	nop
 8004082:	370c      	adds	r7, #12
 8004084:	46bd      	mov	sp, r7
 8004086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408a:	4770      	bx	lr
 800408c:	2000000c 	.word	0x2000000c
 8004090:	e000ed04 	.word	0xe000ed04

08004094 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004094:	b480      	push	{r7}
 8004096:	b083      	sub	sp, #12
 8004098:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800409a:	4b12      	ldr	r3, [pc, #72]	; (80040e4 <vPortExitCritical+0x50>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d10a      	bne.n	80040b8 <vPortExitCritical+0x24>
	__asm volatile
 80040a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040a6:	f383 8811 	msr	BASEPRI, r3
 80040aa:	f3bf 8f6f 	isb	sy
 80040ae:	f3bf 8f4f 	dsb	sy
 80040b2:	607b      	str	r3, [r7, #4]
}
 80040b4:	bf00      	nop
 80040b6:	e7fe      	b.n	80040b6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80040b8:	4b0a      	ldr	r3, [pc, #40]	; (80040e4 <vPortExitCritical+0x50>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	3b01      	subs	r3, #1
 80040be:	4a09      	ldr	r2, [pc, #36]	; (80040e4 <vPortExitCritical+0x50>)
 80040c0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80040c2:	4b08      	ldr	r3, [pc, #32]	; (80040e4 <vPortExitCritical+0x50>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d105      	bne.n	80040d6 <vPortExitCritical+0x42>
 80040ca:	2300      	movs	r3, #0
 80040cc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80040d4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80040d6:	bf00      	nop
 80040d8:	370c      	adds	r7, #12
 80040da:	46bd      	mov	sp, r7
 80040dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e0:	4770      	bx	lr
 80040e2:	bf00      	nop
 80040e4:	2000000c 	.word	0x2000000c
	...

080040f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80040f0:	f3ef 8009 	mrs	r0, PSP
 80040f4:	f3bf 8f6f 	isb	sy
 80040f8:	4b15      	ldr	r3, [pc, #84]	; (8004150 <pxCurrentTCBConst>)
 80040fa:	681a      	ldr	r2, [r3, #0]
 80040fc:	f01e 0f10 	tst.w	lr, #16
 8004100:	bf08      	it	eq
 8004102:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004106:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800410a:	6010      	str	r0, [r2, #0]
 800410c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004110:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004114:	f380 8811 	msr	BASEPRI, r0
 8004118:	f3bf 8f4f 	dsb	sy
 800411c:	f3bf 8f6f 	isb	sy
 8004120:	f7ff fb16 	bl	8003750 <vTaskSwitchContext>
 8004124:	f04f 0000 	mov.w	r0, #0
 8004128:	f380 8811 	msr	BASEPRI, r0
 800412c:	bc09      	pop	{r0, r3}
 800412e:	6819      	ldr	r1, [r3, #0]
 8004130:	6808      	ldr	r0, [r1, #0]
 8004132:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004136:	f01e 0f10 	tst.w	lr, #16
 800413a:	bf08      	it	eq
 800413c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004140:	f380 8809 	msr	PSP, r0
 8004144:	f3bf 8f6f 	isb	sy
 8004148:	4770      	bx	lr
 800414a:	bf00      	nop
 800414c:	f3af 8000 	nop.w

08004150 <pxCurrentTCBConst>:
 8004150:	200002e8 	.word	0x200002e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004154:	bf00      	nop
 8004156:	bf00      	nop

08004158 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b082      	sub	sp, #8
 800415c:	af00      	add	r7, sp, #0
	__asm volatile
 800415e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004162:	f383 8811 	msr	BASEPRI, r3
 8004166:	f3bf 8f6f 	isb	sy
 800416a:	f3bf 8f4f 	dsb	sy
 800416e:	607b      	str	r3, [r7, #4]
}
 8004170:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004172:	f7ff fa35 	bl	80035e0 <xTaskIncrementTick>
 8004176:	4603      	mov	r3, r0
 8004178:	2b00      	cmp	r3, #0
 800417a:	d003      	beq.n	8004184 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800417c:	4b06      	ldr	r3, [pc, #24]	; (8004198 <SysTick_Handler+0x40>)
 800417e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004182:	601a      	str	r2, [r3, #0]
 8004184:	2300      	movs	r3, #0
 8004186:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	f383 8811 	msr	BASEPRI, r3
}
 800418e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004190:	bf00      	nop
 8004192:	3708      	adds	r7, #8
 8004194:	46bd      	mov	sp, r7
 8004196:	bd80      	pop	{r7, pc}
 8004198:	e000ed04 	.word	0xe000ed04

0800419c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800419c:	b480      	push	{r7}
 800419e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80041a0:	4b0b      	ldr	r3, [pc, #44]	; (80041d0 <vPortSetupTimerInterrupt+0x34>)
 80041a2:	2200      	movs	r2, #0
 80041a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80041a6:	4b0b      	ldr	r3, [pc, #44]	; (80041d4 <vPortSetupTimerInterrupt+0x38>)
 80041a8:	2200      	movs	r2, #0
 80041aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80041ac:	4b0a      	ldr	r3, [pc, #40]	; (80041d8 <vPortSetupTimerInterrupt+0x3c>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a0a      	ldr	r2, [pc, #40]	; (80041dc <vPortSetupTimerInterrupt+0x40>)
 80041b2:	fba2 2303 	umull	r2, r3, r2, r3
 80041b6:	099b      	lsrs	r3, r3, #6
 80041b8:	4a09      	ldr	r2, [pc, #36]	; (80041e0 <vPortSetupTimerInterrupt+0x44>)
 80041ba:	3b01      	subs	r3, #1
 80041bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80041be:	4b04      	ldr	r3, [pc, #16]	; (80041d0 <vPortSetupTimerInterrupt+0x34>)
 80041c0:	2207      	movs	r2, #7
 80041c2:	601a      	str	r2, [r3, #0]
}
 80041c4:	bf00      	nop
 80041c6:	46bd      	mov	sp, r7
 80041c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041cc:	4770      	bx	lr
 80041ce:	bf00      	nop
 80041d0:	e000e010 	.word	0xe000e010
 80041d4:	e000e018 	.word	0xe000e018
 80041d8:	20000000 	.word	0x20000000
 80041dc:	10624dd3 	.word	0x10624dd3
 80041e0:	e000e014 	.word	0xe000e014

080041e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80041e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80041f4 <vPortEnableVFP+0x10>
 80041e8:	6801      	ldr	r1, [r0, #0]
 80041ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80041ee:	6001      	str	r1, [r0, #0]
 80041f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80041f2:	bf00      	nop
 80041f4:	e000ed88 	.word	0xe000ed88

080041f8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b08a      	sub	sp, #40	; 0x28
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004200:	2300      	movs	r3, #0
 8004202:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004204:	f7ff f942 	bl	800348c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004208:	4b5b      	ldr	r3, [pc, #364]	; (8004378 <pvPortMalloc+0x180>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d101      	bne.n	8004214 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004210:	f000 f920 	bl	8004454 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004214:	4b59      	ldr	r3, [pc, #356]	; (800437c <pvPortMalloc+0x184>)
 8004216:	681a      	ldr	r2, [r3, #0]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	4013      	ands	r3, r2
 800421c:	2b00      	cmp	r3, #0
 800421e:	f040 8093 	bne.w	8004348 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d01d      	beq.n	8004264 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004228:	2208      	movs	r2, #8
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	4413      	add	r3, r2
 800422e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	f003 0307 	and.w	r3, r3, #7
 8004236:	2b00      	cmp	r3, #0
 8004238:	d014      	beq.n	8004264 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	f023 0307 	bic.w	r3, r3, #7
 8004240:	3308      	adds	r3, #8
 8004242:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	f003 0307 	and.w	r3, r3, #7
 800424a:	2b00      	cmp	r3, #0
 800424c:	d00a      	beq.n	8004264 <pvPortMalloc+0x6c>
	__asm volatile
 800424e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004252:	f383 8811 	msr	BASEPRI, r3
 8004256:	f3bf 8f6f 	isb	sy
 800425a:	f3bf 8f4f 	dsb	sy
 800425e:	617b      	str	r3, [r7, #20]
}
 8004260:	bf00      	nop
 8004262:	e7fe      	b.n	8004262 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d06e      	beq.n	8004348 <pvPortMalloc+0x150>
 800426a:	4b45      	ldr	r3, [pc, #276]	; (8004380 <pvPortMalloc+0x188>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	687a      	ldr	r2, [r7, #4]
 8004270:	429a      	cmp	r2, r3
 8004272:	d869      	bhi.n	8004348 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004274:	4b43      	ldr	r3, [pc, #268]	; (8004384 <pvPortMalloc+0x18c>)
 8004276:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004278:	4b42      	ldr	r3, [pc, #264]	; (8004384 <pvPortMalloc+0x18c>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800427e:	e004      	b.n	800428a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004282:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800428a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	687a      	ldr	r2, [r7, #4]
 8004290:	429a      	cmp	r2, r3
 8004292:	d903      	bls.n	800429c <pvPortMalloc+0xa4>
 8004294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d1f1      	bne.n	8004280 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800429c:	4b36      	ldr	r3, [pc, #216]	; (8004378 <pvPortMalloc+0x180>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042a2:	429a      	cmp	r2, r3
 80042a4:	d050      	beq.n	8004348 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80042a6:	6a3b      	ldr	r3, [r7, #32]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	2208      	movs	r2, #8
 80042ac:	4413      	add	r3, r2
 80042ae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80042b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b2:	681a      	ldr	r2, [r3, #0]
 80042b4:	6a3b      	ldr	r3, [r7, #32]
 80042b6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80042b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ba:	685a      	ldr	r2, [r3, #4]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	1ad2      	subs	r2, r2, r3
 80042c0:	2308      	movs	r3, #8
 80042c2:	005b      	lsls	r3, r3, #1
 80042c4:	429a      	cmp	r2, r3
 80042c6:	d91f      	bls.n	8004308 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80042c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	4413      	add	r3, r2
 80042ce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80042d0:	69bb      	ldr	r3, [r7, #24]
 80042d2:	f003 0307 	and.w	r3, r3, #7
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d00a      	beq.n	80042f0 <pvPortMalloc+0xf8>
	__asm volatile
 80042da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042de:	f383 8811 	msr	BASEPRI, r3
 80042e2:	f3bf 8f6f 	isb	sy
 80042e6:	f3bf 8f4f 	dsb	sy
 80042ea:	613b      	str	r3, [r7, #16]
}
 80042ec:	bf00      	nop
 80042ee:	e7fe      	b.n	80042ee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80042f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f2:	685a      	ldr	r2, [r3, #4]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	1ad2      	subs	r2, r2, r3
 80042f8:	69bb      	ldr	r3, [r7, #24]
 80042fa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80042fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042fe:	687a      	ldr	r2, [r7, #4]
 8004300:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004302:	69b8      	ldr	r0, [r7, #24]
 8004304:	f000 f908 	bl	8004518 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004308:	4b1d      	ldr	r3, [pc, #116]	; (8004380 <pvPortMalloc+0x188>)
 800430a:	681a      	ldr	r2, [r3, #0]
 800430c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	1ad3      	subs	r3, r2, r3
 8004312:	4a1b      	ldr	r2, [pc, #108]	; (8004380 <pvPortMalloc+0x188>)
 8004314:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004316:	4b1a      	ldr	r3, [pc, #104]	; (8004380 <pvPortMalloc+0x188>)
 8004318:	681a      	ldr	r2, [r3, #0]
 800431a:	4b1b      	ldr	r3, [pc, #108]	; (8004388 <pvPortMalloc+0x190>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	429a      	cmp	r2, r3
 8004320:	d203      	bcs.n	800432a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004322:	4b17      	ldr	r3, [pc, #92]	; (8004380 <pvPortMalloc+0x188>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a18      	ldr	r2, [pc, #96]	; (8004388 <pvPortMalloc+0x190>)
 8004328:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800432a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800432c:	685a      	ldr	r2, [r3, #4]
 800432e:	4b13      	ldr	r3, [pc, #76]	; (800437c <pvPortMalloc+0x184>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	431a      	orrs	r2, r3
 8004334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004336:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800433a:	2200      	movs	r2, #0
 800433c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800433e:	4b13      	ldr	r3, [pc, #76]	; (800438c <pvPortMalloc+0x194>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	3301      	adds	r3, #1
 8004344:	4a11      	ldr	r2, [pc, #68]	; (800438c <pvPortMalloc+0x194>)
 8004346:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004348:	f7ff f8ae 	bl	80034a8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800434c:	69fb      	ldr	r3, [r7, #28]
 800434e:	f003 0307 	and.w	r3, r3, #7
 8004352:	2b00      	cmp	r3, #0
 8004354:	d00a      	beq.n	800436c <pvPortMalloc+0x174>
	__asm volatile
 8004356:	f04f 0350 	mov.w	r3, #80	; 0x50
 800435a:	f383 8811 	msr	BASEPRI, r3
 800435e:	f3bf 8f6f 	isb	sy
 8004362:	f3bf 8f4f 	dsb	sy
 8004366:	60fb      	str	r3, [r7, #12]
}
 8004368:	bf00      	nop
 800436a:	e7fe      	b.n	800436a <pvPortMalloc+0x172>
	return pvReturn;
 800436c:	69fb      	ldr	r3, [r7, #28]
}
 800436e:	4618      	mov	r0, r3
 8004370:	3728      	adds	r7, #40	; 0x28
 8004372:	46bd      	mov	sp, r7
 8004374:	bd80      	pop	{r7, pc}
 8004376:	bf00      	nop
 8004378:	20004024 	.word	0x20004024
 800437c:	20004038 	.word	0x20004038
 8004380:	20004028 	.word	0x20004028
 8004384:	2000401c 	.word	0x2000401c
 8004388:	2000402c 	.word	0x2000402c
 800438c:	20004030 	.word	0x20004030

08004390 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b086      	sub	sp, #24
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d04d      	beq.n	800443e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80043a2:	2308      	movs	r3, #8
 80043a4:	425b      	negs	r3, r3
 80043a6:	697a      	ldr	r2, [r7, #20]
 80043a8:	4413      	add	r3, r2
 80043aa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80043ac:	697b      	ldr	r3, [r7, #20]
 80043ae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80043b0:	693b      	ldr	r3, [r7, #16]
 80043b2:	685a      	ldr	r2, [r3, #4]
 80043b4:	4b24      	ldr	r3, [pc, #144]	; (8004448 <vPortFree+0xb8>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4013      	ands	r3, r2
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d10a      	bne.n	80043d4 <vPortFree+0x44>
	__asm volatile
 80043be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043c2:	f383 8811 	msr	BASEPRI, r3
 80043c6:	f3bf 8f6f 	isb	sy
 80043ca:	f3bf 8f4f 	dsb	sy
 80043ce:	60fb      	str	r3, [r7, #12]
}
 80043d0:	bf00      	nop
 80043d2:	e7fe      	b.n	80043d2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80043d4:	693b      	ldr	r3, [r7, #16]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d00a      	beq.n	80043f2 <vPortFree+0x62>
	__asm volatile
 80043dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043e0:	f383 8811 	msr	BASEPRI, r3
 80043e4:	f3bf 8f6f 	isb	sy
 80043e8:	f3bf 8f4f 	dsb	sy
 80043ec:	60bb      	str	r3, [r7, #8]
}
 80043ee:	bf00      	nop
 80043f0:	e7fe      	b.n	80043f0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80043f2:	693b      	ldr	r3, [r7, #16]
 80043f4:	685a      	ldr	r2, [r3, #4]
 80043f6:	4b14      	ldr	r3, [pc, #80]	; (8004448 <vPortFree+0xb8>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4013      	ands	r3, r2
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d01e      	beq.n	800443e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004400:	693b      	ldr	r3, [r7, #16]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d11a      	bne.n	800443e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004408:	693b      	ldr	r3, [r7, #16]
 800440a:	685a      	ldr	r2, [r3, #4]
 800440c:	4b0e      	ldr	r3, [pc, #56]	; (8004448 <vPortFree+0xb8>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	43db      	mvns	r3, r3
 8004412:	401a      	ands	r2, r3
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004418:	f7ff f838 	bl	800348c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800441c:	693b      	ldr	r3, [r7, #16]
 800441e:	685a      	ldr	r2, [r3, #4]
 8004420:	4b0a      	ldr	r3, [pc, #40]	; (800444c <vPortFree+0xbc>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4413      	add	r3, r2
 8004426:	4a09      	ldr	r2, [pc, #36]	; (800444c <vPortFree+0xbc>)
 8004428:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800442a:	6938      	ldr	r0, [r7, #16]
 800442c:	f000 f874 	bl	8004518 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004430:	4b07      	ldr	r3, [pc, #28]	; (8004450 <vPortFree+0xc0>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	3301      	adds	r3, #1
 8004436:	4a06      	ldr	r2, [pc, #24]	; (8004450 <vPortFree+0xc0>)
 8004438:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800443a:	f7ff f835 	bl	80034a8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800443e:	bf00      	nop
 8004440:	3718      	adds	r7, #24
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}
 8004446:	bf00      	nop
 8004448:	20004038 	.word	0x20004038
 800444c:	20004028 	.word	0x20004028
 8004450:	20004034 	.word	0x20004034

08004454 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004454:	b480      	push	{r7}
 8004456:	b085      	sub	sp, #20
 8004458:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800445a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800445e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004460:	4b27      	ldr	r3, [pc, #156]	; (8004500 <prvHeapInit+0xac>)
 8004462:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	f003 0307 	and.w	r3, r3, #7
 800446a:	2b00      	cmp	r3, #0
 800446c:	d00c      	beq.n	8004488 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	3307      	adds	r3, #7
 8004472:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	f023 0307 	bic.w	r3, r3, #7
 800447a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800447c:	68ba      	ldr	r2, [r7, #8]
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	1ad3      	subs	r3, r2, r3
 8004482:	4a1f      	ldr	r2, [pc, #124]	; (8004500 <prvHeapInit+0xac>)
 8004484:	4413      	add	r3, r2
 8004486:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800448c:	4a1d      	ldr	r2, [pc, #116]	; (8004504 <prvHeapInit+0xb0>)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004492:	4b1c      	ldr	r3, [pc, #112]	; (8004504 <prvHeapInit+0xb0>)
 8004494:	2200      	movs	r2, #0
 8004496:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	68ba      	ldr	r2, [r7, #8]
 800449c:	4413      	add	r3, r2
 800449e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80044a0:	2208      	movs	r2, #8
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	1a9b      	subs	r3, r3, r2
 80044a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	f023 0307 	bic.w	r3, r3, #7
 80044ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	4a15      	ldr	r2, [pc, #84]	; (8004508 <prvHeapInit+0xb4>)
 80044b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80044b6:	4b14      	ldr	r3, [pc, #80]	; (8004508 <prvHeapInit+0xb4>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	2200      	movs	r2, #0
 80044bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80044be:	4b12      	ldr	r3, [pc, #72]	; (8004508 <prvHeapInit+0xb4>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	2200      	movs	r2, #0
 80044c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	68fa      	ldr	r2, [r7, #12]
 80044ce:	1ad2      	subs	r2, r2, r3
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80044d4:	4b0c      	ldr	r3, [pc, #48]	; (8004508 <prvHeapInit+0xb4>)
 80044d6:	681a      	ldr	r2, [r3, #0]
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	4a0a      	ldr	r2, [pc, #40]	; (800450c <prvHeapInit+0xb8>)
 80044e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	4a09      	ldr	r2, [pc, #36]	; (8004510 <prvHeapInit+0xbc>)
 80044ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80044ec:	4b09      	ldr	r3, [pc, #36]	; (8004514 <prvHeapInit+0xc0>)
 80044ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80044f2:	601a      	str	r2, [r3, #0]
}
 80044f4:	bf00      	nop
 80044f6:	3714      	adds	r7, #20
 80044f8:	46bd      	mov	sp, r7
 80044fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fe:	4770      	bx	lr
 8004500:	2000041c 	.word	0x2000041c
 8004504:	2000401c 	.word	0x2000401c
 8004508:	20004024 	.word	0x20004024
 800450c:	2000402c 	.word	0x2000402c
 8004510:	20004028 	.word	0x20004028
 8004514:	20004038 	.word	0x20004038

08004518 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004518:	b480      	push	{r7}
 800451a:	b085      	sub	sp, #20
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004520:	4b28      	ldr	r3, [pc, #160]	; (80045c4 <prvInsertBlockIntoFreeList+0xac>)
 8004522:	60fb      	str	r3, [r7, #12]
 8004524:	e002      	b.n	800452c <prvInsertBlockIntoFreeList+0x14>
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	60fb      	str	r3, [r7, #12]
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	687a      	ldr	r2, [r7, #4]
 8004532:	429a      	cmp	r2, r3
 8004534:	d8f7      	bhi.n	8004526 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	68ba      	ldr	r2, [r7, #8]
 8004540:	4413      	add	r3, r2
 8004542:	687a      	ldr	r2, [r7, #4]
 8004544:	429a      	cmp	r2, r3
 8004546:	d108      	bne.n	800455a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	685a      	ldr	r2, [r3, #4]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	441a      	add	r2, r3
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	68ba      	ldr	r2, [r7, #8]
 8004564:	441a      	add	r2, r3
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	429a      	cmp	r2, r3
 800456c:	d118      	bne.n	80045a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681a      	ldr	r2, [r3, #0]
 8004572:	4b15      	ldr	r3, [pc, #84]	; (80045c8 <prvInsertBlockIntoFreeList+0xb0>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	429a      	cmp	r2, r3
 8004578:	d00d      	beq.n	8004596 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	685a      	ldr	r2, [r3, #4]
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	441a      	add	r2, r3
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	681a      	ldr	r2, [r3, #0]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	601a      	str	r2, [r3, #0]
 8004594:	e008      	b.n	80045a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004596:	4b0c      	ldr	r3, [pc, #48]	; (80045c8 <prvInsertBlockIntoFreeList+0xb0>)
 8004598:	681a      	ldr	r2, [r3, #0]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	601a      	str	r2, [r3, #0]
 800459e:	e003      	b.n	80045a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681a      	ldr	r2, [r3, #0]
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80045a8:	68fa      	ldr	r2, [r7, #12]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	429a      	cmp	r2, r3
 80045ae:	d002      	beq.n	80045b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	687a      	ldr	r2, [r7, #4]
 80045b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80045b6:	bf00      	nop
 80045b8:	3714      	adds	r7, #20
 80045ba:	46bd      	mov	sp, r7
 80045bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c0:	4770      	bx	lr
 80045c2:	bf00      	nop
 80045c4:	2000401c 	.word	0x2000401c
 80045c8:	20004024 	.word	0x20004024

080045cc <__errno>:
 80045cc:	4b01      	ldr	r3, [pc, #4]	; (80045d4 <__errno+0x8>)
 80045ce:	6818      	ldr	r0, [r3, #0]
 80045d0:	4770      	bx	lr
 80045d2:	bf00      	nop
 80045d4:	20000010 	.word	0x20000010

080045d8 <__libc_init_array>:
 80045d8:	b570      	push	{r4, r5, r6, lr}
 80045da:	4d0d      	ldr	r5, [pc, #52]	; (8004610 <__libc_init_array+0x38>)
 80045dc:	4c0d      	ldr	r4, [pc, #52]	; (8004614 <__libc_init_array+0x3c>)
 80045de:	1b64      	subs	r4, r4, r5
 80045e0:	10a4      	asrs	r4, r4, #2
 80045e2:	2600      	movs	r6, #0
 80045e4:	42a6      	cmp	r6, r4
 80045e6:	d109      	bne.n	80045fc <__libc_init_array+0x24>
 80045e8:	4d0b      	ldr	r5, [pc, #44]	; (8004618 <__libc_init_array+0x40>)
 80045ea:	4c0c      	ldr	r4, [pc, #48]	; (800461c <__libc_init_array+0x44>)
 80045ec:	f000 fc4e 	bl	8004e8c <_init>
 80045f0:	1b64      	subs	r4, r4, r5
 80045f2:	10a4      	asrs	r4, r4, #2
 80045f4:	2600      	movs	r6, #0
 80045f6:	42a6      	cmp	r6, r4
 80045f8:	d105      	bne.n	8004606 <__libc_init_array+0x2e>
 80045fa:	bd70      	pop	{r4, r5, r6, pc}
 80045fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8004600:	4798      	blx	r3
 8004602:	3601      	adds	r6, #1
 8004604:	e7ee      	b.n	80045e4 <__libc_init_array+0xc>
 8004606:	f855 3b04 	ldr.w	r3, [r5], #4
 800460a:	4798      	blx	r3
 800460c:	3601      	adds	r6, #1
 800460e:	e7f2      	b.n	80045f6 <__libc_init_array+0x1e>
 8004610:	08005094 	.word	0x08005094
 8004614:	08005094 	.word	0x08005094
 8004618:	08005094 	.word	0x08005094
 800461c:	08005098 	.word	0x08005098

08004620 <memcpy>:
 8004620:	440a      	add	r2, r1
 8004622:	4291      	cmp	r1, r2
 8004624:	f100 33ff 	add.w	r3, r0, #4294967295
 8004628:	d100      	bne.n	800462c <memcpy+0xc>
 800462a:	4770      	bx	lr
 800462c:	b510      	push	{r4, lr}
 800462e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004632:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004636:	4291      	cmp	r1, r2
 8004638:	d1f9      	bne.n	800462e <memcpy+0xe>
 800463a:	bd10      	pop	{r4, pc}

0800463c <memset>:
 800463c:	4402      	add	r2, r0
 800463e:	4603      	mov	r3, r0
 8004640:	4293      	cmp	r3, r2
 8004642:	d100      	bne.n	8004646 <memset+0xa>
 8004644:	4770      	bx	lr
 8004646:	f803 1b01 	strb.w	r1, [r3], #1
 800464a:	e7f9      	b.n	8004640 <memset+0x4>

0800464c <siprintf>:
 800464c:	b40e      	push	{r1, r2, r3}
 800464e:	b500      	push	{lr}
 8004650:	b09c      	sub	sp, #112	; 0x70
 8004652:	ab1d      	add	r3, sp, #116	; 0x74
 8004654:	9002      	str	r0, [sp, #8]
 8004656:	9006      	str	r0, [sp, #24]
 8004658:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800465c:	4809      	ldr	r0, [pc, #36]	; (8004684 <siprintf+0x38>)
 800465e:	9107      	str	r1, [sp, #28]
 8004660:	9104      	str	r1, [sp, #16]
 8004662:	4909      	ldr	r1, [pc, #36]	; (8004688 <siprintf+0x3c>)
 8004664:	f853 2b04 	ldr.w	r2, [r3], #4
 8004668:	9105      	str	r1, [sp, #20]
 800466a:	6800      	ldr	r0, [r0, #0]
 800466c:	9301      	str	r3, [sp, #4]
 800466e:	a902      	add	r1, sp, #8
 8004670:	f000 f868 	bl	8004744 <_svfiprintf_r>
 8004674:	9b02      	ldr	r3, [sp, #8]
 8004676:	2200      	movs	r2, #0
 8004678:	701a      	strb	r2, [r3, #0]
 800467a:	b01c      	add	sp, #112	; 0x70
 800467c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004680:	b003      	add	sp, #12
 8004682:	4770      	bx	lr
 8004684:	20000010 	.word	0x20000010
 8004688:	ffff0208 	.word	0xffff0208

0800468c <__ssputs_r>:
 800468c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004690:	688e      	ldr	r6, [r1, #8]
 8004692:	429e      	cmp	r6, r3
 8004694:	4682      	mov	sl, r0
 8004696:	460c      	mov	r4, r1
 8004698:	4690      	mov	r8, r2
 800469a:	461f      	mov	r7, r3
 800469c:	d838      	bhi.n	8004710 <__ssputs_r+0x84>
 800469e:	898a      	ldrh	r2, [r1, #12]
 80046a0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80046a4:	d032      	beq.n	800470c <__ssputs_r+0x80>
 80046a6:	6825      	ldr	r5, [r4, #0]
 80046a8:	6909      	ldr	r1, [r1, #16]
 80046aa:	eba5 0901 	sub.w	r9, r5, r1
 80046ae:	6965      	ldr	r5, [r4, #20]
 80046b0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80046b4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80046b8:	3301      	adds	r3, #1
 80046ba:	444b      	add	r3, r9
 80046bc:	106d      	asrs	r5, r5, #1
 80046be:	429d      	cmp	r5, r3
 80046c0:	bf38      	it	cc
 80046c2:	461d      	movcc	r5, r3
 80046c4:	0553      	lsls	r3, r2, #21
 80046c6:	d531      	bpl.n	800472c <__ssputs_r+0xa0>
 80046c8:	4629      	mov	r1, r5
 80046ca:	f000 fb39 	bl	8004d40 <_malloc_r>
 80046ce:	4606      	mov	r6, r0
 80046d0:	b950      	cbnz	r0, 80046e8 <__ssputs_r+0x5c>
 80046d2:	230c      	movs	r3, #12
 80046d4:	f8ca 3000 	str.w	r3, [sl]
 80046d8:	89a3      	ldrh	r3, [r4, #12]
 80046da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80046de:	81a3      	strh	r3, [r4, #12]
 80046e0:	f04f 30ff 	mov.w	r0, #4294967295
 80046e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046e8:	6921      	ldr	r1, [r4, #16]
 80046ea:	464a      	mov	r2, r9
 80046ec:	f7ff ff98 	bl	8004620 <memcpy>
 80046f0:	89a3      	ldrh	r3, [r4, #12]
 80046f2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80046f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046fa:	81a3      	strh	r3, [r4, #12]
 80046fc:	6126      	str	r6, [r4, #16]
 80046fe:	6165      	str	r5, [r4, #20]
 8004700:	444e      	add	r6, r9
 8004702:	eba5 0509 	sub.w	r5, r5, r9
 8004706:	6026      	str	r6, [r4, #0]
 8004708:	60a5      	str	r5, [r4, #8]
 800470a:	463e      	mov	r6, r7
 800470c:	42be      	cmp	r6, r7
 800470e:	d900      	bls.n	8004712 <__ssputs_r+0x86>
 8004710:	463e      	mov	r6, r7
 8004712:	4632      	mov	r2, r6
 8004714:	6820      	ldr	r0, [r4, #0]
 8004716:	4641      	mov	r1, r8
 8004718:	f000 faa8 	bl	8004c6c <memmove>
 800471c:	68a3      	ldr	r3, [r4, #8]
 800471e:	6822      	ldr	r2, [r4, #0]
 8004720:	1b9b      	subs	r3, r3, r6
 8004722:	4432      	add	r2, r6
 8004724:	60a3      	str	r3, [r4, #8]
 8004726:	6022      	str	r2, [r4, #0]
 8004728:	2000      	movs	r0, #0
 800472a:	e7db      	b.n	80046e4 <__ssputs_r+0x58>
 800472c:	462a      	mov	r2, r5
 800472e:	f000 fb61 	bl	8004df4 <_realloc_r>
 8004732:	4606      	mov	r6, r0
 8004734:	2800      	cmp	r0, #0
 8004736:	d1e1      	bne.n	80046fc <__ssputs_r+0x70>
 8004738:	6921      	ldr	r1, [r4, #16]
 800473a:	4650      	mov	r0, sl
 800473c:	f000 fab0 	bl	8004ca0 <_free_r>
 8004740:	e7c7      	b.n	80046d2 <__ssputs_r+0x46>
	...

08004744 <_svfiprintf_r>:
 8004744:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004748:	4698      	mov	r8, r3
 800474a:	898b      	ldrh	r3, [r1, #12]
 800474c:	061b      	lsls	r3, r3, #24
 800474e:	b09d      	sub	sp, #116	; 0x74
 8004750:	4607      	mov	r7, r0
 8004752:	460d      	mov	r5, r1
 8004754:	4614      	mov	r4, r2
 8004756:	d50e      	bpl.n	8004776 <_svfiprintf_r+0x32>
 8004758:	690b      	ldr	r3, [r1, #16]
 800475a:	b963      	cbnz	r3, 8004776 <_svfiprintf_r+0x32>
 800475c:	2140      	movs	r1, #64	; 0x40
 800475e:	f000 faef 	bl	8004d40 <_malloc_r>
 8004762:	6028      	str	r0, [r5, #0]
 8004764:	6128      	str	r0, [r5, #16]
 8004766:	b920      	cbnz	r0, 8004772 <_svfiprintf_r+0x2e>
 8004768:	230c      	movs	r3, #12
 800476a:	603b      	str	r3, [r7, #0]
 800476c:	f04f 30ff 	mov.w	r0, #4294967295
 8004770:	e0d1      	b.n	8004916 <_svfiprintf_r+0x1d2>
 8004772:	2340      	movs	r3, #64	; 0x40
 8004774:	616b      	str	r3, [r5, #20]
 8004776:	2300      	movs	r3, #0
 8004778:	9309      	str	r3, [sp, #36]	; 0x24
 800477a:	2320      	movs	r3, #32
 800477c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004780:	f8cd 800c 	str.w	r8, [sp, #12]
 8004784:	2330      	movs	r3, #48	; 0x30
 8004786:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004930 <_svfiprintf_r+0x1ec>
 800478a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800478e:	f04f 0901 	mov.w	r9, #1
 8004792:	4623      	mov	r3, r4
 8004794:	469a      	mov	sl, r3
 8004796:	f813 2b01 	ldrb.w	r2, [r3], #1
 800479a:	b10a      	cbz	r2, 80047a0 <_svfiprintf_r+0x5c>
 800479c:	2a25      	cmp	r2, #37	; 0x25
 800479e:	d1f9      	bne.n	8004794 <_svfiprintf_r+0x50>
 80047a0:	ebba 0b04 	subs.w	fp, sl, r4
 80047a4:	d00b      	beq.n	80047be <_svfiprintf_r+0x7a>
 80047a6:	465b      	mov	r3, fp
 80047a8:	4622      	mov	r2, r4
 80047aa:	4629      	mov	r1, r5
 80047ac:	4638      	mov	r0, r7
 80047ae:	f7ff ff6d 	bl	800468c <__ssputs_r>
 80047b2:	3001      	adds	r0, #1
 80047b4:	f000 80aa 	beq.w	800490c <_svfiprintf_r+0x1c8>
 80047b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80047ba:	445a      	add	r2, fp
 80047bc:	9209      	str	r2, [sp, #36]	; 0x24
 80047be:	f89a 3000 	ldrb.w	r3, [sl]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	f000 80a2 	beq.w	800490c <_svfiprintf_r+0x1c8>
 80047c8:	2300      	movs	r3, #0
 80047ca:	f04f 32ff 	mov.w	r2, #4294967295
 80047ce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80047d2:	f10a 0a01 	add.w	sl, sl, #1
 80047d6:	9304      	str	r3, [sp, #16]
 80047d8:	9307      	str	r3, [sp, #28]
 80047da:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80047de:	931a      	str	r3, [sp, #104]	; 0x68
 80047e0:	4654      	mov	r4, sl
 80047e2:	2205      	movs	r2, #5
 80047e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80047e8:	4851      	ldr	r0, [pc, #324]	; (8004930 <_svfiprintf_r+0x1ec>)
 80047ea:	f7fb fcf9 	bl	80001e0 <memchr>
 80047ee:	9a04      	ldr	r2, [sp, #16]
 80047f0:	b9d8      	cbnz	r0, 800482a <_svfiprintf_r+0xe6>
 80047f2:	06d0      	lsls	r0, r2, #27
 80047f4:	bf44      	itt	mi
 80047f6:	2320      	movmi	r3, #32
 80047f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80047fc:	0711      	lsls	r1, r2, #28
 80047fe:	bf44      	itt	mi
 8004800:	232b      	movmi	r3, #43	; 0x2b
 8004802:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004806:	f89a 3000 	ldrb.w	r3, [sl]
 800480a:	2b2a      	cmp	r3, #42	; 0x2a
 800480c:	d015      	beq.n	800483a <_svfiprintf_r+0xf6>
 800480e:	9a07      	ldr	r2, [sp, #28]
 8004810:	4654      	mov	r4, sl
 8004812:	2000      	movs	r0, #0
 8004814:	f04f 0c0a 	mov.w	ip, #10
 8004818:	4621      	mov	r1, r4
 800481a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800481e:	3b30      	subs	r3, #48	; 0x30
 8004820:	2b09      	cmp	r3, #9
 8004822:	d94e      	bls.n	80048c2 <_svfiprintf_r+0x17e>
 8004824:	b1b0      	cbz	r0, 8004854 <_svfiprintf_r+0x110>
 8004826:	9207      	str	r2, [sp, #28]
 8004828:	e014      	b.n	8004854 <_svfiprintf_r+0x110>
 800482a:	eba0 0308 	sub.w	r3, r0, r8
 800482e:	fa09 f303 	lsl.w	r3, r9, r3
 8004832:	4313      	orrs	r3, r2
 8004834:	9304      	str	r3, [sp, #16]
 8004836:	46a2      	mov	sl, r4
 8004838:	e7d2      	b.n	80047e0 <_svfiprintf_r+0x9c>
 800483a:	9b03      	ldr	r3, [sp, #12]
 800483c:	1d19      	adds	r1, r3, #4
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	9103      	str	r1, [sp, #12]
 8004842:	2b00      	cmp	r3, #0
 8004844:	bfbb      	ittet	lt
 8004846:	425b      	neglt	r3, r3
 8004848:	f042 0202 	orrlt.w	r2, r2, #2
 800484c:	9307      	strge	r3, [sp, #28]
 800484e:	9307      	strlt	r3, [sp, #28]
 8004850:	bfb8      	it	lt
 8004852:	9204      	strlt	r2, [sp, #16]
 8004854:	7823      	ldrb	r3, [r4, #0]
 8004856:	2b2e      	cmp	r3, #46	; 0x2e
 8004858:	d10c      	bne.n	8004874 <_svfiprintf_r+0x130>
 800485a:	7863      	ldrb	r3, [r4, #1]
 800485c:	2b2a      	cmp	r3, #42	; 0x2a
 800485e:	d135      	bne.n	80048cc <_svfiprintf_r+0x188>
 8004860:	9b03      	ldr	r3, [sp, #12]
 8004862:	1d1a      	adds	r2, r3, #4
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	9203      	str	r2, [sp, #12]
 8004868:	2b00      	cmp	r3, #0
 800486a:	bfb8      	it	lt
 800486c:	f04f 33ff 	movlt.w	r3, #4294967295
 8004870:	3402      	adds	r4, #2
 8004872:	9305      	str	r3, [sp, #20]
 8004874:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004940 <_svfiprintf_r+0x1fc>
 8004878:	7821      	ldrb	r1, [r4, #0]
 800487a:	2203      	movs	r2, #3
 800487c:	4650      	mov	r0, sl
 800487e:	f7fb fcaf 	bl	80001e0 <memchr>
 8004882:	b140      	cbz	r0, 8004896 <_svfiprintf_r+0x152>
 8004884:	2340      	movs	r3, #64	; 0x40
 8004886:	eba0 000a 	sub.w	r0, r0, sl
 800488a:	fa03 f000 	lsl.w	r0, r3, r0
 800488e:	9b04      	ldr	r3, [sp, #16]
 8004890:	4303      	orrs	r3, r0
 8004892:	3401      	adds	r4, #1
 8004894:	9304      	str	r3, [sp, #16]
 8004896:	f814 1b01 	ldrb.w	r1, [r4], #1
 800489a:	4826      	ldr	r0, [pc, #152]	; (8004934 <_svfiprintf_r+0x1f0>)
 800489c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80048a0:	2206      	movs	r2, #6
 80048a2:	f7fb fc9d 	bl	80001e0 <memchr>
 80048a6:	2800      	cmp	r0, #0
 80048a8:	d038      	beq.n	800491c <_svfiprintf_r+0x1d8>
 80048aa:	4b23      	ldr	r3, [pc, #140]	; (8004938 <_svfiprintf_r+0x1f4>)
 80048ac:	bb1b      	cbnz	r3, 80048f6 <_svfiprintf_r+0x1b2>
 80048ae:	9b03      	ldr	r3, [sp, #12]
 80048b0:	3307      	adds	r3, #7
 80048b2:	f023 0307 	bic.w	r3, r3, #7
 80048b6:	3308      	adds	r3, #8
 80048b8:	9303      	str	r3, [sp, #12]
 80048ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80048bc:	4433      	add	r3, r6
 80048be:	9309      	str	r3, [sp, #36]	; 0x24
 80048c0:	e767      	b.n	8004792 <_svfiprintf_r+0x4e>
 80048c2:	fb0c 3202 	mla	r2, ip, r2, r3
 80048c6:	460c      	mov	r4, r1
 80048c8:	2001      	movs	r0, #1
 80048ca:	e7a5      	b.n	8004818 <_svfiprintf_r+0xd4>
 80048cc:	2300      	movs	r3, #0
 80048ce:	3401      	adds	r4, #1
 80048d0:	9305      	str	r3, [sp, #20]
 80048d2:	4619      	mov	r1, r3
 80048d4:	f04f 0c0a 	mov.w	ip, #10
 80048d8:	4620      	mov	r0, r4
 80048da:	f810 2b01 	ldrb.w	r2, [r0], #1
 80048de:	3a30      	subs	r2, #48	; 0x30
 80048e0:	2a09      	cmp	r2, #9
 80048e2:	d903      	bls.n	80048ec <_svfiprintf_r+0x1a8>
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d0c5      	beq.n	8004874 <_svfiprintf_r+0x130>
 80048e8:	9105      	str	r1, [sp, #20]
 80048ea:	e7c3      	b.n	8004874 <_svfiprintf_r+0x130>
 80048ec:	fb0c 2101 	mla	r1, ip, r1, r2
 80048f0:	4604      	mov	r4, r0
 80048f2:	2301      	movs	r3, #1
 80048f4:	e7f0      	b.n	80048d8 <_svfiprintf_r+0x194>
 80048f6:	ab03      	add	r3, sp, #12
 80048f8:	9300      	str	r3, [sp, #0]
 80048fa:	462a      	mov	r2, r5
 80048fc:	4b0f      	ldr	r3, [pc, #60]	; (800493c <_svfiprintf_r+0x1f8>)
 80048fe:	a904      	add	r1, sp, #16
 8004900:	4638      	mov	r0, r7
 8004902:	f3af 8000 	nop.w
 8004906:	1c42      	adds	r2, r0, #1
 8004908:	4606      	mov	r6, r0
 800490a:	d1d6      	bne.n	80048ba <_svfiprintf_r+0x176>
 800490c:	89ab      	ldrh	r3, [r5, #12]
 800490e:	065b      	lsls	r3, r3, #25
 8004910:	f53f af2c 	bmi.w	800476c <_svfiprintf_r+0x28>
 8004914:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004916:	b01d      	add	sp, #116	; 0x74
 8004918:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800491c:	ab03      	add	r3, sp, #12
 800491e:	9300      	str	r3, [sp, #0]
 8004920:	462a      	mov	r2, r5
 8004922:	4b06      	ldr	r3, [pc, #24]	; (800493c <_svfiprintf_r+0x1f8>)
 8004924:	a904      	add	r1, sp, #16
 8004926:	4638      	mov	r0, r7
 8004928:	f000 f87a 	bl	8004a20 <_printf_i>
 800492c:	e7eb      	b.n	8004906 <_svfiprintf_r+0x1c2>
 800492e:	bf00      	nop
 8004930:	08005058 	.word	0x08005058
 8004934:	08005062 	.word	0x08005062
 8004938:	00000000 	.word	0x00000000
 800493c:	0800468d 	.word	0x0800468d
 8004940:	0800505e 	.word	0x0800505e

08004944 <_printf_common>:
 8004944:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004948:	4616      	mov	r6, r2
 800494a:	4699      	mov	r9, r3
 800494c:	688a      	ldr	r2, [r1, #8]
 800494e:	690b      	ldr	r3, [r1, #16]
 8004950:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004954:	4293      	cmp	r3, r2
 8004956:	bfb8      	it	lt
 8004958:	4613      	movlt	r3, r2
 800495a:	6033      	str	r3, [r6, #0]
 800495c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004960:	4607      	mov	r7, r0
 8004962:	460c      	mov	r4, r1
 8004964:	b10a      	cbz	r2, 800496a <_printf_common+0x26>
 8004966:	3301      	adds	r3, #1
 8004968:	6033      	str	r3, [r6, #0]
 800496a:	6823      	ldr	r3, [r4, #0]
 800496c:	0699      	lsls	r1, r3, #26
 800496e:	bf42      	ittt	mi
 8004970:	6833      	ldrmi	r3, [r6, #0]
 8004972:	3302      	addmi	r3, #2
 8004974:	6033      	strmi	r3, [r6, #0]
 8004976:	6825      	ldr	r5, [r4, #0]
 8004978:	f015 0506 	ands.w	r5, r5, #6
 800497c:	d106      	bne.n	800498c <_printf_common+0x48>
 800497e:	f104 0a19 	add.w	sl, r4, #25
 8004982:	68e3      	ldr	r3, [r4, #12]
 8004984:	6832      	ldr	r2, [r6, #0]
 8004986:	1a9b      	subs	r3, r3, r2
 8004988:	42ab      	cmp	r3, r5
 800498a:	dc26      	bgt.n	80049da <_printf_common+0x96>
 800498c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004990:	1e13      	subs	r3, r2, #0
 8004992:	6822      	ldr	r2, [r4, #0]
 8004994:	bf18      	it	ne
 8004996:	2301      	movne	r3, #1
 8004998:	0692      	lsls	r2, r2, #26
 800499a:	d42b      	bmi.n	80049f4 <_printf_common+0xb0>
 800499c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80049a0:	4649      	mov	r1, r9
 80049a2:	4638      	mov	r0, r7
 80049a4:	47c0      	blx	r8
 80049a6:	3001      	adds	r0, #1
 80049a8:	d01e      	beq.n	80049e8 <_printf_common+0xa4>
 80049aa:	6823      	ldr	r3, [r4, #0]
 80049ac:	68e5      	ldr	r5, [r4, #12]
 80049ae:	6832      	ldr	r2, [r6, #0]
 80049b0:	f003 0306 	and.w	r3, r3, #6
 80049b4:	2b04      	cmp	r3, #4
 80049b6:	bf08      	it	eq
 80049b8:	1aad      	subeq	r5, r5, r2
 80049ba:	68a3      	ldr	r3, [r4, #8]
 80049bc:	6922      	ldr	r2, [r4, #16]
 80049be:	bf0c      	ite	eq
 80049c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80049c4:	2500      	movne	r5, #0
 80049c6:	4293      	cmp	r3, r2
 80049c8:	bfc4      	itt	gt
 80049ca:	1a9b      	subgt	r3, r3, r2
 80049cc:	18ed      	addgt	r5, r5, r3
 80049ce:	2600      	movs	r6, #0
 80049d0:	341a      	adds	r4, #26
 80049d2:	42b5      	cmp	r5, r6
 80049d4:	d11a      	bne.n	8004a0c <_printf_common+0xc8>
 80049d6:	2000      	movs	r0, #0
 80049d8:	e008      	b.n	80049ec <_printf_common+0xa8>
 80049da:	2301      	movs	r3, #1
 80049dc:	4652      	mov	r2, sl
 80049de:	4649      	mov	r1, r9
 80049e0:	4638      	mov	r0, r7
 80049e2:	47c0      	blx	r8
 80049e4:	3001      	adds	r0, #1
 80049e6:	d103      	bne.n	80049f0 <_printf_common+0xac>
 80049e8:	f04f 30ff 	mov.w	r0, #4294967295
 80049ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049f0:	3501      	adds	r5, #1
 80049f2:	e7c6      	b.n	8004982 <_printf_common+0x3e>
 80049f4:	18e1      	adds	r1, r4, r3
 80049f6:	1c5a      	adds	r2, r3, #1
 80049f8:	2030      	movs	r0, #48	; 0x30
 80049fa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80049fe:	4422      	add	r2, r4
 8004a00:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004a04:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004a08:	3302      	adds	r3, #2
 8004a0a:	e7c7      	b.n	800499c <_printf_common+0x58>
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	4622      	mov	r2, r4
 8004a10:	4649      	mov	r1, r9
 8004a12:	4638      	mov	r0, r7
 8004a14:	47c0      	blx	r8
 8004a16:	3001      	adds	r0, #1
 8004a18:	d0e6      	beq.n	80049e8 <_printf_common+0xa4>
 8004a1a:	3601      	adds	r6, #1
 8004a1c:	e7d9      	b.n	80049d2 <_printf_common+0x8e>
	...

08004a20 <_printf_i>:
 8004a20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004a24:	460c      	mov	r4, r1
 8004a26:	4691      	mov	r9, r2
 8004a28:	7e27      	ldrb	r7, [r4, #24]
 8004a2a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004a2c:	2f78      	cmp	r7, #120	; 0x78
 8004a2e:	4680      	mov	r8, r0
 8004a30:	469a      	mov	sl, r3
 8004a32:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004a36:	d807      	bhi.n	8004a48 <_printf_i+0x28>
 8004a38:	2f62      	cmp	r7, #98	; 0x62
 8004a3a:	d80a      	bhi.n	8004a52 <_printf_i+0x32>
 8004a3c:	2f00      	cmp	r7, #0
 8004a3e:	f000 80d8 	beq.w	8004bf2 <_printf_i+0x1d2>
 8004a42:	2f58      	cmp	r7, #88	; 0x58
 8004a44:	f000 80a3 	beq.w	8004b8e <_printf_i+0x16e>
 8004a48:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004a4c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004a50:	e03a      	b.n	8004ac8 <_printf_i+0xa8>
 8004a52:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004a56:	2b15      	cmp	r3, #21
 8004a58:	d8f6      	bhi.n	8004a48 <_printf_i+0x28>
 8004a5a:	a001      	add	r0, pc, #4	; (adr r0, 8004a60 <_printf_i+0x40>)
 8004a5c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004a60:	08004ab9 	.word	0x08004ab9
 8004a64:	08004acd 	.word	0x08004acd
 8004a68:	08004a49 	.word	0x08004a49
 8004a6c:	08004a49 	.word	0x08004a49
 8004a70:	08004a49 	.word	0x08004a49
 8004a74:	08004a49 	.word	0x08004a49
 8004a78:	08004acd 	.word	0x08004acd
 8004a7c:	08004a49 	.word	0x08004a49
 8004a80:	08004a49 	.word	0x08004a49
 8004a84:	08004a49 	.word	0x08004a49
 8004a88:	08004a49 	.word	0x08004a49
 8004a8c:	08004bd9 	.word	0x08004bd9
 8004a90:	08004afd 	.word	0x08004afd
 8004a94:	08004bbb 	.word	0x08004bbb
 8004a98:	08004a49 	.word	0x08004a49
 8004a9c:	08004a49 	.word	0x08004a49
 8004aa0:	08004bfb 	.word	0x08004bfb
 8004aa4:	08004a49 	.word	0x08004a49
 8004aa8:	08004afd 	.word	0x08004afd
 8004aac:	08004a49 	.word	0x08004a49
 8004ab0:	08004a49 	.word	0x08004a49
 8004ab4:	08004bc3 	.word	0x08004bc3
 8004ab8:	680b      	ldr	r3, [r1, #0]
 8004aba:	1d1a      	adds	r2, r3, #4
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	600a      	str	r2, [r1, #0]
 8004ac0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004ac4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004ac8:	2301      	movs	r3, #1
 8004aca:	e0a3      	b.n	8004c14 <_printf_i+0x1f4>
 8004acc:	6825      	ldr	r5, [r4, #0]
 8004ace:	6808      	ldr	r0, [r1, #0]
 8004ad0:	062e      	lsls	r6, r5, #24
 8004ad2:	f100 0304 	add.w	r3, r0, #4
 8004ad6:	d50a      	bpl.n	8004aee <_printf_i+0xce>
 8004ad8:	6805      	ldr	r5, [r0, #0]
 8004ada:	600b      	str	r3, [r1, #0]
 8004adc:	2d00      	cmp	r5, #0
 8004ade:	da03      	bge.n	8004ae8 <_printf_i+0xc8>
 8004ae0:	232d      	movs	r3, #45	; 0x2d
 8004ae2:	426d      	negs	r5, r5
 8004ae4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ae8:	485e      	ldr	r0, [pc, #376]	; (8004c64 <_printf_i+0x244>)
 8004aea:	230a      	movs	r3, #10
 8004aec:	e019      	b.n	8004b22 <_printf_i+0x102>
 8004aee:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004af2:	6805      	ldr	r5, [r0, #0]
 8004af4:	600b      	str	r3, [r1, #0]
 8004af6:	bf18      	it	ne
 8004af8:	b22d      	sxthne	r5, r5
 8004afa:	e7ef      	b.n	8004adc <_printf_i+0xbc>
 8004afc:	680b      	ldr	r3, [r1, #0]
 8004afe:	6825      	ldr	r5, [r4, #0]
 8004b00:	1d18      	adds	r0, r3, #4
 8004b02:	6008      	str	r0, [r1, #0]
 8004b04:	0628      	lsls	r0, r5, #24
 8004b06:	d501      	bpl.n	8004b0c <_printf_i+0xec>
 8004b08:	681d      	ldr	r5, [r3, #0]
 8004b0a:	e002      	b.n	8004b12 <_printf_i+0xf2>
 8004b0c:	0669      	lsls	r1, r5, #25
 8004b0e:	d5fb      	bpl.n	8004b08 <_printf_i+0xe8>
 8004b10:	881d      	ldrh	r5, [r3, #0]
 8004b12:	4854      	ldr	r0, [pc, #336]	; (8004c64 <_printf_i+0x244>)
 8004b14:	2f6f      	cmp	r7, #111	; 0x6f
 8004b16:	bf0c      	ite	eq
 8004b18:	2308      	moveq	r3, #8
 8004b1a:	230a      	movne	r3, #10
 8004b1c:	2100      	movs	r1, #0
 8004b1e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004b22:	6866      	ldr	r6, [r4, #4]
 8004b24:	60a6      	str	r6, [r4, #8]
 8004b26:	2e00      	cmp	r6, #0
 8004b28:	bfa2      	ittt	ge
 8004b2a:	6821      	ldrge	r1, [r4, #0]
 8004b2c:	f021 0104 	bicge.w	r1, r1, #4
 8004b30:	6021      	strge	r1, [r4, #0]
 8004b32:	b90d      	cbnz	r5, 8004b38 <_printf_i+0x118>
 8004b34:	2e00      	cmp	r6, #0
 8004b36:	d04d      	beq.n	8004bd4 <_printf_i+0x1b4>
 8004b38:	4616      	mov	r6, r2
 8004b3a:	fbb5 f1f3 	udiv	r1, r5, r3
 8004b3e:	fb03 5711 	mls	r7, r3, r1, r5
 8004b42:	5dc7      	ldrb	r7, [r0, r7]
 8004b44:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004b48:	462f      	mov	r7, r5
 8004b4a:	42bb      	cmp	r3, r7
 8004b4c:	460d      	mov	r5, r1
 8004b4e:	d9f4      	bls.n	8004b3a <_printf_i+0x11a>
 8004b50:	2b08      	cmp	r3, #8
 8004b52:	d10b      	bne.n	8004b6c <_printf_i+0x14c>
 8004b54:	6823      	ldr	r3, [r4, #0]
 8004b56:	07df      	lsls	r7, r3, #31
 8004b58:	d508      	bpl.n	8004b6c <_printf_i+0x14c>
 8004b5a:	6923      	ldr	r3, [r4, #16]
 8004b5c:	6861      	ldr	r1, [r4, #4]
 8004b5e:	4299      	cmp	r1, r3
 8004b60:	bfde      	ittt	le
 8004b62:	2330      	movle	r3, #48	; 0x30
 8004b64:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004b68:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004b6c:	1b92      	subs	r2, r2, r6
 8004b6e:	6122      	str	r2, [r4, #16]
 8004b70:	f8cd a000 	str.w	sl, [sp]
 8004b74:	464b      	mov	r3, r9
 8004b76:	aa03      	add	r2, sp, #12
 8004b78:	4621      	mov	r1, r4
 8004b7a:	4640      	mov	r0, r8
 8004b7c:	f7ff fee2 	bl	8004944 <_printf_common>
 8004b80:	3001      	adds	r0, #1
 8004b82:	d14c      	bne.n	8004c1e <_printf_i+0x1fe>
 8004b84:	f04f 30ff 	mov.w	r0, #4294967295
 8004b88:	b004      	add	sp, #16
 8004b8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b8e:	4835      	ldr	r0, [pc, #212]	; (8004c64 <_printf_i+0x244>)
 8004b90:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004b94:	6823      	ldr	r3, [r4, #0]
 8004b96:	680e      	ldr	r6, [r1, #0]
 8004b98:	061f      	lsls	r7, r3, #24
 8004b9a:	f856 5b04 	ldr.w	r5, [r6], #4
 8004b9e:	600e      	str	r6, [r1, #0]
 8004ba0:	d514      	bpl.n	8004bcc <_printf_i+0x1ac>
 8004ba2:	07d9      	lsls	r1, r3, #31
 8004ba4:	bf44      	itt	mi
 8004ba6:	f043 0320 	orrmi.w	r3, r3, #32
 8004baa:	6023      	strmi	r3, [r4, #0]
 8004bac:	b91d      	cbnz	r5, 8004bb6 <_printf_i+0x196>
 8004bae:	6823      	ldr	r3, [r4, #0]
 8004bb0:	f023 0320 	bic.w	r3, r3, #32
 8004bb4:	6023      	str	r3, [r4, #0]
 8004bb6:	2310      	movs	r3, #16
 8004bb8:	e7b0      	b.n	8004b1c <_printf_i+0xfc>
 8004bba:	6823      	ldr	r3, [r4, #0]
 8004bbc:	f043 0320 	orr.w	r3, r3, #32
 8004bc0:	6023      	str	r3, [r4, #0]
 8004bc2:	2378      	movs	r3, #120	; 0x78
 8004bc4:	4828      	ldr	r0, [pc, #160]	; (8004c68 <_printf_i+0x248>)
 8004bc6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004bca:	e7e3      	b.n	8004b94 <_printf_i+0x174>
 8004bcc:	065e      	lsls	r6, r3, #25
 8004bce:	bf48      	it	mi
 8004bd0:	b2ad      	uxthmi	r5, r5
 8004bd2:	e7e6      	b.n	8004ba2 <_printf_i+0x182>
 8004bd4:	4616      	mov	r6, r2
 8004bd6:	e7bb      	b.n	8004b50 <_printf_i+0x130>
 8004bd8:	680b      	ldr	r3, [r1, #0]
 8004bda:	6826      	ldr	r6, [r4, #0]
 8004bdc:	6960      	ldr	r0, [r4, #20]
 8004bde:	1d1d      	adds	r5, r3, #4
 8004be0:	600d      	str	r5, [r1, #0]
 8004be2:	0635      	lsls	r5, r6, #24
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	d501      	bpl.n	8004bec <_printf_i+0x1cc>
 8004be8:	6018      	str	r0, [r3, #0]
 8004bea:	e002      	b.n	8004bf2 <_printf_i+0x1d2>
 8004bec:	0671      	lsls	r1, r6, #25
 8004bee:	d5fb      	bpl.n	8004be8 <_printf_i+0x1c8>
 8004bf0:	8018      	strh	r0, [r3, #0]
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	6123      	str	r3, [r4, #16]
 8004bf6:	4616      	mov	r6, r2
 8004bf8:	e7ba      	b.n	8004b70 <_printf_i+0x150>
 8004bfa:	680b      	ldr	r3, [r1, #0]
 8004bfc:	1d1a      	adds	r2, r3, #4
 8004bfe:	600a      	str	r2, [r1, #0]
 8004c00:	681e      	ldr	r6, [r3, #0]
 8004c02:	6862      	ldr	r2, [r4, #4]
 8004c04:	2100      	movs	r1, #0
 8004c06:	4630      	mov	r0, r6
 8004c08:	f7fb faea 	bl	80001e0 <memchr>
 8004c0c:	b108      	cbz	r0, 8004c12 <_printf_i+0x1f2>
 8004c0e:	1b80      	subs	r0, r0, r6
 8004c10:	6060      	str	r0, [r4, #4]
 8004c12:	6863      	ldr	r3, [r4, #4]
 8004c14:	6123      	str	r3, [r4, #16]
 8004c16:	2300      	movs	r3, #0
 8004c18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c1c:	e7a8      	b.n	8004b70 <_printf_i+0x150>
 8004c1e:	6923      	ldr	r3, [r4, #16]
 8004c20:	4632      	mov	r2, r6
 8004c22:	4649      	mov	r1, r9
 8004c24:	4640      	mov	r0, r8
 8004c26:	47d0      	blx	sl
 8004c28:	3001      	adds	r0, #1
 8004c2a:	d0ab      	beq.n	8004b84 <_printf_i+0x164>
 8004c2c:	6823      	ldr	r3, [r4, #0]
 8004c2e:	079b      	lsls	r3, r3, #30
 8004c30:	d413      	bmi.n	8004c5a <_printf_i+0x23a>
 8004c32:	68e0      	ldr	r0, [r4, #12]
 8004c34:	9b03      	ldr	r3, [sp, #12]
 8004c36:	4298      	cmp	r0, r3
 8004c38:	bfb8      	it	lt
 8004c3a:	4618      	movlt	r0, r3
 8004c3c:	e7a4      	b.n	8004b88 <_printf_i+0x168>
 8004c3e:	2301      	movs	r3, #1
 8004c40:	4632      	mov	r2, r6
 8004c42:	4649      	mov	r1, r9
 8004c44:	4640      	mov	r0, r8
 8004c46:	47d0      	blx	sl
 8004c48:	3001      	adds	r0, #1
 8004c4a:	d09b      	beq.n	8004b84 <_printf_i+0x164>
 8004c4c:	3501      	adds	r5, #1
 8004c4e:	68e3      	ldr	r3, [r4, #12]
 8004c50:	9903      	ldr	r1, [sp, #12]
 8004c52:	1a5b      	subs	r3, r3, r1
 8004c54:	42ab      	cmp	r3, r5
 8004c56:	dcf2      	bgt.n	8004c3e <_printf_i+0x21e>
 8004c58:	e7eb      	b.n	8004c32 <_printf_i+0x212>
 8004c5a:	2500      	movs	r5, #0
 8004c5c:	f104 0619 	add.w	r6, r4, #25
 8004c60:	e7f5      	b.n	8004c4e <_printf_i+0x22e>
 8004c62:	bf00      	nop
 8004c64:	08005069 	.word	0x08005069
 8004c68:	0800507a 	.word	0x0800507a

08004c6c <memmove>:
 8004c6c:	4288      	cmp	r0, r1
 8004c6e:	b510      	push	{r4, lr}
 8004c70:	eb01 0402 	add.w	r4, r1, r2
 8004c74:	d902      	bls.n	8004c7c <memmove+0x10>
 8004c76:	4284      	cmp	r4, r0
 8004c78:	4623      	mov	r3, r4
 8004c7a:	d807      	bhi.n	8004c8c <memmove+0x20>
 8004c7c:	1e43      	subs	r3, r0, #1
 8004c7e:	42a1      	cmp	r1, r4
 8004c80:	d008      	beq.n	8004c94 <memmove+0x28>
 8004c82:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004c86:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004c8a:	e7f8      	b.n	8004c7e <memmove+0x12>
 8004c8c:	4402      	add	r2, r0
 8004c8e:	4601      	mov	r1, r0
 8004c90:	428a      	cmp	r2, r1
 8004c92:	d100      	bne.n	8004c96 <memmove+0x2a>
 8004c94:	bd10      	pop	{r4, pc}
 8004c96:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004c9a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004c9e:	e7f7      	b.n	8004c90 <memmove+0x24>

08004ca0 <_free_r>:
 8004ca0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004ca2:	2900      	cmp	r1, #0
 8004ca4:	d048      	beq.n	8004d38 <_free_r+0x98>
 8004ca6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004caa:	9001      	str	r0, [sp, #4]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	f1a1 0404 	sub.w	r4, r1, #4
 8004cb2:	bfb8      	it	lt
 8004cb4:	18e4      	addlt	r4, r4, r3
 8004cb6:	f000 f8d3 	bl	8004e60 <__malloc_lock>
 8004cba:	4a20      	ldr	r2, [pc, #128]	; (8004d3c <_free_r+0x9c>)
 8004cbc:	9801      	ldr	r0, [sp, #4]
 8004cbe:	6813      	ldr	r3, [r2, #0]
 8004cc0:	4615      	mov	r5, r2
 8004cc2:	b933      	cbnz	r3, 8004cd2 <_free_r+0x32>
 8004cc4:	6063      	str	r3, [r4, #4]
 8004cc6:	6014      	str	r4, [r2, #0]
 8004cc8:	b003      	add	sp, #12
 8004cca:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004cce:	f000 b8cd 	b.w	8004e6c <__malloc_unlock>
 8004cd2:	42a3      	cmp	r3, r4
 8004cd4:	d90b      	bls.n	8004cee <_free_r+0x4e>
 8004cd6:	6821      	ldr	r1, [r4, #0]
 8004cd8:	1862      	adds	r2, r4, r1
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	bf04      	itt	eq
 8004cde:	681a      	ldreq	r2, [r3, #0]
 8004ce0:	685b      	ldreq	r3, [r3, #4]
 8004ce2:	6063      	str	r3, [r4, #4]
 8004ce4:	bf04      	itt	eq
 8004ce6:	1852      	addeq	r2, r2, r1
 8004ce8:	6022      	streq	r2, [r4, #0]
 8004cea:	602c      	str	r4, [r5, #0]
 8004cec:	e7ec      	b.n	8004cc8 <_free_r+0x28>
 8004cee:	461a      	mov	r2, r3
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	b10b      	cbz	r3, 8004cf8 <_free_r+0x58>
 8004cf4:	42a3      	cmp	r3, r4
 8004cf6:	d9fa      	bls.n	8004cee <_free_r+0x4e>
 8004cf8:	6811      	ldr	r1, [r2, #0]
 8004cfa:	1855      	adds	r5, r2, r1
 8004cfc:	42a5      	cmp	r5, r4
 8004cfe:	d10b      	bne.n	8004d18 <_free_r+0x78>
 8004d00:	6824      	ldr	r4, [r4, #0]
 8004d02:	4421      	add	r1, r4
 8004d04:	1854      	adds	r4, r2, r1
 8004d06:	42a3      	cmp	r3, r4
 8004d08:	6011      	str	r1, [r2, #0]
 8004d0a:	d1dd      	bne.n	8004cc8 <_free_r+0x28>
 8004d0c:	681c      	ldr	r4, [r3, #0]
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	6053      	str	r3, [r2, #4]
 8004d12:	4421      	add	r1, r4
 8004d14:	6011      	str	r1, [r2, #0]
 8004d16:	e7d7      	b.n	8004cc8 <_free_r+0x28>
 8004d18:	d902      	bls.n	8004d20 <_free_r+0x80>
 8004d1a:	230c      	movs	r3, #12
 8004d1c:	6003      	str	r3, [r0, #0]
 8004d1e:	e7d3      	b.n	8004cc8 <_free_r+0x28>
 8004d20:	6825      	ldr	r5, [r4, #0]
 8004d22:	1961      	adds	r1, r4, r5
 8004d24:	428b      	cmp	r3, r1
 8004d26:	bf04      	itt	eq
 8004d28:	6819      	ldreq	r1, [r3, #0]
 8004d2a:	685b      	ldreq	r3, [r3, #4]
 8004d2c:	6063      	str	r3, [r4, #4]
 8004d2e:	bf04      	itt	eq
 8004d30:	1949      	addeq	r1, r1, r5
 8004d32:	6021      	streq	r1, [r4, #0]
 8004d34:	6054      	str	r4, [r2, #4]
 8004d36:	e7c7      	b.n	8004cc8 <_free_r+0x28>
 8004d38:	b003      	add	sp, #12
 8004d3a:	bd30      	pop	{r4, r5, pc}
 8004d3c:	2000403c 	.word	0x2000403c

08004d40 <_malloc_r>:
 8004d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d42:	1ccd      	adds	r5, r1, #3
 8004d44:	f025 0503 	bic.w	r5, r5, #3
 8004d48:	3508      	adds	r5, #8
 8004d4a:	2d0c      	cmp	r5, #12
 8004d4c:	bf38      	it	cc
 8004d4e:	250c      	movcc	r5, #12
 8004d50:	2d00      	cmp	r5, #0
 8004d52:	4606      	mov	r6, r0
 8004d54:	db01      	blt.n	8004d5a <_malloc_r+0x1a>
 8004d56:	42a9      	cmp	r1, r5
 8004d58:	d903      	bls.n	8004d62 <_malloc_r+0x22>
 8004d5a:	230c      	movs	r3, #12
 8004d5c:	6033      	str	r3, [r6, #0]
 8004d5e:	2000      	movs	r0, #0
 8004d60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d62:	f000 f87d 	bl	8004e60 <__malloc_lock>
 8004d66:	4921      	ldr	r1, [pc, #132]	; (8004dec <_malloc_r+0xac>)
 8004d68:	680a      	ldr	r2, [r1, #0]
 8004d6a:	4614      	mov	r4, r2
 8004d6c:	b99c      	cbnz	r4, 8004d96 <_malloc_r+0x56>
 8004d6e:	4f20      	ldr	r7, [pc, #128]	; (8004df0 <_malloc_r+0xb0>)
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	b923      	cbnz	r3, 8004d7e <_malloc_r+0x3e>
 8004d74:	4621      	mov	r1, r4
 8004d76:	4630      	mov	r0, r6
 8004d78:	f000 f862 	bl	8004e40 <_sbrk_r>
 8004d7c:	6038      	str	r0, [r7, #0]
 8004d7e:	4629      	mov	r1, r5
 8004d80:	4630      	mov	r0, r6
 8004d82:	f000 f85d 	bl	8004e40 <_sbrk_r>
 8004d86:	1c43      	adds	r3, r0, #1
 8004d88:	d123      	bne.n	8004dd2 <_malloc_r+0x92>
 8004d8a:	230c      	movs	r3, #12
 8004d8c:	6033      	str	r3, [r6, #0]
 8004d8e:	4630      	mov	r0, r6
 8004d90:	f000 f86c 	bl	8004e6c <__malloc_unlock>
 8004d94:	e7e3      	b.n	8004d5e <_malloc_r+0x1e>
 8004d96:	6823      	ldr	r3, [r4, #0]
 8004d98:	1b5b      	subs	r3, r3, r5
 8004d9a:	d417      	bmi.n	8004dcc <_malloc_r+0x8c>
 8004d9c:	2b0b      	cmp	r3, #11
 8004d9e:	d903      	bls.n	8004da8 <_malloc_r+0x68>
 8004da0:	6023      	str	r3, [r4, #0]
 8004da2:	441c      	add	r4, r3
 8004da4:	6025      	str	r5, [r4, #0]
 8004da6:	e004      	b.n	8004db2 <_malloc_r+0x72>
 8004da8:	6863      	ldr	r3, [r4, #4]
 8004daa:	42a2      	cmp	r2, r4
 8004dac:	bf0c      	ite	eq
 8004dae:	600b      	streq	r3, [r1, #0]
 8004db0:	6053      	strne	r3, [r2, #4]
 8004db2:	4630      	mov	r0, r6
 8004db4:	f000 f85a 	bl	8004e6c <__malloc_unlock>
 8004db8:	f104 000b 	add.w	r0, r4, #11
 8004dbc:	1d23      	adds	r3, r4, #4
 8004dbe:	f020 0007 	bic.w	r0, r0, #7
 8004dc2:	1ac2      	subs	r2, r0, r3
 8004dc4:	d0cc      	beq.n	8004d60 <_malloc_r+0x20>
 8004dc6:	1a1b      	subs	r3, r3, r0
 8004dc8:	50a3      	str	r3, [r4, r2]
 8004dca:	e7c9      	b.n	8004d60 <_malloc_r+0x20>
 8004dcc:	4622      	mov	r2, r4
 8004dce:	6864      	ldr	r4, [r4, #4]
 8004dd0:	e7cc      	b.n	8004d6c <_malloc_r+0x2c>
 8004dd2:	1cc4      	adds	r4, r0, #3
 8004dd4:	f024 0403 	bic.w	r4, r4, #3
 8004dd8:	42a0      	cmp	r0, r4
 8004dda:	d0e3      	beq.n	8004da4 <_malloc_r+0x64>
 8004ddc:	1a21      	subs	r1, r4, r0
 8004dde:	4630      	mov	r0, r6
 8004de0:	f000 f82e 	bl	8004e40 <_sbrk_r>
 8004de4:	3001      	adds	r0, #1
 8004de6:	d1dd      	bne.n	8004da4 <_malloc_r+0x64>
 8004de8:	e7cf      	b.n	8004d8a <_malloc_r+0x4a>
 8004dea:	bf00      	nop
 8004dec:	2000403c 	.word	0x2000403c
 8004df0:	20004040 	.word	0x20004040

08004df4 <_realloc_r>:
 8004df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004df6:	4607      	mov	r7, r0
 8004df8:	4614      	mov	r4, r2
 8004dfa:	460e      	mov	r6, r1
 8004dfc:	b921      	cbnz	r1, 8004e08 <_realloc_r+0x14>
 8004dfe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004e02:	4611      	mov	r1, r2
 8004e04:	f7ff bf9c 	b.w	8004d40 <_malloc_r>
 8004e08:	b922      	cbnz	r2, 8004e14 <_realloc_r+0x20>
 8004e0a:	f7ff ff49 	bl	8004ca0 <_free_r>
 8004e0e:	4625      	mov	r5, r4
 8004e10:	4628      	mov	r0, r5
 8004e12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e14:	f000 f830 	bl	8004e78 <_malloc_usable_size_r>
 8004e18:	42a0      	cmp	r0, r4
 8004e1a:	d20f      	bcs.n	8004e3c <_realloc_r+0x48>
 8004e1c:	4621      	mov	r1, r4
 8004e1e:	4638      	mov	r0, r7
 8004e20:	f7ff ff8e 	bl	8004d40 <_malloc_r>
 8004e24:	4605      	mov	r5, r0
 8004e26:	2800      	cmp	r0, #0
 8004e28:	d0f2      	beq.n	8004e10 <_realloc_r+0x1c>
 8004e2a:	4631      	mov	r1, r6
 8004e2c:	4622      	mov	r2, r4
 8004e2e:	f7ff fbf7 	bl	8004620 <memcpy>
 8004e32:	4631      	mov	r1, r6
 8004e34:	4638      	mov	r0, r7
 8004e36:	f7ff ff33 	bl	8004ca0 <_free_r>
 8004e3a:	e7e9      	b.n	8004e10 <_realloc_r+0x1c>
 8004e3c:	4635      	mov	r5, r6
 8004e3e:	e7e7      	b.n	8004e10 <_realloc_r+0x1c>

08004e40 <_sbrk_r>:
 8004e40:	b538      	push	{r3, r4, r5, lr}
 8004e42:	4d06      	ldr	r5, [pc, #24]	; (8004e5c <_sbrk_r+0x1c>)
 8004e44:	2300      	movs	r3, #0
 8004e46:	4604      	mov	r4, r0
 8004e48:	4608      	mov	r0, r1
 8004e4a:	602b      	str	r3, [r5, #0]
 8004e4c:	f7fb fef6 	bl	8000c3c <_sbrk>
 8004e50:	1c43      	adds	r3, r0, #1
 8004e52:	d102      	bne.n	8004e5a <_sbrk_r+0x1a>
 8004e54:	682b      	ldr	r3, [r5, #0]
 8004e56:	b103      	cbz	r3, 8004e5a <_sbrk_r+0x1a>
 8004e58:	6023      	str	r3, [r4, #0]
 8004e5a:	bd38      	pop	{r3, r4, r5, pc}
 8004e5c:	200040f0 	.word	0x200040f0

08004e60 <__malloc_lock>:
 8004e60:	4801      	ldr	r0, [pc, #4]	; (8004e68 <__malloc_lock+0x8>)
 8004e62:	f000 b811 	b.w	8004e88 <__retarget_lock_acquire_recursive>
 8004e66:	bf00      	nop
 8004e68:	200040f8 	.word	0x200040f8

08004e6c <__malloc_unlock>:
 8004e6c:	4801      	ldr	r0, [pc, #4]	; (8004e74 <__malloc_unlock+0x8>)
 8004e6e:	f000 b80c 	b.w	8004e8a <__retarget_lock_release_recursive>
 8004e72:	bf00      	nop
 8004e74:	200040f8 	.word	0x200040f8

08004e78 <_malloc_usable_size_r>:
 8004e78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e7c:	1f18      	subs	r0, r3, #4
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	bfbc      	itt	lt
 8004e82:	580b      	ldrlt	r3, [r1, r0]
 8004e84:	18c0      	addlt	r0, r0, r3
 8004e86:	4770      	bx	lr

08004e88 <__retarget_lock_acquire_recursive>:
 8004e88:	4770      	bx	lr

08004e8a <__retarget_lock_release_recursive>:
 8004e8a:	4770      	bx	lr

08004e8c <_init>:
 8004e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e8e:	bf00      	nop
 8004e90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e92:	bc08      	pop	{r3}
 8004e94:	469e      	mov	lr, r3
 8004e96:	4770      	bx	lr

08004e98 <_fini>:
 8004e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e9a:	bf00      	nop
 8004e9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e9e:	bc08      	pop	{r3}
 8004ea0:	469e      	mov	lr, r3
 8004ea2:	4770      	bx	lr
